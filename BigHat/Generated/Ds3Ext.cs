// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ds3ext.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ds3Ext {

  /// <summary>Holder for reflection information generated from ds3ext.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Ds3ExtReflection {

    #region Descriptor
    /// <summary>File descriptor for ds3ext.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Ds3ExtReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxkczNleHQucHJvdG8SBmRzM2V4dCKYFgoQRXF1aXBQYXJhbVdlYXBvbhIK",
            "CgJJZBgCIAEoDRINCgVJbmRleBgDIAEoERIOCgZPZmZzZXQYBCABKBESGwoT",
            "QmVoYXZpb3JWYXJpYXRpb25JZBgFIAEoDRIOCgZTb3J0SWQYBiABKA0SGAoQ",
            "V2FuZGVyaW5nRXF1aXBJZBgHIAEoERIOCgZXZWlnaHQYCCABKAISGAoQV2Vh",
            "cG9uV2VpZ2h0UmF0ZRgJIAEoERIQCghGaXhQcmljZRgKIAEoERISCgpCYXNp",
            "Y1ByaWNlGAsgASgREhEKCVNlbGxWYWx1ZRgMIAEoERIXCg9Db3JyZWN0U3Ry",
            "ZW5ndGgYDSABKAISFgoOQ29ycmVjdEFnaWxpdHkYDiABKAISFAoMQ29ycmVj",
            "dE1hZ2ljGA8gASgCEhQKDENvcnJlY3RGYWl0aBgQIAEoAhIYChBQaHlzR3Vh",
            "cmRDdXRSYXRlGBEgASgCEhcKD01hZ0d1YXJkQ3V0UmF0ZRgSIAEoAhIYChBG",
            "aXJlR3VhcmRDdXRSYXRlGBMgASgCEhgKEFRodW5HdWFyZEN1dFJhdGUYFCAB",
            "KAISGwoTU3BFZmZlY3RCZWhhdmlvcklkMRgVIAEoERIbChNTcEVmZmVjdEJl",
            "aGF2aW9ySWQyGBYgASgREhsKE1NwRWZmZWN0QmVoYXZpb3JJZDMYFyABKBES",
            "GwoTUmVzaWRlbnRTcEVmZmVjdElkMRgYIAEoERIbChNSZXNpZGVudFNwRWZm",
            "ZWN0SWQyGBkgASgREhsKE1Jlc2lkZW50U3BFZmZlY3RJZDMYGiABKBESFQoN",
            "TWF0ZXJpYWxTZXRJZBgbIAEoERIWCg5PcmlnaW5FcXVpcFdlcBgcIAEoERIX",
            "Cg9PcmlnaW5FcXVpcFdlcDEYHSABKBESFwoPT3JpZ2luRXF1aXBXZXAyGB4g",
            "ASgREhcKD09yaWdpbkVxdWlwV2VwMxgfIAEoERIXCg9PcmlnaW5FcXVpcFdl",
            "cDQYICABKBESFwoPT3JpZ2luRXF1aXBXZXA1GCEgASgREhcKD09yaWdpbkVx",
            "dWlwV2VwNhgiIAEoERIXCg9PcmlnaW5FcXVpcFdlcDcYIyABKBESFwoPT3Jp",
            "Z2luRXF1aXBXZXA4GCQgASgREhcKD09yaWdpbkVxdWlwV2VwORglIAEoERIY",
            "ChBPcmlnaW5FcXVpcFdlcDEwGCYgASgREhgKEE9yaWdpbkVxdWlwV2VwMTEY",
            "JyABKBESGAoQT3JpZ2luRXF1aXBXZXAxMhgoIAEoERIYChBPcmlnaW5FcXVp",
            "cFdlcDEzGCkgASgREhgKEE9yaWdpbkVxdWlwV2VwMTQYKiABKBESGAoQT3Jp",
            "Z2luRXF1aXBXZXAxNRgrIAEoERIbChNBbnRpRGVtb25EYW1hZ2VSYXRlGCwg",
            "ASgCEhoKEkFudFNhaW50RGFtYWdlUmF0ZRgtIAEoAhIbChNBbnRXZWFrQV9E",
            "YW1hZ2VSYXRlGC4gASgCEhsKE0FudFdlYWtCX0RhbWFnZVJhdGUYLyABKAIS",
            "GAoQVmFncmFudEl0ZW1Mb3RJZBgwIAEoERIkChxWYWdyYW50Qm9udXNFbmVE",
            "cm9wSXRlbUxvdElkGDEgASgREiMKG1ZhZ3JhbnRJdGVtRW5lRHJvcEl0ZW1M",
            "b3RJZBgyIAEoERIUCgxFcXVpcE1vZGVsSWQYMyABKA0SDgoGSWNvbklkGDQg",
            "ASgNEhIKCkR1cmFiaWxpdHkYNSABKBESFQoNTWF4RHVyYWJpbGl0eRg2IAEo",
            "ERIXCg9QYXJyeURhbWFnZUxpZmUYNyABKBESGQoRQXR0YWNrVGhyb3dFc2Nh",
            "cGUYOCABKA0SGQoRQXR0YWNrQmFzZVBoeXNpY3MYOSABKBESFwoPQXR0YWNr",
            "QmFzZU1hZ2ljGDogASgREhYKDkF0dGFja0Jhc2VGaXJlGDsgASgREhkKEUF0",
            "dGFja0Jhc2VUaHVuZGVyGDwgASgREhkKEUF0dGFja0Jhc2VTdGFtaW5hGD0g",
            "ASgREhcKD0F0dGFja0Jhc2VQb2lzZRg+IAEoERIUCgxTYUR1cmFiaWxpdHkY",
            "PyABKBESEgoKR3VhcmRBbmdsZRhAIAEoERIRCglTdGFiaWxpdHkYQSABKBES",
            "FwoPUmVpbmZvcmNlVHlwZUlkGEIgASgREhYKDlRyb3BoeVNHcmFkZUlkGEMg",
            "ASgREhQKDFRocm9waHlTZXFJZBhEIAEoERIUCgxUaHJvd0F0a1JhdGUYRSAB",
            "KBESEwoLQm93RGlzdFJhdGUYRiABKBESGgoSRXF1aXBNb2RlbENhdGVnb3J5",
            "GEcgASgNEhgKEEVxdWlwTW9kZWxHZW5kZXIYSCABKA0SFgoOV2VhcG9uQ2F0",
            "ZWdvcnkYSSABKA0SFgoOTW90aW9uQ2F0ZWdvcnkYSiABKA0SGwoTR3VhcmRN",
            "b3Rpb25DYXRlZ29yeRhLIAEoDRITCgtBdGtNYXRlcmlhbBhMIAEoDRITCgtE",
            "ZWZNYXRlcmlhbBhNIAEoDRIWCg5EZWZTZnhNYXRlcmlhbBhOIAEoDRIXCg9Q",
            "aHlzaWNzU3RhdEZ1bmMYTyABKA0SEwoLU3BBdHRyaWJ1dGUYUCABKA0SFQoN",
            "U3BBdGtDYXRlZ29yeRhRIAEoDRIaChJXZXBNb3Rpb25PbmVIYW5kSWQYUiAB",
            "KA0SGwoTV2VwTW90aW9uQm90aEhhbmRJZBhTIAEoDRIWCg5Qcm9wZXJTdHJl",
            "bmd0aBhUIAEoDRIVCg1Qcm9wZXJBZ2lsaXR5GFUgASgNEhMKC1Byb3Blck1h",
            "Z2ljGFYgASgNEhMKC1Byb3BlckZhaXRoGFcgASgNEhQKDE92ZXJTdHJlbmd0",
            "aBhYIAEoDRIXCg9BdHRhY2tCYXNlUGFycnkYWSABKA0SGAoQRGVmZW5zZUJh",
            "c2VQYXJyeRhaIAEoDRIWCg5HdWFyZEJhc2VSZXBlbBhbIAEoDRIXCg9BdHRh",
            "Y2tCYXNlUmVwZWwYXCABKA0SGgoSR3VhcmRDdXRDYW5jZWxSYXRlGF0gASgN",
            "EhIKCkd1YXJkTGV2ZWwYXiABKA0SGQoRU2xhc2hHdWFyZEN1dFJhdGUYXyAB",
            "KA0SGAoQQmxvd0d1YXJkQ3V0UmF0ZRhgIAEoDRIaChJUaHJ1c3RHdWFyZEN1",
            "dFJhdGUYYSABKA0SGQoRUG9pc29uR3VhcmRSZXNpc3QYYiABKA0SGgoSRGlz",
            "ZWFzZUd1YXJkUmVzaXN0GGMgASgNEhgKEEJsb29kR3VhcmRSZXNpc3QYZCAB",
            "KA0SGAoQQ3Vyc2VHdWFyZFJlc2lzdBhlIAEoDRIeChZJc0R1cmFiaWxpdHlE",
            "aXZlcmdlbmNlGGYgASgNEhoKElJpZ2h0SGFuZEVxdWlwYWJsZRhnIAEoCBIZ",
            "ChFMZWZ0SGFuZEVxdWlwYWJsZRhoIAEoCBINCgVCdWZmcxhpIAEoDRIVCg1N",
            "YWdpY1N0YXRGdW5jGGogASgNEhQKDEZpcmVTdGF0RnVuYxhrIAEoDRIXCg9U",
            "aHVuZGVyU3RhdEZ1bmMYbCABKA0SFgoOQXR0YWNrQmFzZURhcmsYbSABKBES",
            "FAoMRGFya1N0YXRGdW5jGG4gASgNEhYKDlBvaXNvblN0YXRGdW5jGG8gASgN",
            "EhUKDUJsZWVkU3RhdEZ1bmMYcCABKA0SEgoKUHJvcGVyTHVjaxhxIAEoDRIR",
            "CglXZWFwb25BcnQYciABKA0SEwoLQ29ycmVjdEx1Y2sYcyABKAISEwoLV2Vh",
            "cG9uQ2xhc3MYdCABKBESDgoGQWVjcElkGHUgASgRIrUDChNFcXVpcFBhcmFt",
            "QWNjZXNzb3J5EgoKAklkGAIgASgNEg0KBUluZGV4GAMgASgREg4KBk9mZnNl",
            "dBgEIAEoERINCgVSZWZJZBgFIAEoERIWCg5TZnhWYXJpYXRpb25JZBgGIAEo",
            "ERIOCgZXZWlnaHQYByABKAISEgoKQmVoYXZpb3JJZBgIIAEoERISCgpCYXNp",
            "Y1ByaWNlGAkgASgREhEKCVNlbGxWYWx1ZRgKIAEoERIOCgZTb3J0SWQYCyAB",
            "KBESDQoFUXdjSWQYDCABKBESFAoMRXF1aXBNb2RlbElkGA0gASgREg4KBklj",
            "b25JZBgOIAEoERIOCgZTaG9wTHYYDyABKBESFgoOVHJvcGh5U0dyYWRlSWQY",
            "ECABKBESFAoMVGhyb3BoeVNlcUlkGBEgASgREhoKEkVxdWlwTW9kZWxDYXRl",
            "Z29yeRgSIAEoDRIYChBFcXVpcE1vZGVsR2VuZGVyGBMgASgNEhkKEUFjY2Vz",
            "c29yeUNhdGVnb3J5GBQgASgNEhMKC1JlZkNhdGVnb3J5GBUgASgNEhgKEFNw",
            "RWZmZWN0Q2F0ZWdvcnkYFiABKA0iwAYKE0VxdWlwUGFyYW1Qcm90ZWN0b3IS",
            "CgoCSWQYAiABKA0SDQoFSW5kZXgYAyABKBESDgoGT2Zmc2V0GAQgASgREg4K",
            "BlNvcnRJZBgFIAEoERIYChBXYW5kZXJpbmdFcXVpcElkGAYgASgREhgKEFZh",
            "Z3JhbnRJdGVtTG90SWQYByABKBESJAocVmFncmFudEJvbnVzRW5lRHJvcEl0",
            "ZW1Mb3RJZBgIIAEoERIjChtWYWdyYW50SXRlbUVuZURyb3BJdGVtTG90SWQY",
            "CSABKBESEAoIRml4UHJpY2UYCiABKBESEgoKQmFzaWNQcmljZRgLIAEoERIR",
            "CglTZWxsVmFsdWUYDCABKBESDgoGV2VpZ2h0GA0gASgCEhsKE1Jlc2lkZW50",
            "U3BFZmZlY3RJZDEYDiABKBESGwoTUmVzaWRlbnRTcEVmZmVjdElkMhgPIAEo",
            "ERIbChNSZXNpZGVudFNwRWZmZWN0SWQzGBAgASgREhUKDU1hdGVyaWFsU2V0",
            "SWQYESABKBESFwoPUGFydHNEYW1hZ2VSYXRlGBIgASgCEhQKDFJlc2lzdFBv",
            "aXNvbhgTIAEoERITCgtSZXNpc3RUb3hpYxgUIAEoERITCgtSZXNpc3RCbG9v",
            "ZBgVIAEoERITCgtSZXNpc3RDdXJzZRgWIAEoDRIWCg5EZWZlbnNlUGh5c2lj",
            "cxgXIAEoAhIUCgxEZWZlbnNlU2xhc2gYGCABKAISFQoNRGVmZW5zZVN0cmlr",
            "ZRgZIAEoAhIVCg1EZWZlbnNlVGhydXN0GBogASgCEhQKDERlZmVuc2VNYWdp",
            "YxgbIAEoAhITCgtEZWZlbnNlRmlyZRgcIAEoAhIWCg5EZWZlbnNlVGh1bmRl",
            "chgdIAEoAhIUCgxFcXVpcE1vZGVsSWQYHiABKBESGwoTS25vY2tiYWNrQm91",
            "bmNlUmF0ZRgfIAEoERISCgpEdXJhYmlsaXR5GCAgASgREhUKDUR1cmFiaWxp",
            "dHlNYXgYISABKBESFAoMU2FEdXJhYmlsaXR5GCIgASgNEg0KBVBvaXNlGCMg",
            "ASgCEhMKC0RlZmVuc2VEYXJrGCQgASgCEhMKC1Jlc2lzdEZyb3N0GCUgASgR",
            "IsYIChRSZWluZm9yY2VQYXJhbVdlYXBvbhIKCgJJZBgCIAEoDRINCgVJbmRl",
            "eBgDIAEoERIOCgZPZmZzZXQYBCABKBESFgoOUGh5c2ljc0F0a1JhdGUYBSAB",
            "KAISFAoMTWFnaWNBdGtSYXRlGAYgASgCEhMKC0ZpcmVBdGtSYXRlGAcgASgC",
            "EhYKDlRodW5kZXJBdGtSYXRlGAggASgCEhYKDlN0YW1pbmFBdGtSYXRlGAkg",
            "ASgCEhcKD1NhV2VhcG9uQXRrUmF0ZRgKIAEoAhIYChBTYUR1cmFiaWxpdHlS",
            "YXRlGAsgASgCEhsKE0NvcnJlY3RTdHJlbmd0aFJhdGUYDCABKAISGgoSQ29y",
            "cmVjdEFnaWxpdHlSYXRlGA0gASgCEhgKEENvcnJlY3RNYWdpY1JhdGUYDiAB",
            "KAISGAoQQ29ycmVjdEZhaXRoUmF0ZRgPIAEoAhIbChNQaHlzaWNzR3VhcmRD",
            "dXRSYXRlGBAgASgCEhkKEU1hZ2ljR3VhcmRDdXRSYXRlGBEgASgCEhgKEEZp",
            "cmVHdWFyZEN1dFJhdGUYEiABKAISGwoTVGh1bmRlckd1YXJkQ3V0UmF0ZRgT",
            "IAEoAhIdChVQb2lzb25HdWFyZFJlc2lzdFJhdGUYFCABKAISHgoWRGlzZWFz",
            "ZUd1YXJkUmVzaXN0UmF0ZRgVIAEoAhIcChRCbG9vZEd1YXJkUmVzaXN0UmF0",
            "ZRgWIAEoAhIcChRDdXJzZUd1YXJkUmVzaXN0UmF0ZRgXIAEoAhIbChNTdGFt",
            "aW5hR3VhcmREZWZSYXRlGBggASgCEhMKC1NwRWZmZWN0SWQxGBkgASgNEhMK",
            "C1NwRWZmZWN0SWQyGBogASgNEhMKC1NwRWZmZWN0SWQzGBsgASgNEhsKE1Jl",
            "c2lkZW50U3BFZmZlY3RJZDEYHCABKA0SGwoTUmVzaWRlbnRTcEVmZmVjdElk",
            "MhgdIAEoDRIbChNSZXNpZGVudFNwRWZmZWN0SWQzGB4gASgNEhYKDk1hdGVy",
            "aWFsU2V0SWQxGB8gASgNEhYKDk1hdGVyaWFsU2V0SWQyGCAgASgNEhMKC0Rh",
            "cmtBdGtSYXRlGCEgASgCEhsKE0RhcmtHdWFyZFJlc2lzdFJhdGUYIiABKAIS",
            "FwoPQ29ycmVjdEx1Y2tSYXRlGCMgASgCEhAKCFVua25vd24wGCQgASgNEhAK",
            "CFVua25vd24xGCUgASgNEhAKCFVua25vd24yGCYgASgNEhAKCFVua25vd24z",
            "GCcgASgNEhAKCFVua25vd240GCggASgNEhAKCFVua25vd241GCkgASgNEhAK",
            "CFVua25vd242GCogASgNEhAKCFVua25vd243GCsgASgNEhAKCFVua25vd244",
            "GCwgASgNEhAKCFVua25vd245GC0gASgNEhEKCVVua25vd24xMBguIAEoDRIR",
            "CglVbmtub3duMTEYLyABKA0i1wUKGUF0dGFja0VsZW1lbnRDb3JyZWN0UGFy",
            "YW0SCgoCSWQYAiABKA0SDQoFSW5kZXgYAyABKBESDgoGT2Zmc2V0GAQgASgR",
            "Eg8KB0JpdG1hc2sYBSABKBESCgoCdjAYBiABKBESCgoCdjEYByABKBESCgoC",
            "djIYCCABKBESCgoCdjMYCSABKBESCgoCdjQYCiABKBESCgoCdjUYCyABKBES",
            "CgoCdjYYDCABKBESCgoCdjcYDSABKBESCgoCdjgYDiABKBESCgoCdjkYDyAB",
            "KBESCwoDdjEwGBAgASgREgsKA3YxMRgRIAEoERILCgN2MTIYEiABKBESCwoD",
            "djEzGBMgASgREgsKA3YxNBgUIAEoERILCgN2MTUYFSABKBESCwoDdjE2GBYg",
            "ASgREgsKA3YxNxgXIAEoERILCgN2MTgYGCABKBESCwoDdjE5GBkgASgREgsK",
            "A3YyMBgaIAEoERILCgN2MjEYGyABKBESCwoDdjIyGBwgASgREgsKA3YyMxgd",
            "IAEoERILCgN2MjQYHiABKBESCwoDdjI1GB8gASgREgsKA3YyNhggIAEoERIL",
            "CgN2MjcYISABKBESCwoDdjI4GCIgASgREgsKA3YyORgjIAEoERILCgN2MzAY",
            "JCABKBESCwoDdjMxGCUgASgREgsKA3YzMhgmIAEoERILCgN2MzMYJyABKBES",
            "CwoDdjM0GCggASgREgsKA3YzNRgpIAEoERILCgN2MzYYKiABKBESCwoDdjM3",
            "GCsgASgREgsKA3YzOBgsIAEoERILCgN2MzkYLSABKBESCwoDdjQwGC4gASgR",
            "EgsKA3Y0MRgvIAEoERILCgN2NDIYMCABKBESCwoDdjQzGDEgASgREgsKA3Y0",
            "NBgyIAEoERILCgN2NDUYMyABKBESCwoDdjQ2GDQgASgREgsKA3Y0Nxg1IAEo",
            "ERILCgN2NDgYNiABKBESCwoDdjQ5GDcgASgRIqYEChBDYWxjQ29ycmVjdEdy",
            "YXBoEgoKAklkGAIgASgNEg0KBUluZGV4GAMgASgREg4KBk9mZnNldBgEIAEo",
            "ERIUCgxTdGFnZU1heFZhbDAYBSABKAISFAoMU3RhZ2VNYXhWYWwxGAYgASgC",
            "EhQKDFN0YWdlTWF4VmFsMhgHIAEoAhIUCgxTdGFnZU1heFZhbDMYCCABKAIS",
            "FAoMU3RhZ2VNYXhWYWw0GAkgASgCEhgKEFN0YWdlTWF4R3Jvd1ZhbDAYCiAB",
            "KAISGAoQU3RhZ2VNYXhHcm93VmFsMRgLIAEoAhIYChBTdGFnZU1heEdyb3dW",
            "YWwyGAwgASgCEhgKEFN0YWdlTWF4R3Jvd1ZhbDMYDSABKAISGAoQU3RhZ2VN",
            "YXhHcm93VmFsNBgOIAEoAhIZChFBZGpQdF9tYXhHcm93VmFsMBgPIAEoAhIZ",
            "ChFBZGpQdF9tYXhHcm93VmFsMRgQIAEoAhIZChFBZGpQdF9tYXhHcm93VmFs",
            "MhgRIAEoAhIZChFBZGpQdF9tYXhHcm93VmFsMxgSIAEoAhIZChFBZGpQdF9t",
            "YXhHcm93VmFsNBgTIAEoAhIdChVJbml0X2luY2xpbmF0aW9uX3NvdWwYFCAB",
            "KAISGAoQQWRqdXN0bWVudF92YWx1ZRgVIAEoAhIgChhCb3VuZHJ5X2luY2xp",
            "bmF0aW9uX3NvdWwYFiABKAISFQoNQm91bmRyeV92YWx1ZRgXIAEoAiKSBQoF",
            "TWFnaWMSCgoCSWQYAiABKA0SDQoFSW5kZXgYAyABKBESDgoGT2Zmc2V0GAQg",
            "ASgREhwKFFllc05vRGlhbG9nTWVzc2FnZUlkGAUgASgREh0KFUxpbWl0Q2Fu",
            "Y2VsU3BFZmZlY3RJZBgGIAEoERIOCgZTb3J0SWQYByABKBESDQoFUmVmSWQY",
            "CCABKBESCgoCTXAYCSABKBESDwoHU3RhbWluYRgKIAEoERIMCgRJY29uGAsg",
            "ASgREhIKCkJlaGF2aW9ySWQYDCABKBESEgoKTXRybEl0ZW1JZBgNIAEoERIW",
            "Cg5SZXBsYWNlTWFnaWNJZBgOIAEoERITCgtNYXhRdWFudGl0eRgPIAEoERIQ",
            "CghIdW1hbml0eRgQIAEoDRIVCg1PdmVyRGV4dGVyaXR5GBEgASgNEhYKDlNm",
            "eFZhcmlhdGlvbmlkGBIgASgNEhIKClNsb3RMZW5ndGgYEyABKA0SHAoUUmVx",
            "dWlyZW1lbnRJbnRlbGxlY3QYFCABKA0SGAoQUmVxdWlyZW1lbnRGYWl0aBgV",
            "IAEoDRIaChJBbmFsb2dEZXh0ZXJpdHlNaW4YFiABKA0SGgoSQW5hbG9nRGV4",
            "dGVyaXR5TWF4GBcgASgNEhsKE0V6U3RhdGVCZWhhdmlvclR5cGUYGCABKA0S",
            "EwoLUmVmQ2F0ZWdvcnkYGSABKA0SGAoQU3BFZmZlY3RDYXRlZ29yeRgaIAEo",
            "DRIPCgdSZWZUeXBlGBsgASgNEhQKDE9wbWVNZW51VHlwZRgcIAEoDRIXCg9I",
            "YXNTcEVmZmVjdFR5cGUYHSABKA0SFwoPUmVwbGFjZUNhdGVnb3J5GB4gASgN",
            "EhgKEFVzZUxpbWl0Q2F0ZWdvcnkYHyABKA0i2RgKDVNwRWZmZWN0UGFyYW0S",
            "CgoCSWQYAiABKA0SDQoFSW5kZXgYAyABKBESDgoGT2Zmc2V0GAQgASgREg4K",
            "Bkljb25JZBgFIAEoERITCgtDb25kaXRpb25IcBgGIAEoAhIXCg9FZmZlY3RF",
            "bmR1cmFuY2UYByABKAISFgoOTW90aW9uSW50ZXJ2YWwYCCABKBESEQoJTWF4",
            "SHBSYXRlGAkgASgCEhEKCU1heE1wUmF0ZRgKIAEoAhIWCg5NYXhTdGFtaW5h",
            "UmF0ZRgLIAEoAhIaChJTbGFzaERhbWFnZUN1dFJhdGUYDCABKAISGQoRQmxv",
            "d0RhbWFnZUN1dFJhdGUYDSABKAISGwoTVGhydXN0RGFtYWdlQ3V0UmF0ZRgO",
            "IAEoAhIcChROZXV0cmFsRGFtYWdlQ3V0UmF0ZRgPIAEoAhIaChJNYWdpY0Rh",
            "bWFnZUN1dFJhdGUYECABKAISGQoRRmlyZURhbWFnZUN1dFJhdGUYESABKAIS",
            "HAoUVGh1bmRlckRhbWFnZUN1dFJhdGUYEiABKAISGQoRUGh5c2ljc0F0dGFj",
            "a1JhdGUYEyABKAISFwoPTWFnaWNBdHRhY2tSYXRlGBQgASgCEhYKDkZpcmVB",
            "dHRhY2tSYXRlGBUgASgCEhkKEVRodW5kZXJBdHRhY2tSYXRlGBYgASgCEh4K",
            "FlBoeXNpY3NBdHRhY2tQb3dlclJhdGUYFyABKAISHAoUTWFnaWNBdHRhY2tQ",
            "b3dlclJhdGUYGCABKAISGwoTRmlyZUF0dGFja1Bvd2VyUmF0ZRgZIAEoAhIe",
            "ChZUaHVuZGVyQXR0YWNrUG93ZXJSYXRlGBogASgCEhoKElBoeXNpY3NBdHRh",
            "Y2tQb3dlchgbIAEoERIYChBNYWdpY0F0dGFja1Bvd2VyGBwgASgREhcKD0Zp",
            "cmVBdHRhY2tQb3dlchgdIAEoERIaChJUaHVuZGVyQXR0YWNrUG93ZXIYHiAB",
            "KBESHQoVUGh5c2ljc0RpZmZlcmVuY2VSYXRlGB8gASgCEhsKE01hZ2ljRGlm",
            "ZmVyZW5jZVJhdGUYICABKAISGgoSRmlyZURpZmZlcmVuY2VSYXRlGCEgASgC",
            "Eh0KFVRodW5kZXJEaWZmZXJlbmNlUmF0ZRgiIAEoAhIZChFQaHlzaWNzRGlm",
            "ZmVyZW5jZRgjIAEoERIXCg9NYWdpY0RpZmZlcmVuY2UYJCABKBESFgoORmly",
            "ZURpZmZlcmVuY2UYJSABKBESGQoRVGh1bmRlckRpZmZlcmVuY2UYJiABKBES",
            "GQoRTm9HdWFyZERhbWFnZVJhdGUYJyABKAISGwoTVml0YWxTcG90Q2hhbmdl",
            "UmF0ZRgoIAEoAhIcChROb3JtYWxTcG90Q2hhbmdlUmF0ZRgpIAEoAhIXCg9N",
            "YXhIcENoYW5nZVJhdGUYKiABKAISEgoKQmVoYXZpb3JJZBgrIAEoERIUCgxD",
            "aGFuZ2VIcFJhdGUYLCABKAISFQoNQ2hhbmdlSHBQb2ludBgtIAEoERIUCgxD",
            "aGFuZ2VNcFJhdGUYLiABKAISFQoNQ2hhbmdlTXBQb2ludBgvIAEoERIcChRN",
            "cFJlY292ZXJDaGFuZ2VTcGVlZBgwIAEoERIZChFDaGFuZ2VTdGFtaW5hUmF0",
            "ZRgxIAEoAhIaChJDaGFuZ2VTdGFtaW5hUG9pbnQYMiABKBESIQoZU3RhbWlu",
            "YVJlY292ZXJDaGFuZ2VTcGVlZBgzIAEoERIdChVNYWdpY0VmZmVjdFRpbWVD",
            "aGFuZ2UYNCABKAISGAoQSW5zaWRlRHVyYWJpbGl0eRg1IAEoERIVCg1NYXhE",
            "dXJhYmlsaXR5GDYgASgREhkKEVBvaXNvbkF0dGFja1Bvd2VyGDcgASgREhUK",
            "DVJlZ2lzdElsbG5lc3MYOCABKBESGAoQQmxvb2RBdHRhY2tQb3dlchg5IAEo",
            "ERITCgtSZWdpc3RDdXJzZRg6IAEoERIWCg5GYWxsRGFtYWdlUmF0ZRg7IAEo",
            "AhIQCghTb3VsUmF0ZRg8IAEoAhIdChVFcXVpcFdlaWdodENoYW5nZVJhdGUY",
            "PSABKAISHwoXQWxsSXRlbVdlaWdodENoYW5nZVJhdGUYPiABKAISDAoEU291",
            "bBg/IAEoERIUCgxBbmltaWRPZmZzZXQYQCABKBESFAoMSGF2ZVNvdWxSYXRl",
            "GEEgASgCEhYKDlRhcmdldFByaW9yaXR5GEIgASgCEhsKE1NpZ2h0U2VhcmNo",
            "RW5lbXlDdXQYQyABKBESHQoVSGVhcmluZ1NlYXJjaEVuZW15Q3V0GEQgASgC",
            "EhMKC0dyYWJpdHlSYXRlGEUgASgCEh4KFlJlZ2lzdFBvaXNvbkNoYW5nZVJh",
            "dGUYRiABKAISHQoVUmVnaXN0VG94aWNDaGFuZ2VSYXRlGEcgASgCEh0KFVJl",
            "Z2lzdEJsb29kQ2hhbmdlUmF0ZRhIIAEoAhIdChVSZWdpc3RDdXJzZUNoYW5n",
            "ZVJhdGUYSSABKAISFQoNU291bFN0ZWFsUmF0ZRhKIAEoAhIZChFMaWZlUmVk",
            "dWN0aW9uUmF0ZRhLIAEoAhIVCg1IcFJlY292ZXJSYXRlGEwgASgCEhkKEVJl",
            "cGxhY2VTcEVmZmVjdElkGE0gASgREiEKGUN5Y2xlT2NjdXJyZW5jZVNwRWZm",
            "ZWN0SWQYTiABKBESHwoXQXRrT2NjdXJyZW5jZVNwRWZmZWN0SWQYTyABKBES",
            "HgoWR3VhcmREZWZGbGlja1Bvd2VyUmF0ZRhQIAEoAhIbChNHdWFyZFN0YW1p",
            "bmFDdXRSYXRlGFEgASgCEhkKEVJheUNhc3RQYXNzZWRUaW1lGFIgASgREh0K",
            "FUNoYW5nZVN1cGVyQXJtb3JQb2ludBhTIAEoERITCgtCb3dEaXN0UmF0ZRhU",
            "IAEoERISCgpTcENhdGVnb3J5GFUgASgNEhgKEENhdGVnb3J5UHJpb3JpdHkY",
            "ViABKA0SFAoMU2F2ZUNhdGVnb3J5GFcgASgREhcKD0NoYW5nZU1hZ2ljU2xv",
            "dBhYIAEoDRIZChFDaGFuZ2VNaXJhY2xlU2xvdBhZIAEoDRIXCg9IZXJvUG9p",
            "bnREYW1hZ2UYWiABKBESFQoNRGVmRmxpY2tQb3dlchhbIAEoDRIaChJGbGlj",
            "a0RhbWFnZUN1dFJhdGUYXCABKA0SFwoPQmxvb2REYW1hZ2VSYXRlGF0gASgN",
            "EhIKCkRtZ0x2X05vbmUYXiABKBESDwoHRG1nTHZfUxhfIAEoERIPCgdEbWdM",
            "dl9NGGAgASgREg8KB0RtZ0x2X0wYYSABKBESEwoLRG1nTHZfQmxvd00YYiAB",
            "KBESEgoKRG1nTHZfUHVzaBhjIAEoERIUCgxEbWdMdl9TdHJpa2UYZCABKBES",
            "EwoLRG1nTHZfQmxvd1MYZSABKBESEQoJRG1nTHZfTWluGGYgASgREhYKDkRt",
            "Z0x2X1VwcGVyY3V0GGcgASgREhQKDERtZ0x2X0Jsb3dMTBhoIAEoERIUCgxE",
            "bWdMdl9CcmVhdGgYaSABKBESFAoMQXRrQXR0cmlidXRlGGogASgNEhMKC1Nw",
            "QXR0cmlidXRlGGsgASgNEhEKCVN0YXRlSW5mbxhsIAEoDRIWCg5XZXBQYXJh",
            "bUNoYW5nZRhtIAEoDRIQCghNb3ZlVHlwZRhuIAEoDRIZChFMaWZlUmVkdWN0",
            "aW9uVHlwZRhvIAEoDRIWCg5UaHJvd0NvbmRpdGlvbhhwIAEoDRIkChxBZGRC",
            "ZWhhdmlvckp1ZGdlSWRfY29uZGl0aW9uGHEgASgREh4KFkFkZEJlaGF2aW9y",
            "SnVkZ2VJZF9hZGQYciABKA0SGAoQRWZmZWN0VGFyZ2V0U2VsZhhzIAEoCBIa",
            "ChJFZmZlY3RUYXJnZXRGcmllbmQYdCABKAgSGQoRRWZmZWN0VGFyZ2V0RW5l",
            "bXkYdSABKAgSGgoSRWZmZWN0VGFyZ2V0UGxheWVyGHYgASgIEhYKDkVmZmVj",
            "dFRhcmdldEFJGHcgASgIEhgKEEVmZmVjdFRhcmdldExpdmUYeCABKAgSGQoR",
            "RWZmZWN0VGFyZ2V0R2hvc3QYeSABKAgSHgoWRWZmZWN0VGFyZ2V0V2hpdGVH",
            "aG9zdBh6IAEoCBITCgtTdHJhbmdlRW51bRh7IAEoCBIYChBGcm9zdEF0dGFj",
            "a1Bvd2VyGHwgASgREhoKEkRhcmtEaWZmZXJlbmNlUmF0ZRh9IAEoAiL+JAoI",
            "TnBjUGFyYW0SCgoCSWQYAiABKA0SDQoFSW5kZXgYAyABKBESDgoGT2Zmc2V0",
            "GAQgASgREhsKE0JlaGF2aW9yVmFyaWF0aW9uSWQYBSABKBESEQoJQWlUaGlu",
            "a0lkGAYgASgREg4KBk5hbWVJZBgHIAEoERIUCgxUdXJuVmVsb2NpdHkYCCAB",
            "KAISEQoJSGl0SGVpZ2h0GAkgASgCEhEKCUhpdFJhZGl1cxgKIAEoAhIOCgZX",
            "ZWlnaHQYCyABKA0SEgoKSGl0WU9mZnNldBgMIAEoAhIKCgJIcBgNIAEoDRIK",
            "CgJNcBgOIAEoDRIPCgdHZXRTb3VsGA8gASgNEhMKC0l0ZW1Mb3RJZF8xGBAg",
            "ASgREhMKC0l0ZW1Mb3RJZF8yGBEgASgREhMKC0l0ZW1Mb3RJZF8zGBIgASgR",
            "EhMKC0l0ZW1Mb3RJZF80GBMgASgREhMKC0l0ZW1Mb3RJZF81GBQgASgREhMK",
            "C0l0ZW1Mb3RJZF82GBUgASgREhUKDUh1bWFuaXR5TG90SWQYFiABKBESEwoL",
            "U3BFZmZlY3RJRDAYFyABKBESEwoLU3BFZmZlY3RJRDEYGCABKBESEwoLU3BF",
            "ZmZlY3RJRDIYGSABKBESEwoLU3BFZmZlY3RJRDMYGiABKBESEwoLU3BFZmZl",
            "Y3RJRDQYGyABKBESEwoLU3BFZmZlY3RJRDUYHCABKBESEwoLU3BFZmZlY3RJ",
            "RDYYHSABKBESEwoLU3BFZmZlY3RJRDcYHiABKBESGwoTR2FtZUNsZWFyU3BF",
            "ZmZlY3RJRBgfIAEoERIYChBQaHlzR3VhcmRDdXRSYXRlGCAgASgCEhcKD01h",
            "Z0d1YXJkQ3V0UmF0ZRghIAEoAhIYChBGaXJlR3VhcmRDdXRSYXRlGCIgASgC",
            "EhgKEFRodW5HdWFyZEN1dFJhdGUYIyABKAISFAoMQW5pbUlkT2Zmc2V0GCQg",
            "ASgREhIKCk1vdmVBbmltSWQYJSABKBESFQoNU3BNb3ZlQW5pbUlkMRgmIAEo",
            "ERIVCg1TcE1vdmVBbmltSWQyGCcgASgREhcKD05ldHdvcmtXYXJwRGlzdBgo",
            "IAEoAhIVCg1EYmdCZWhhdmlvclIxGCkgASgREhUKDURiZ0JlaGF2aW9yTDEY",
            "KiABKBESFQoNRGJnQmVoYXZpb3JSMhgrIAEoERIVCg1EYmdCZWhhdmlvckwy",
            "GCwgASgREhUKDURiZ0JlaGF2aW9yUkwYLSABKBESFQoNRGJnQmVoYXZpb3JS",
            "UhguIAEoERIVCg1EYmdCZWhhdmlvclJEGC8gASgREhUKDURiZ0JlaGF2aW9y",
            "UlUYMCABKBESFQoNRGJnQmVoYXZpb3JMTBgxIAEoERIVCg1EYmdCZWhhdmlv",
            "ckxSGDIgASgREhUKDURiZ0JlaGF2aW9yTEQYMyABKBESFQoNRGJnQmVoYXZp",
            "b3JMVRg0IAEoERIVCg1BbmltSWRPZmZzZXQyGDUgASgREhgKEFBhcnRzRGFt",
            "YWdlUmF0ZTEYNiABKAISGAoQUGFydHNEYW1hZ2VSYXRlMhg3IAEoAhIYChBQ",
            "YXJ0c0RhbWFnZVJhdGUzGDggASgCEhgKEFBhcnRzRGFtYWdlUmF0ZTQYOSAB",
            "KAISGAoQUGFydHNEYW1hZ2VSYXRlNRg6IAEoAhIYChBQYXJ0c0RhbWFnZVJh",
            "dGU2GDsgASgCEhgKEFBhcnRzRGFtYWdlUmF0ZTcYPCABKAISGAoQUGFydHNE",
            "YW1hZ2VSYXRlOBg9IAEoAhIbChNXZWFrUGFydHNEYW1hZ2VSYXRlGD4gASgC",
            "EiMKG1N1cGVyQXJtb3JSZWNvdmVyQ29ycmVjdGlvbhg/IAEoAhIkChxTdXBl",
            "ckFybW9yQnJha2VLbm9ja2JhY2tEaXN0GEAgASgCEg8KB1N0YW1pbmEYQSAB",
            "KA0SHQoVU3RhbWluYVJlY292ZXJCYXNlVmVsGEIgASgNEhAKCERlZl9waHlz",
            "GEMgASgREhEKCURlZl9zbGFzaBhEIAEoERIQCghEZWZfYmxvdxhFIAEoERIS",
            "CgpEZWZfdGhydXN0GEYgASgREg8KB0RlZl9tYWcYRyABKBESEAoIRGVmX2Zp",
            "cmUYSCABKBESEAoIRGVmX3RodW4YSSABKBESFQoNRGVmRmxpY2tQb3dlchhK",
            "IAEoDRIUCgxSZXNpc3RQb2lzb24YSyABKA0SFQoNUmVzaXN0RGlzZWFzZRhM",
            "IAEoDRITCgtSZXNpc3RCbGVlZBhNIAEoDRITCgtSZXNpc3RDdXJzZRhOIAEo",
            "DRIUCgxHaG9zdE1vZGVsSWQYTyABKBESHgoWTm9ybWFsQ2hhbmdlUmVzb3Vy",
            "Y2VJZBhQIAEoERISCgpHdWFyZEFuZ2xlGFEgASgREhkKEVNsYXNoR3VhcmRD",
            "dXRSYXRlGFIgASgREhgKEEJsb3dHdWFyZEN1dFJhdGUYUyABKBESGgoSVGhy",
            "dXN0R3VhcmRDdXRSYXRlGFQgASgREhwKFFN1cGVyQXJtb3JEdXJhYmlsaXR5",
            "GFUgASgREhwKFE5vcm1hbENoYW5nZVRleENocklkGFYgASgREhAKCERyb3BU",
            "eXBlGFcgASgNEhUKDUtub2NrYmFja1JhdGUYWCABKA0SGAoQS25vY2tiYWNr",
            "UGFyYW1JZBhZIAEoDRIWCg5GYWxsRGFtYWdlRHVtcBhaIAEoDRIXCg9TdGFt",
            "aW5hR3VhcmREZWYYWyABKA0SDwoHUGNBdHRyQhhcIAEoDRIPCgdQY0F0dHJX",
            "GF0gASgNEg8KB1BjQXR0ckwYXiABKA0SDwoHUGNBdHRyUhhfIAEoDRIRCglB",
            "cmVhQXR0ckIYYCABKA0SEQoJQXJlYUF0dHJXGGEgASgNEhEKCUFyZWFBdHRy",
            "TBhiIAEoDRIRCglBcmVhQXR0clIYYyABKA0SGAoQTXBSZWNvdmVyQmFzZVZl",
            "bBhkIAEoDRIaChJGbGlja0RhbWFnZUN1dFJhdGUYZSABKA0SGQoRRGVmYXVs",
            "dExvZFBhcmFtSWQYZiABKBESEAoIRHJhd1R5cGUYZyABKA0SDwoHTnBjVHlw",
            "ZRhoIAEoDRIQCghUZWFtVHlwZRhpIAEoDRIQCghNb3ZlVHlwZRhqIAEoDRIQ",
            "CghMb2NrRGlzdBhrIAEoDRIQCghNYXRlcmlhbBhsIAEoDRITCgtNYXRlcmlh",
            "bFNmeBhtIAEoDRIVCg1NYXRlcmlhbF93ZWFrGG4gASgNEhgKEE1hdGVyaWFs",
            "U2Z4X3dlYWsYbyABKA0SFwoPUGFydHNEYW1hZ2VUeXBlGHAgASgNEhgKEE1h",
            "eFVuZHVyYXRpb25BbmcYcSABKA0SEgoKR3VhcmRMZXZlbBhyIAEoERITCgtC",
            "dXJuU2Z4VHlwZRhzIAEoDRIZChFQb2lzb25HdWFyZFJlc2lzdBh0IAEoERIa",
            "ChJEaXNlYXNlR3VhcmRSZXNpc3QYdSABKBESGAoQQmxvb2RHdWFyZFJlc2lz",
            "dBh2IAEoERIYChBDdXJzZUd1YXJkUmVzaXN0GHcgASgREhMKC1BhcnJ5QXR0",
            "YWNrGHggASgNEhQKDFBhcnJ5RGVmZW5zZRh5IAEoDRIPCgdTZnhTaXplGHog",
            "ASgNEh4KFlB1c2hPdXRDYW1SZWdpb25SYWRpdXMYeyABKA0SEwoLSGl0U3Rv",
            "cFR5cGUYfCABKA0SHQoVTGFkZGVyRW5kQ2hrT2Zmc2V0VG9wGH0gASgNEh0K",
            "FUxhZGRlckVuZENoa09mZnNldExvdxh+IAEoDRISCgpCaXRGaWVsZHMwGH8g",
            "ASgNEhMKCkJpdEZpZWxkczEYgAEgASgNEhMKCkJpdEZpZWxkczIYgQEgASgN",
            "EhMKCkJpdEZpZWxkczMYggEgASgNEhMKCkJpdEZpZWxkczQYgwEgASgNEhIK",
            "CVVua25vd24xMBiEASABKA0SEgoJVW5rbm93bjExGIUBIAEoDRISCglVbmtu",
            "b3duMTIYhgEgASgNEhIKCVVua25vd24xMxiHASABKA0SEgoJVW5rbm93bjE0",
            "GIgBIAEoDRISCglVbmtub3duMTUYiQEgASgNEhIKCVVua25vd24xNhiKASAB",
            "KA0SEgoJVW5rbm93bjE3GIsBIAEoDRISCglVbmtub3duMTgYjAEgASgNEhIK",
            "CVVua25vd24xORiNASABKA0SEwoKVW5rbm93bjExMBiOASABKA0SEwoKVW5r",
            "bm93bjExMRiPASABKA0SEwoKVW5rbm93bjExMhiQASABKA0SEwoKVW5rbm93",
            "bjExMxiRASABKA0SEwoKVW5rbm93bjExNBiSASABKA0SEwoKVW5rbm93bjEx",
            "NRiTASABKA0SEQoIRGVmX2RhcmsYlAEgASgREhIKCVVua25vd24yMBiVASAB",
            "KA0SEgoJVW5rbm93bjIxGJYBIAEoDRISCglVbmtub3duMjIYlwEgASgNEhIK",
            "CVVua25vd24yMxiYASABKA0SEgoJVW5rbm93bjI0GJkBIAEoDRISCglVbmtu",
            "b3duMjUYmgEgASgNEhIKCVVua25vd24yNhibASABKA0SEgoJVW5rbm93bjI3",
            "GJwBIAEoDRISCglVbmtub3duMjgYnQEgASgNEhIKCVVua25vd24yORieASAB",
            "KA0SEwoKVW5rbm93bjIxMBifASABKA0SEwoKVW5rbm93bjIxMRigASABKA0S",
            "EwoKVW5rbm93bjIxMhihASABKA0SEwoKVW5rbm93bjIxMxiiASABKA0SEwoK",
            "VW5rbm93bjIxNBijASABKA0SEwoKVW5rbm93bjIxNRikASABKA0SEwoKVW5r",
            "bm93bjIxNhilASABKA0SEwoKVW5rbm93bjIxNximASABKA0SEwoKVW5rbm93",
            "bjIxOBinASABKA0SEwoKVW5rbm93bjIxORioASABKA0SEwoKVW5rbm93bjIy",
            "MBipASABKA0SEwoKVW5rbm93bjIyMRiqASABKA0SEwoKVW5rbm93bjIyMhir",
            "ASABKA0SEwoKVW5rbm93bjIyMxisASABKA0SEwoKVW5rbm93bjIyNBitASAB",
            "KA0SEwoKVW5rbm93bjIyNRiuASABKA0SEwoKVW5rbm93bjIyNhivASABKA0S",
            "EwoKVW5rbm93bjIyNxiwASABKA0SEwoKVW5rbm93bjIyOBixASABKA0SEwoK",
            "VW5rbm93bjIyORiyASABKA0SEwoKVW5rbm93bjIzMBizASABKA0SEwoKVW5r",
            "bm93bjIzMRi0ASABKA0SEwoKVW5rbm93bjIzMhi1ASABKA0SEwoKVW5rbm93",
            "bjIzMxi2ASABKA0SEwoKVW5rbm93bjIzNBi3ASABKA0SEwoKVW5rbm93bjIz",
            "NRi4ASABKA0SEwoKVW5rbm93bjIzNhi5ASABKA0SEwoKVW5rbm93bjIzNxi6",
            "ASABKA0SEwoKVW5rbm93bjIzOBi7ASABKA0SEwoKVW5rbm93bjIzORi8ASAB",
            "KA0SEwoKVW5rbm93bjI0MBi9ASABKA0SEwoKVW5rbm93bjI0MRi+ASABKA0S",
            "EwoKVW5rbm93bjI0Mhi/ASABKA0SEwoKVW5rbm93bjI0MxjAASABKA0SEwoK",
            "VW5rbm93bjI0NBjBASABKA0SEwoKVW5rbm93bjI0NRjCASABKA0SEwoKVW5r",
            "bm93bjI0NhjDASABKA0SEwoKVW5rbm93bjI0NxjEASABKA0SEwoKVW5rbm93",
            "bjI0OBjFASABKA0SEwoKVW5rbm93bjI0ORjGASABKA0SEwoKVW5rbm93bjI1",
            "MBjHASABKA0SEwoKVW5rbm93bjI1MRjIASABKA0SEwoKVW5rbm93bjI1MhjJ",
            "ASABKA0SEwoKVW5rbm93bjI1MxjKASABKA0SEwoKVW5rbm93bjI1NBjLASAB",
            "KA0SEwoKVW5rbm93bjI1NRjMASABKA0SEwoKVW5rbm93bjI1NhjNASABKA0S",
            "EwoKVW5rbm93bjI1NxjOASABKA0SEwoKVW5rbm93bjI1OBjPASABKA0SEwoK",
            "VW5rbm93bjI1ORjQASABKA0SEwoKVW5rbm93bjI2MBjRASABKA0SEwoKVW5r",
            "bm93bjI2MRjSASABKA0SEwoKVW5rbm93bjI2MhjTASABKA0SEwoKVW5rbm93",
            "bjI2MxjUASABKA0SDQoEUGh5cxjVASABKAISDwoGVGhydXN0GNYBIAEoAhIP",
            "CgZTdHJpa2UY1wEgASgCEg4KBVNsYXNoGNgBIAEoAhIOCgVNYWdpYxjZASAB",
            "KAISDQoERmlyZRjaASABKAISEgoJTGlnaHRuaW5nGNsBIAEoAhINCgREYXJr",
            "GNwBIAEoAiLVAgoNQmVoYXZpb3JQYXJhbRIKCgJJZBgCIAEoDRINCgVJbmRl",
            "eBgDIAEoERIOCgZPZmZzZXQYBCABKBESEwoLVmFyaWF0aW9uSWQYBSABKBES",
            "FwoPQmVoYXZpb3JKdWRnZUlkGAYgASgREh8KF0V6U3RhdGVCZWhhdmlvclR5",
            "cGVfb2xkGAcgASgNEg8KB1JlZlR5cGUYCCABKA0SEQoJUGFkZGluZzEwGAkg",
            "ASgNEhEKCVBhZGRpbmcxMRgKIAEoDRITCgtSZWZlcmVuY2VJZBgLIAEoERIW",
            "Cg5TZnhWYXJpYXRpb25JZBgMIAEoERIPCgdTdGFtaW5hGA0gASgREgoKAk1w",
            "GA4gASgREhAKCENhdGVnb3J5GA8gASgNEhEKCUhlcm9Qb2ludBgQIAEoDRIR",
            "CglQYWRkaW5nMjAYESABKA0SEQoJUGFkZGluZzIxGBIgASgNItg1CghBdGtQ",
            "YXJhbRIKCgJJZBgCIAEoDRINCgVJbmRleBgDIAEoERIOCgZPZmZzZXQYBCAB",
            "KBESEwoLSGl0MF9SYWRpdXMYBSABKAISEwoLSGl0MV9SYWRpdXMYBiABKAIS",
            "EwoLSGl0Ml9SYWRpdXMYByABKAISEwoLSGl0M19SYWRpdXMYCCABKAISFQoN",
            "S25vY2tiYWNrRGlzdBgJIAEoAhITCgtIaXRTdG9wVGltZRgKIAEoAhITCgtT",
            "cEVmZmVjdElkMBgLIAEoERITCgtTcEVmZmVjdElkMRgMIAEoERITCgtTcEVm",
            "ZmVjdElkMhgNIAEoERITCgtTcEVmZmVjdElkMxgOIAEoERITCgtTcEVmZmVj",
            "dElkNBgPIAEoERIVCg1IaXQwX0RteVBvbHkxGBAgASgREhUKDUhpdDFfRG15",
            "UG9seTEYESABKBESFQoNSGl0Ml9EbXlQb2x5MRgSIAEoERIVCg1IaXQzX0Rt",
            "eVBvbHkxGBMgASgREhUKDUhpdDBfRG15UG9seTIYFCABKBESFQoNSGl0MV9E",
            "bXlQb2x5MhgVIAEoERIVCg1IaXQyX0RteVBvbHkyGBYgASgREhUKDUhpdDNf",
            "RG15UG9seTIYFyABKBESGQoRQmxvd2luZ0NvcnJlY3Rpb24YGCABKA0SGQoR",
            "QXRrUGh5c0NvcnJlY3Rpb24YGSABKA0SGAoQQXRrTWFnQ29ycmVjdGlvbhga",
            "IAEoDRIZChFBdGtGaXJlQ29ycmVjdGlvbhgbIAEoDRIZChFBdGtUaHVuQ29y",
            "cmVjdGlvbhgcIAEoDRIZChFBdGtTdGFtQ29ycmVjdGlvbhgdIAEoDRIeChZH",
            "dWFyZEF0a1JhdGVDb3JyZWN0aW9uGB4gASgNEhwKFEd1YXJkQnJlYWtDb3Jy",
            "ZWN0aW9uGB8gASgNEiAKGEF0a1Rocm93RXNjYXBlQ29ycmVjdGlvbhggIAEo",
            "DRIPCgdBdGtQaHlzGCEgASgNEg4KBkF0a01hZxgiIAEoDRIPCgdBdGtGaXJl",
            "GCMgASgNEg8KB0F0a1RodW4YJCABKA0SDwoHQXRrU3RhbRglIAEoDRIUCgxH",
            "dWFyZEF0a1JhdGUYJiABKA0SFgoOR3VhcmRCcmVha1JhdGUYJyABKA0SFQoN",
            "QXRrU3VwZXJBcm1vchgoIAEoDRIWCg5BdGtUaHJvd0VzY2FwZRgpIAEoDRIO",
            "CgZBdGtPYmoYKiABKA0SGwoTR3VhcmRTdGFtaW5hQ3V0UmF0ZRgrIAEoERIR",
            "CglHdWFyZFJhdGUYLCABKBESEwoLVGhyb3dUeXBlSWQYLSABKBESFAoMSGl0",
            "MF9oaXRUeXBlGC4gASgNEhQKDEhpdDFfaGl0VHlwZRgvIAEoDRIUCgxIaXQy",
            "X2hpdFR5cGUYMCABKA0SFAoMSGl0M19oaXRUeXBlGDEgASgNEhUKDUhpdDBf",
            "UHJpb3JpdHkYMiABKA0SFQoNSGl0MV9Qcmlvcml0eRgzIAEoDRIVCg1IaXQy",
            "X1ByaW9yaXR5GDQgASgNEhUKDUhpdDNfUHJpb3JpdHkYNSABKA0SEwoLRGFt",
            "YWdlTGV2ZWwYNiABKA0SEgoKTWFwSGl0VHlwZRg3IAEoDRIaChJHdWFyZEN1",
            "dENhbmNlbFJhdGUYOCABKBESFAoMQXRrQXR0cmlidXRlGDkgASgNEhkKEVNw",
            "ZWNpYWxBdHRyaWJ1dGVzGDogASgNEhIKCkF0dGFja1R5cGUYOyABKA0SEwoL",
            "QXRrTWF0ZXJpYWwYPCABKA0SDwoHQXRrU2l6ZRg9IAEoDRITCgtEZWZNYXRl",
            "cmlhbBg+IAEoDRIWCg5EZWZTZnhNYXRlcmlhbBg/IAEoDRIVCg1IaXRTb3Vy",
            "Y2VUeXBlGEAgASgNEhEKCVRocm93RmxhZxhBIAEoDRIQCghCaXRGaWVsZBhC",
            "IAEoDRIQCghVbmtub3duMBhDIAEoDRIQCghVbmtub3duMRhEIAEoDRIQCghV",
            "bmtub3duMhhFIAEoDRIQCghVbmtub3duMxhGIAEoDRIQCghVbmtub3duNBhH",
            "IAEoDRIQCghVbmtub3duNRhIIAEoDRIQCghVbmtub3duNhhJIAEoDRIQCghV",
            "bmtub3duNxhKIAEoDRIQCghVbmtub3duOBhLIAEoDRIQCghVbmtub3duORhM",
            "IAEoDRIRCglVbmtub3duMTAYTSABKA0SEQoJVW5rbm93bjExGE4gASgNEhEK",
            "CVVua25vd24xMhhPIAEoDRIRCglVbmtub3duMTMYUCABKA0SEQoJVW5rbm93",
            "bjE0GFEgASgNEhEKCVVua25vd24xNRhSIAEoDRIRCglVbmtub3duMTYYUyAB",
            "KA0SEQoJVW5rbm93bjE3GFQgASgNEhEKCVVua25vd24xOBhVIAEoDRIRCglV",
            "bmtub3duMTkYViABKA0SEQoJVW5rbm93bjIwGFcgASgNEhEKCVVua25vd24y",
            "MRhYIAEoDRIRCglVbmtub3duMjIYWSABKA0SEQoJVW5rbm93bjIzGFogASgN",
            "EhEKCVVua25vd24yNBhbIAEoDRIRCglVbmtub3duMjUYXCABKA0SEQoJVW5r",
            "bm93bjI2GF0gASgNEhEKCVVua25vd24yNxheIAEoDRIRCglVbmtub3duMjgY",
            "XyABKA0SEQoJVW5rbm93bjI5GGAgASgNEhEKCVVua25vd24zMBhhIAEoDRIR",
            "CglVbmtub3duMzEYYiABKA0SEQoJVW5rbm93bjMyGGMgASgNEhEKCVVua25v",
            "d24zMxhkIAEoDRIRCglVbmtub3duMzQYZSABKA0SEQoJVW5rbm93bjM1GGYg",
            "ASgNEhEKCVVua25vd24zNhhnIAEoDRIRCglVbmtub3duMzcYaCABKA0SEQoJ",
            "VW5rbm93bjM4GGkgASgNEhEKCVVua25vd24zORhqIAEoDRIRCglVbmtub3du",
            "NDAYayABKA0SEQoJVW5rbm93bjQxGGwgASgNEhEKCVVua25vd240MhhtIAEo",
            "DRIRCglVbmtub3duNDMYbiABKA0SEQoJVW5rbm93bjQ0GG8gASgNEhEKCVVu",
            "a25vd240NRhwIAEoDRIRCglVbmtub3duNDYYcSABKA0SEQoJVW5rbm93bjQ3",
            "GHIgASgNEhEKCVVua25vd240OBhzIAEoDRIRCglVbmtub3duNDkYdCABKA0S",
            "EQoJVW5rbm93bjUwGHUgASgNEhEKCVVua25vd241MRh2IAEoDRIRCglVbmtu",
            "b3duNTIYdyABKA0SEQoJVW5rbm93bjUzGHggASgNEhEKCVVua25vd241NBh5",
            "IAEoDRIRCglVbmtub3duNTUYeiABKA0SEQoJVW5rbm93bjU2GHsgASgNEhEK",
            "CVVua25vd241Nxh8IAEoDRIRCglVbmtub3duNTgYfSABKA0SEQoJVW5rbm93",
            "bjU5GH4gASgNEhEKCVVua25vd242MBh/IAEoDRISCglVbmtub3duNjEYgAEg",
            "ASgNEhIKCVVua25vd242MhiBASABKA0SEgoJVW5rbm93bjYzGIIBIAEoDRIS",
            "CglVbmtub3duNjQYgwEgASgNEhIKCVVua25vd242NRiEASABKA0SEgoJVW5r",
            "bm93bjY2GIUBIAEoDRISCglVbmtub3duNjcYhgEgASgNEhIKCVVua25vd242",
            "OBiHASABKA0SEgoJVW5rbm93bjY5GIgBIAEoDRISCglVbmtub3duNzAYiQEg",
            "ASgNEhIKCVVua25vd243MRiKASABKA0SEgoJVW5rbm93bjcyGIsBIAEoDRIS",
            "CglVbmtub3duNzMYjAEgASgNEhIKCVVua25vd243NBiNASABKA0SEgoJVW5r",
            "bm93bjc1GI4BIAEoDRISCglVbmtub3duNzYYjwEgASgNEhIKCVVua25vd243",
            "NxiQASABKA0SEgoJVW5rbm93bjc4GJEBIAEoDRISCglVbmtub3duNzkYkgEg",
            "ASgNEhIKCVVua25vd244MBiTASABKA0SEgoJVW5rbm93bjgxGJQBIAEoDRIS",
            "CglVbmtub3duODIYlQEgASgNEhIKCVVua25vd244MxiWASABKA0SEgoJVW5r",
            "bm93bjg0GJcBIAEoDRISCglVbmtub3duODUYmAEgASgNEhIKCVVua25vd244",
            "NhiZASABKA0SEgoJVW5rbm93bjg3GJoBIAEoDRISCglVbmtub3duODgYmwEg",
            "ASgNEhIKCVVua25vd244ORicASABKA0SEgoJVW5rbm93bjkwGJ0BIAEoDRIS",
            "CglVbmtub3duOTEYngEgASgNEhIKCVVua25vd245MhifASABKA0SEgoJVW5r",
            "bm93bjkzGKABIAEoDRISCglVbmtub3duOTQYoQEgASgNEhIKCVVua25vd245",
            "NRiiASABKA0SEgoJVW5rbm93bjk2GKMBIAEoDRISCglVbmtub3duOTcYpAEg",
            "ASgNEhIKCVVua25vd245OBilASABKA0SEgoJVW5rbm93bjk5GKYBIAEoDRIT",
            "CgpVbmtub3duMTAwGKcBIAEoDRITCgpVbmtub3duMTAxGKgBIAEoDRITCgpV",
            "bmtub3duMTAyGKkBIAEoDRITCgpVbmtub3duMTAzGKoBIAEoDRITCgpVbmtu",
            "b3duMTA0GKsBIAEoDRITCgpVbmtub3duMTA1GKwBIAEoDRITCgpVbmtub3du",
            "MTA2GK0BIAEoDRITCgpVbmtub3duMTA3GK4BIAEoDRITCgpVbmtub3duMTA4",
            "GK8BIAEoDRITCgpVbmtub3duMTA5GLABIAEoDRITCgpVbmtub3duMTEwGLEB",
            "IAEoDRITCgpVbmtub3duMTExGLIBIAEoDRITCgpVbmtub3duMTEyGLMBIAEo",
            "DRITCgpVbmtub3duMTEzGLQBIAEoDRITCgpVbmtub3duMTE0GLUBIAEoDRIT",
            "CgpVbmtub3duMTE1GLYBIAEoDRITCgpVbmtub3duMTE2GLcBIAEoDRITCgpV",
            "bmtub3duMTE3GLgBIAEoDRITCgpVbmtub3duMTE4GLkBIAEoDRITCgpVbmtu",
            "b3duMTE5GLoBIAEoDRITCgpVbmtub3duMTIwGLsBIAEoDRITCgpVbmtub3du",
            "MTIxGLwBIAEoDRITCgpVbmtub3duMTIyGL0BIAEoDRITCgpVbmtub3duMTIz",
            "GL4BIAEoDRITCgpVbmtub3duMTI0GL8BIAEoDRITCgpVbmtub3duMTI1GMAB",
            "IAEoDRITCgpVbmtub3duMTI2GMEBIAEoDRITCgpVbmtub3duMTI3GMIBIAEo",
            "DRITCgpVbmtub3duMTI4GMMBIAEoDRITCgpVbmtub3duMTI5GMQBIAEoDRIT",
            "CgpVbmtub3duMTMwGMUBIAEoDRITCgpVbmtub3duMTMxGMYBIAEoDRITCgpV",
            "bmtub3duMTMyGMcBIAEoDRITCgpVbmtub3duMTMzGMgBIAEoDRITCgpVbmtu",
            "b3duMTM0GMkBIAEoDRITCgpVbmtub3duMTM1GMoBIAEoDRITCgpVbmtub3du",
            "MTM2GMsBIAEoDRITCgpVbmtub3duMTM3GMwBIAEoDRITCgpVbmtub3duMTM4",
            "GM0BIAEoDRITCgpVbmtub3duMTM5GM4BIAEoDRITCgpVbmtub3duMTQwGM8B",
            "IAEoDRITCgpVbmtub3duMTQxGNABIAEoDRITCgpVbmtub3duMTQyGNEBIAEo",
            "DRITCgpVbmtub3duMTQzGNIBIAEoDRITCgpVbmtub3duMTQ0GNMBIAEoDRIT",
            "CgpVbmtub3duMTQ1GNQBIAEoDRITCgpVbmtub3duMTQ2GNUBIAEoDRITCgpV",
            "bmtub3duMTQ3GNYBIAEoDRITCgpVbmtub3duMTQ4GNcBIAEoDRITCgpVbmtu",
            "b3duMTQ5GNgBIAEoDRITCgpVbmtub3duMTUwGNkBIAEoDRITCgpVbmtub3du",
            "MTUxGNoBIAEoDRITCgpVbmtub3duMTUyGNsBIAEoDRITCgpVbmtub3duMTUz",
            "GNwBIAEoDRITCgpVbmtub3duMTU0GN0BIAEoDRITCgpVbmtub3duMTU1GN4B",
            "IAEoDRITCgpVbmtub3duMTU2GN8BIAEoDRITCgpVbmtub3duMTU3GOABIAEo",
            "DRITCgpVbmtub3duMTU4GOEBIAEoDRITCgpVbmtub3duMTU5GOIBIAEoDRIT",
            "CgpVbmtub3duMTYwGOMBIAEoDRITCgpVbmtub3duMTYxGOQBIAEoDRITCgpV",
            "bmtub3duMTYyGOUBIAEoDRITCgpVbmtub3duMTYzGOYBIAEoDRITCgpVbmtu",
            "b3duMTY0GOcBIAEoDRITCgpVbmtub3duMTY1GOgBIAEoDRITCgpVbmtub3du",
            "MTY2GOkBIAEoDRITCgpVbmtub3duMTY3GOoBIAEoDRITCgpVbmtub3duMTY4",
            "GOsBIAEoDRITCgpVbmtub3duMTY5GOwBIAEoDRITCgpVbmtub3duMTcwGO0B",
            "IAEoDRITCgpVbmtub3duMTcxGO4BIAEoDRITCgpVbmtub3duMTcyGO8BIAEo",
            "DRITCgpVbmtub3duMTczGPABIAEoDRITCgpVbmtub3duMTc0GPEBIAEoDRIT",
            "CgpVbmtub3duMTc1GPIBIAEoDRITCgpVbmtub3duMTc2GPMBIAEoDRITCgpV",
            "bmtub3duMTc3GPQBIAEoDRITCgpVbmtub3duMTc4GPUBIAEoDRITCgpVbmtu",
            "b3duMTc5GPYBIAEoDRITCgpVbmtub3duMTgwGPcBIAEoDRITCgpVbmtub3du",
            "MTgxGPgBIAEoDRITCgpVbmtub3duMTgyGPkBIAEoDRITCgpVbmtub3duMTgz",
            "GPoBIAEoDRITCgpVbmtub3duMTg0GPsBIAEoDRITCgpVbmtub3duMTg1GPwB",
            "IAEoDRITCgpVbmtub3duMTg2GP0BIAEoDRITCgpVbmtub3duMTg3GP4BIAEo",
            "DRITCgpVbmtub3duMTg4GP8BIAEoDRITCgpVbmtub3duMTg5GIACIAEoDRIT",
            "CgpVbmtub3duMTkwGIECIAEoDRITCgpVbmtub3duMTkxGIICIAEoDRITCgpV",
            "bmtub3duMTkyGIMCIAEoDRITCgpVbmtub3duMTkzGIQCIAEoDRITCgpVbmtu",
            "b3duMTk0GIUCIAEoDRITCgpVbmtub3duMTk1GIYCIAEoDRITCgpVbmtub3du",
            "MTk2GIcCIAEoDRITCgpVbmtub3duMTk3GIgCIAEoDRITCgpVbmtub3duMTk4",
            "GIkCIAEoDRITCgpVbmtub3duMTk5GIoCIAEoDRITCgpVbmtub3duMjAwGIsC",
            "IAEoDRITCgpVbmtub3duMjAxGIwCIAEoDRITCgpVbmtub3duMjAyGI0CIAEo",
            "DRITCgpVbmtub3duMjAzGI4CIAEoDRITCgpVbmtub3duMjA0GI8CIAEoDRIT",
            "CgpVbmtub3duMjA1GJACIAEoDRITCgpVbmtub3duMjA2GJECIAEoDRITCgpV",
            "bmtub3duMjA3GJICIAEoDRITCgpVbmtub3duMjA4GJMCIAEoDRITCgpVbmtu",
            "b3duMjA5GJQCIAEoDRITCgpVbmtub3duMjEwGJUCIAEoDRITCgpVbmtub3du",
            "MjExGJYCIAEoDRITCgpVbmtub3duMjEyGJcCIAEoDRITCgpVbmtub3duMjEz",
            "GJgCIAEoDRITCgpVbmtub3duMjE0GJkCIAEoDRITCgpVbmtub3duMjE1GJoC",
            "IAEoDRITCgpVbmtub3duMjE2GJsCIAEoDRITCgpVbmtub3duMjE3GJwCIAEo",
            "DRITCgpVbmtub3duMjE4GJ0CIAEoDRITCgpVbmtub3duMjE5GJ4CIAEoDRIT",
            "CgpVbmtub3duMjIwGJ8CIAEoDRITCgpVbmtub3duMjIxGKACIAEoDRITCgpV",
            "bmtub3duMjIyGKECIAEoDRITCgpVbmtub3duMjIzGKICIAEoDRITCgpVbmtu",
            "b3duMjI0GKMCIAEoDRITCgpVbmtub3duMjI1GKQCIAEoDRITCgpVbmtub3du",
            "MjI2GKUCIAEoDRITCgpVbmtub3duMjI3GKYCIAEoDRITCgpVbmtub3duMjI4",
            "GKcCIAEoDRITCgpVbmtub3duMjI5GKgCIAEoDRITCgpVbmtub3duMjMwGKkC",
            "IAEoDRITCgpVbmtub3duMjMxGKoCIAEoDRITCgpVbmtub3duMjMyGKsCIAEo",
            "DRITCgpVbmtub3duMjMzGKwCIAEoDRITCgpVbmtub3duMjM0GK0CIAEoDRIT",
            "CgpVbmtub3duMjM1GK4CIAEoDRITCgpVbmtub3duMjM2GK8CIAEoDRITCgpV",
            "bmtub3duMjM3GLACIAEoDRITCgpVbmtub3duMjM4GLECIAEoDRITCgpVbmtu",
            "b3duMjM5GLICIAEoDRITCgpVbmtub3duMjQwGLMCIAEoDRITCgpVbmtub3du",
            "MjQxGLQCIAEoDRITCgpVbmtub3duMjQyGLUCIAEoDRITCgpVbmtub3duMjQz",
            "GLYCIAEoDRITCgpVbmtub3duMjQ0GLcCIAEoDRITCgpVbmtub3duMjQ1GLgC",
            "IAEoDRITCgpVbmtub3duMjQ2GLkCIAEoDRITCgpVbmtub3duMjQ3GLoCIAEo",
            "DRITCgpVbmtub3duMjQ4GLsCIAEoDRITCgpVbmtub3duMjQ5GLwCIAEoDRIT",
            "CgpVbmtub3duMjUwGL0CIAEoDRITCgpVbmtub3duMjUxGL4CIAEoDRITCgpV",
            "bmtub3duMjUyGL8CIAEoDRITCgpVbmtub3duMjUzGMACIAEoDRITCgpVbmtu",
            "b3duMjU0GMECIAEoDRITCgpVbmtub3duMjU1GMICIAEoDRITCgpVbmtub3du",
            "MjU2GMMCIAEoDRITCgpVbmtub3duMjU3GMQCIAEoDRITCgpVbmtub3duMjU4",
            "GMUCIAEoDRITCgpVbmtub3duMjU5GMYCIAEoDRITCgpVbmtub3duMjYwGMcC",
            "IAEoDRITCgpVbmtub3duMjYxGMgCIAEoDRITCgpVbmtub3duMjYyGMkCIAEo",
            "DRITCgpVbmtub3duMjYzGMoCIAEoDRITCgpVbmtub3duMjY0GMsCIAEoDRIa",
            "ChFBdGtEYXJrQ29ycmVjdGlvbhjMAiABKA0iQgoIRm1nRW50cnkSCgoCSWQY",
            "AiABKBESDQoFSWRNYXgYAyABKBESDQoFSWRNaW4YBCABKBESDAoEVGV4dBgF",
            "IAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ds3Ext.EquipParamWeapon), global::Ds3Ext.EquipParamWeapon.Parser, new[]{ "Id", "Index", "Offset", "BehaviorVariationId", "SortId", "WanderingEquipId", "Weight", "WeaponWeightRate", "FixPrice", "BasicPrice", "SellValue", "CorrectStrength", "CorrectAgility", "CorrectMagic", "CorrectFaith", "PhysGuardCutRate", "MagGuardCutRate", "FireGuardCutRate", "ThunGuardCutRate", "SpEffectBehaviorId1", "SpEffectBehaviorId2", "SpEffectBehaviorId3", "ResidentSpEffectId1", "ResidentSpEffectId2", "ResidentSpEffectId3", "MaterialSetId", "OriginEquipWep", "OriginEquipWep1", "OriginEquipWep2", "OriginEquipWep3", "OriginEquipWep4", "OriginEquipWep5", "OriginEquipWep6", "OriginEquipWep7", "OriginEquipWep8", "OriginEquipWep9", "OriginEquipWep10", "OriginEquipWep11", "OriginEquipWep12", "OriginEquipWep13", "OriginEquipWep14", "OriginEquipWep15", "AntiDemonDamageRate", "AntSaintDamageRate", "AntWeakADamageRate", "AntWeakBDamageRate", "VagrantItemLotId", "VagrantBonusEneDropItemLotId", "VagrantItemEneDropItemLotId", "EquipModelId", "IconId", "Durability", "MaxDurability", "ParryDamageLife", "AttackThrowEscape", "AttackBasePhysics", "AttackBaseMagic", "AttackBaseFire", "AttackBaseThunder", "AttackBaseStamina", "AttackBasePoise", "SaDurability", "GuardAngle", "Stability", "ReinforceTypeId", "TrophySGradeId", "ThrophySeqId", "ThrowAtkRate", "BowDistRate", "EquipModelCategory", "EquipModelGender", "WeaponCategory", "MotionCategory", "GuardMotionCategory", "AtkMaterial", "DefMaterial", "DefSfxMaterial", "PhysicsStatFunc", "SpAttribute", "SpAtkCategory", "WepMotionOneHandId", "WepMotionBothHandId", "ProperStrength", "ProperAgility", "ProperMagic", "ProperFaith", "OverStrength", "AttackBaseParry", "DefenseBaseParry", "GuardBaseRepel", "AttackBaseRepel", "GuardCutCancelRate", "GuardLevel", "SlashGuardCutRate", "BlowGuardCutRate", "ThrustGuardCutRate", "PoisonGuardResist", "DiseaseGuardResist", "BloodGuardResist", "CurseGuardResist", "IsDurabilityDivergence", "RightHandEquipable", "LeftHandEquipable", "Buffs", "MagicStatFunc", "FireStatFunc", "ThunderStatFunc", "AttackBaseDark", "DarkStatFunc", "PoisonStatFunc", "BleedStatFunc", "ProperLuck", "WeaponArt", "CorrectLuck", "WeaponClass", "AecpId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ds3Ext.EquipParamAccessory), global::Ds3Ext.EquipParamAccessory.Parser, new[]{ "Id", "Index", "Offset", "RefId", "SfxVariationId", "Weight", "BehaviorId", "BasicPrice", "SellValue", "SortId", "QwcId", "EquipModelId", "IconId", "ShopLv", "TrophySGradeId", "ThrophySeqId", "EquipModelCategory", "EquipModelGender", "AccessoryCategory", "RefCategory", "SpEffectCategory" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ds3Ext.EquipParamProtector), global::Ds3Ext.EquipParamProtector.Parser, new[]{ "Id", "Index", "Offset", "SortId", "WanderingEquipId", "VagrantItemLotId", "VagrantBonusEneDropItemLotId", "VagrantItemEneDropItemLotId", "FixPrice", "BasicPrice", "SellValue", "Weight", "ResidentSpEffectId1", "ResidentSpEffectId2", "ResidentSpEffectId3", "MaterialSetId", "PartsDamageRate", "ResistPoison", "ResistToxic", "ResistBlood", "ResistCurse", "DefensePhysics", "DefenseSlash", "DefenseStrike", "DefenseThrust", "DefenseMagic", "DefenseFire", "DefenseThunder", "EquipModelId", "KnockbackBounceRate", "Durability", "DurabilityMax", "SaDurability", "Poise", "DefenseDark", "ResistFrost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ds3Ext.ReinforceParamWeapon), global::Ds3Ext.ReinforceParamWeapon.Parser, new[]{ "Id", "Index", "Offset", "PhysicsAtkRate", "MagicAtkRate", "FireAtkRate", "ThunderAtkRate", "StaminaAtkRate", "SaWeaponAtkRate", "SaDurabilityRate", "CorrectStrengthRate", "CorrectAgilityRate", "CorrectMagicRate", "CorrectFaithRate", "PhysicsGuardCutRate", "MagicGuardCutRate", "FireGuardCutRate", "ThunderGuardCutRate", "PoisonGuardResistRate", "DiseaseGuardResistRate", "BloodGuardResistRate", "CurseGuardResistRate", "StaminaGuardDefRate", "SpEffectId1", "SpEffectId2", "SpEffectId3", "ResidentSpEffectId1", "ResidentSpEffectId2", "ResidentSpEffectId3", "MaterialSetId1", "MaterialSetId2", "DarkAtkRate", "DarkGuardResistRate", "CorrectLuckRate", "Unknown0", "Unknown1", "Unknown2", "Unknown3", "Unknown4", "Unknown5", "Unknown6", "Unknown7", "Unknown8", "Unknown9", "Unknown10", "Unknown11" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ds3Ext.AttackElementCorrectParam), global::Ds3Ext.AttackElementCorrectParam.Parser, new[]{ "Id", "Index", "Offset", "Bitmask", "V0", "V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9", "V10", "V11", "V12", "V13", "V14", "V15", "V16", "V17", "V18", "V19", "V20", "V21", "V22", "V23", "V24", "V25", "V26", "V27", "V28", "V29", "V30", "V31", "V32", "V33", "V34", "V35", "V36", "V37", "V38", "V39", "V40", "V41", "V42", "V43", "V44", "V45", "V46", "V47", "V48", "V49" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ds3Ext.CalcCorrectGraph), global::Ds3Ext.CalcCorrectGraph.Parser, new[]{ "Id", "Index", "Offset", "StageMaxVal0", "StageMaxVal1", "StageMaxVal2", "StageMaxVal3", "StageMaxVal4", "StageMaxGrowVal0", "StageMaxGrowVal1", "StageMaxGrowVal2", "StageMaxGrowVal3", "StageMaxGrowVal4", "AdjPtMaxGrowVal0", "AdjPtMaxGrowVal1", "AdjPtMaxGrowVal2", "AdjPtMaxGrowVal3", "AdjPtMaxGrowVal4", "InitInclinationSoul", "AdjustmentValue", "BoundryInclinationSoul", "BoundryValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ds3Ext.Magic), global::Ds3Ext.Magic.Parser, new[]{ "Id", "Index", "Offset", "YesNoDialogMessageId", "LimitCancelSpEffectId", "SortId", "RefId", "Mp", "Stamina", "Icon", "BehaviorId", "MtrlItemId", "ReplaceMagicId", "MaxQuantity", "Humanity", "OverDexterity", "SfxVariationid", "SlotLength", "RequirementIntellect", "RequirementFaith", "AnalogDexterityMin", "AnalogDexterityMax", "EzStateBehaviorType", "RefCategory", "SpEffectCategory", "RefType", "OpmeMenuType", "HasSpEffectType", "ReplaceCategory", "UseLimitCategory" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ds3Ext.SpEffectParam), global::Ds3Ext.SpEffectParam.Parser, new[]{ "Id", "Index", "Offset", "IconId", "ConditionHp", "EffectEndurance", "MotionInterval", "MaxHpRate", "MaxMpRate", "MaxStaminaRate", "SlashDamageCutRate", "BlowDamageCutRate", "ThrustDamageCutRate", "NeutralDamageCutRate", "MagicDamageCutRate", "FireDamageCutRate", "ThunderDamageCutRate", "PhysicsAttackRate", "MagicAttackRate", "FireAttackRate", "ThunderAttackRate", "PhysicsAttackPowerRate", "MagicAttackPowerRate", "FireAttackPowerRate", "ThunderAttackPowerRate", "PhysicsAttackPower", "MagicAttackPower", "FireAttackPower", "ThunderAttackPower", "PhysicsDifferenceRate", "MagicDifferenceRate", "FireDifferenceRate", "ThunderDifferenceRate", "PhysicsDifference", "MagicDifference", "FireDifference", "ThunderDifference", "NoGuardDamageRate", "VitalSpotChangeRate", "NormalSpotChangeRate", "MaxHpChangeRate", "BehaviorId", "ChangeHpRate", "ChangeHpPoint", "ChangeMpRate", "ChangeMpPoint", "MpRecoverChangeSpeed", "ChangeStaminaRate", "ChangeStaminaPoint", "StaminaRecoverChangeSpeed", "MagicEffectTimeChange", "InsideDurability", "MaxDurability", "PoisonAttackPower", "RegistIllness", "BloodAttackPower", "RegistCurse", "FallDamageRate", "SoulRate", "EquipWeightChangeRate", "AllItemWeightChangeRate", "Soul", "AnimidOffset", "HaveSoulRate", "TargetPriority", "SightSearchEnemyCut", "HearingSearchEnemyCut", "GrabityRate", "RegistPoisonChangeRate", "RegistToxicChangeRate", "RegistBloodChangeRate", "RegistCurseChangeRate", "SoulStealRate", "LifeReductionRate", "HpRecoverRate", "ReplaceSpEffectId", "CycleOccurrenceSpEffectId", "AtkOccurrenceSpEffectId", "GuardDefFlickPowerRate", "GuardStaminaCutRate", "RayCastPassedTime", "ChangeSuperArmorPoint", "BowDistRate", "SpCategory", "CategoryPriority", "SaveCategory", "ChangeMagicSlot", "ChangeMiracleSlot", "HeroPointDamage", "DefFlickPower", "FlickDamageCutRate", "BloodDamageRate", "DmgLvNone", "DmgLvS", "DmgLvM", "DmgLvL", "DmgLvBlowM", "DmgLvPush", "DmgLvStrike", "DmgLvBlowS", "DmgLvMin", "DmgLvUppercut", "DmgLvBlowLL", "DmgLvBreath", "AtkAttribute", "SpAttribute", "StateInfo", "WepParamChange", "MoveType", "LifeReductionType", "ThrowCondition", "AddBehaviorJudgeIdCondition", "AddBehaviorJudgeIdAdd", "EffectTargetSelf", "EffectTargetFriend", "EffectTargetEnemy", "EffectTargetPlayer", "EffectTargetAI", "EffectTargetLive", "EffectTargetGhost", "EffectTargetWhiteGhost", "StrangeEnum", "FrostAttackPower", "DarkDifferenceRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ds3Ext.NpcParam), global::Ds3Ext.NpcParam.Parser, new[]{ "Id", "Index", "Offset", "BehaviorVariationId", "AiThinkId", "NameId", "TurnVelocity", "HitHeight", "HitRadius", "Weight", "HitYOffset", "Hp", "Mp", "GetSoul", "ItemLotId1", "ItemLotId2", "ItemLotId3", "ItemLotId4", "ItemLotId5", "ItemLotId6", "HumanityLotId", "SpEffectID0", "SpEffectID1", "SpEffectID2", "SpEffectID3", "SpEffectID4", "SpEffectID5", "SpEffectID6", "SpEffectID7", "GameClearSpEffectID", "PhysGuardCutRate", "MagGuardCutRate", "FireGuardCutRate", "ThunGuardCutRate", "AnimIdOffset", "MoveAnimId", "SpMoveAnimId1", "SpMoveAnimId2", "NetworkWarpDist", "DbgBehaviorR1", "DbgBehaviorL1", "DbgBehaviorR2", "DbgBehaviorL2", "DbgBehaviorRL", "DbgBehaviorRR", "DbgBehaviorRD", "DbgBehaviorRU", "DbgBehaviorLL", "DbgBehaviorLR", "DbgBehaviorLD", "DbgBehaviorLU", "AnimIdOffset2", "PartsDamageRate1", "PartsDamageRate2", "PartsDamageRate3", "PartsDamageRate4", "PartsDamageRate5", "PartsDamageRate6", "PartsDamageRate7", "PartsDamageRate8", "WeakPartsDamageRate", "SuperArmorRecoverCorrection", "SuperArmorBrakeKnockbackDist", "Stamina", "StaminaRecoverBaseVel", "DefPhys", "DefSlash", "DefBlow", "DefThrust", "DefMag", "DefFire", "DefThun", "DefFlickPower", "ResistPoison", "ResistDisease", "ResistBleed", "ResistCurse", "GhostModelId", "NormalChangeResourceId", "GuardAngle", "SlashGuardCutRate", "BlowGuardCutRate", "ThrustGuardCutRate", "SuperArmorDurability", "NormalChangeTexChrId", "DropType", "KnockbackRate", "KnockbackParamId", "FallDamageDump", "StaminaGuardDef", "PcAttrB", "PcAttrW", "PcAttrL", "PcAttrR", "AreaAttrB", "AreaAttrW", "AreaAttrL", "AreaAttrR", "MpRecoverBaseVel", "FlickDamageCutRate", "DefaultLodParamId", "DrawType", "NpcType", "TeamType", "MoveType", "LockDist", "Material", "MaterialSfx", "MaterialWeak", "MaterialSfxWeak", "PartsDamageType", "MaxUndurationAng", "GuardLevel", "BurnSfxType", "PoisonGuardResist", "DiseaseGuardResist", "BloodGuardResist", "CurseGuardResist", "ParryAttack", "ParryDefense", "SfxSize", "PushOutCamRegionRadius", "HitStopType", "LadderEndChkOffsetTop", "LadderEndChkOffsetLow", "BitFields0", "BitFields1", "BitFields2", "BitFields3", "BitFields4", "Unknown10", "Unknown11", "Unknown12", "Unknown13", "Unknown14", "Unknown15", "Unknown16", "Unknown17", "Unknown18", "Unknown19", "Unknown110", "Unknown111", "Unknown112", "Unknown113", "Unknown114", "Unknown115", "DefDark", "Unknown20", "Unknown21", "Unknown22", "Unknown23", "Unknown24", "Unknown25", "Unknown26", "Unknown27", "Unknown28", "Unknown29", "Unknown210", "Unknown211", "Unknown212", "Unknown213", "Unknown214", "Unknown215", "Unknown216", "Unknown217", "Unknown218", "Unknown219", "Unknown220", "Unknown221", "Unknown222", "Unknown223", "Unknown224", "Unknown225", "Unknown226", "Unknown227", "Unknown228", "Unknown229", "Unknown230", "Unknown231", "Unknown232", "Unknown233", "Unknown234", "Unknown235", "Unknown236", "Unknown237", "Unknown238", "Unknown239", "Unknown240", "Unknown241", "Unknown242", "Unknown243", "Unknown244", "Unknown245", "Unknown246", "Unknown247", "Unknown248", "Unknown249", "Unknown250", "Unknown251", "Unknown252", "Unknown253", "Unknown254", "Unknown255", "Unknown256", "Unknown257", "Unknown258", "Unknown259", "Unknown260", "Unknown261", "Unknown262", "Unknown263", "Phys", "Thrust", "Strike", "Slash", "Magic", "Fire", "Lightning", "Dark" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ds3Ext.BehaviorParam), global::Ds3Ext.BehaviorParam.Parser, new[]{ "Id", "Index", "Offset", "VariationId", "BehaviorJudgeId", "EzStateBehaviorTypeOld", "RefType", "Padding10", "Padding11", "ReferenceId", "SfxVariationId", "Stamina", "Mp", "Category", "HeroPoint", "Padding20", "Padding21" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ds3Ext.AtkParam), global::Ds3Ext.AtkParam.Parser, new[]{ "Id", "Index", "Offset", "Hit0Radius", "Hit1Radius", "Hit2Radius", "Hit3Radius", "KnockbackDist", "HitStopTime", "SpEffectId0", "SpEffectId1", "SpEffectId2", "SpEffectId3", "SpEffectId4", "Hit0DmyPoly1", "Hit1DmyPoly1", "Hit2DmyPoly1", "Hit3DmyPoly1", "Hit0DmyPoly2", "Hit1DmyPoly2", "Hit2DmyPoly2", "Hit3DmyPoly2", "BlowingCorrection", "AtkPhysCorrection", "AtkMagCorrection", "AtkFireCorrection", "AtkThunCorrection", "AtkStamCorrection", "GuardAtkRateCorrection", "GuardBreakCorrection", "AtkThrowEscapeCorrection", "AtkPhys", "AtkMag", "AtkFire", "AtkThun", "AtkStam", "GuardAtkRate", "GuardBreakRate", "AtkSuperArmor", "AtkThrowEscape", "AtkObj", "GuardStaminaCutRate", "GuardRate", "ThrowTypeId", "Hit0HitType", "Hit1HitType", "Hit2HitType", "Hit3HitType", "Hit0Priority", "Hit1Priority", "Hit2Priority", "Hit3Priority", "DamageLevel", "MapHitType", "GuardCutCancelRate", "AtkAttribute", "SpecialAttributes", "AttackType", "AtkMaterial", "AtkSize", "DefMaterial", "DefSfxMaterial", "HitSourceType", "ThrowFlag", "BitField", "Unknown0", "Unknown1", "Unknown2", "Unknown3", "Unknown4", "Unknown5", "Unknown6", "Unknown7", "Unknown8", "Unknown9", "Unknown10", "Unknown11", "Unknown12", "Unknown13", "Unknown14", "Unknown15", "Unknown16", "Unknown17", "Unknown18", "Unknown19", "Unknown20", "Unknown21", "Unknown22", "Unknown23", "Unknown24", "Unknown25", "Unknown26", "Unknown27", "Unknown28", "Unknown29", "Unknown30", "Unknown31", "Unknown32", "Unknown33", "Unknown34", "Unknown35", "Unknown36", "Unknown37", "Unknown38", "Unknown39", "Unknown40", "Unknown41", "Unknown42", "Unknown43", "Unknown44", "Unknown45", "Unknown46", "Unknown47", "Unknown48", "Unknown49", "Unknown50", "Unknown51", "Unknown52", "Unknown53", "Unknown54", "Unknown55", "Unknown56", "Unknown57", "Unknown58", "Unknown59", "Unknown60", "Unknown61", "Unknown62", "Unknown63", "Unknown64", "Unknown65", "Unknown66", "Unknown67", "Unknown68", "Unknown69", "Unknown70", "Unknown71", "Unknown72", "Unknown73", "Unknown74", "Unknown75", "Unknown76", "Unknown77", "Unknown78", "Unknown79", "Unknown80", "Unknown81", "Unknown82", "Unknown83", "Unknown84", "Unknown85", "Unknown86", "Unknown87", "Unknown88", "Unknown89", "Unknown90", "Unknown91", "Unknown92", "Unknown93", "Unknown94", "Unknown95", "Unknown96", "Unknown97", "Unknown98", "Unknown99", "Unknown100", "Unknown101", "Unknown102", "Unknown103", "Unknown104", "Unknown105", "Unknown106", "Unknown107", "Unknown108", "Unknown109", "Unknown110", "Unknown111", "Unknown112", "Unknown113", "Unknown114", "Unknown115", "Unknown116", "Unknown117", "Unknown118", "Unknown119", "Unknown120", "Unknown121", "Unknown122", "Unknown123", "Unknown124", "Unknown125", "Unknown126", "Unknown127", "Unknown128", "Unknown129", "Unknown130", "Unknown131", "Unknown132", "Unknown133", "Unknown134", "Unknown135", "Unknown136", "Unknown137", "Unknown138", "Unknown139", "Unknown140", "Unknown141", "Unknown142", "Unknown143", "Unknown144", "Unknown145", "Unknown146", "Unknown147", "Unknown148", "Unknown149", "Unknown150", "Unknown151", "Unknown152", "Unknown153", "Unknown154", "Unknown155", "Unknown156", "Unknown157", "Unknown158", "Unknown159", "Unknown160", "Unknown161", "Unknown162", "Unknown163", "Unknown164", "Unknown165", "Unknown166", "Unknown167", "Unknown168", "Unknown169", "Unknown170", "Unknown171", "Unknown172", "Unknown173", "Unknown174", "Unknown175", "Unknown176", "Unknown177", "Unknown178", "Unknown179", "Unknown180", "Unknown181", "Unknown182", "Unknown183", "Unknown184", "Unknown185", "Unknown186", "Unknown187", "Unknown188", "Unknown189", "Unknown190", "Unknown191", "Unknown192", "Unknown193", "Unknown194", "Unknown195", "Unknown196", "Unknown197", "Unknown198", "Unknown199", "Unknown200", "Unknown201", "Unknown202", "Unknown203", "Unknown204", "Unknown205", "Unknown206", "Unknown207", "Unknown208", "Unknown209", "Unknown210", "Unknown211", "Unknown212", "Unknown213", "Unknown214", "Unknown215", "Unknown216", "Unknown217", "Unknown218", "Unknown219", "Unknown220", "Unknown221", "Unknown222", "Unknown223", "Unknown224", "Unknown225", "Unknown226", "Unknown227", "Unknown228", "Unknown229", "Unknown230", "Unknown231", "Unknown232", "Unknown233", "Unknown234", "Unknown235", "Unknown236", "Unknown237", "Unknown238", "Unknown239", "Unknown240", "Unknown241", "Unknown242", "Unknown243", "Unknown244", "Unknown245", "Unknown246", "Unknown247", "Unknown248", "Unknown249", "Unknown250", "Unknown251", "Unknown252", "Unknown253", "Unknown254", "Unknown255", "Unknown256", "Unknown257", "Unknown258", "Unknown259", "Unknown260", "Unknown261", "Unknown262", "Unknown263", "Unknown264", "AtkDarkCorrection" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ds3Ext.FmgEntry), global::Ds3Ext.FmgEntry.Parser, new[]{ "Id", "IdMax", "IdMin", "Text" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EquipParamWeapon : pb::IMessage<EquipParamWeapon> {
    private static readonly pb::MessageParser<EquipParamWeapon> _parser = new pb::MessageParser<EquipParamWeapon>(() => new EquipParamWeapon());
    public static pb::MessageParser<EquipParamWeapon> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ds3Ext.Ds3ExtReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public EquipParamWeapon() {
      OnConstruction();
    }

    partial void OnConstruction();

    public EquipParamWeapon(EquipParamWeapon other) : this() {
      id_ = other.id_;
      index_ = other.index_;
      offset_ = other.offset_;
      behaviorVariationId_ = other.behaviorVariationId_;
      sortId_ = other.sortId_;
      wanderingEquipId_ = other.wanderingEquipId_;
      weight_ = other.weight_;
      weaponWeightRate_ = other.weaponWeightRate_;
      fixPrice_ = other.fixPrice_;
      basicPrice_ = other.basicPrice_;
      sellValue_ = other.sellValue_;
      correctStrength_ = other.correctStrength_;
      correctAgility_ = other.correctAgility_;
      correctMagic_ = other.correctMagic_;
      correctFaith_ = other.correctFaith_;
      physGuardCutRate_ = other.physGuardCutRate_;
      magGuardCutRate_ = other.magGuardCutRate_;
      fireGuardCutRate_ = other.fireGuardCutRate_;
      thunGuardCutRate_ = other.thunGuardCutRate_;
      spEffectBehaviorId1_ = other.spEffectBehaviorId1_;
      spEffectBehaviorId2_ = other.spEffectBehaviorId2_;
      spEffectBehaviorId3_ = other.spEffectBehaviorId3_;
      residentSpEffectId1_ = other.residentSpEffectId1_;
      residentSpEffectId2_ = other.residentSpEffectId2_;
      residentSpEffectId3_ = other.residentSpEffectId3_;
      materialSetId_ = other.materialSetId_;
      originEquipWep_ = other.originEquipWep_;
      originEquipWep1_ = other.originEquipWep1_;
      originEquipWep2_ = other.originEquipWep2_;
      originEquipWep3_ = other.originEquipWep3_;
      originEquipWep4_ = other.originEquipWep4_;
      originEquipWep5_ = other.originEquipWep5_;
      originEquipWep6_ = other.originEquipWep6_;
      originEquipWep7_ = other.originEquipWep7_;
      originEquipWep8_ = other.originEquipWep8_;
      originEquipWep9_ = other.originEquipWep9_;
      originEquipWep10_ = other.originEquipWep10_;
      originEquipWep11_ = other.originEquipWep11_;
      originEquipWep12_ = other.originEquipWep12_;
      originEquipWep13_ = other.originEquipWep13_;
      originEquipWep14_ = other.originEquipWep14_;
      originEquipWep15_ = other.originEquipWep15_;
      antiDemonDamageRate_ = other.antiDemonDamageRate_;
      antSaintDamageRate_ = other.antSaintDamageRate_;
      antWeakADamageRate_ = other.antWeakADamageRate_;
      antWeakBDamageRate_ = other.antWeakBDamageRate_;
      vagrantItemLotId_ = other.vagrantItemLotId_;
      vagrantBonusEneDropItemLotId_ = other.vagrantBonusEneDropItemLotId_;
      vagrantItemEneDropItemLotId_ = other.vagrantItemEneDropItemLotId_;
      equipModelId_ = other.equipModelId_;
      iconId_ = other.iconId_;
      durability_ = other.durability_;
      maxDurability_ = other.maxDurability_;
      parryDamageLife_ = other.parryDamageLife_;
      attackThrowEscape_ = other.attackThrowEscape_;
      attackBasePhysics_ = other.attackBasePhysics_;
      attackBaseMagic_ = other.attackBaseMagic_;
      attackBaseFire_ = other.attackBaseFire_;
      attackBaseThunder_ = other.attackBaseThunder_;
      attackBaseStamina_ = other.attackBaseStamina_;
      attackBasePoise_ = other.attackBasePoise_;
      saDurability_ = other.saDurability_;
      guardAngle_ = other.guardAngle_;
      stability_ = other.stability_;
      reinforceTypeId_ = other.reinforceTypeId_;
      trophySGradeId_ = other.trophySGradeId_;
      throphySeqId_ = other.throphySeqId_;
      throwAtkRate_ = other.throwAtkRate_;
      bowDistRate_ = other.bowDistRate_;
      equipModelCategory_ = other.equipModelCategory_;
      equipModelGender_ = other.equipModelGender_;
      weaponCategory_ = other.weaponCategory_;
      motionCategory_ = other.motionCategory_;
      guardMotionCategory_ = other.guardMotionCategory_;
      atkMaterial_ = other.atkMaterial_;
      defMaterial_ = other.defMaterial_;
      defSfxMaterial_ = other.defSfxMaterial_;
      physicsStatFunc_ = other.physicsStatFunc_;
      spAttribute_ = other.spAttribute_;
      spAtkCategory_ = other.spAtkCategory_;
      wepMotionOneHandId_ = other.wepMotionOneHandId_;
      wepMotionBothHandId_ = other.wepMotionBothHandId_;
      properStrength_ = other.properStrength_;
      properAgility_ = other.properAgility_;
      properMagic_ = other.properMagic_;
      properFaith_ = other.properFaith_;
      overStrength_ = other.overStrength_;
      attackBaseParry_ = other.attackBaseParry_;
      defenseBaseParry_ = other.defenseBaseParry_;
      guardBaseRepel_ = other.guardBaseRepel_;
      attackBaseRepel_ = other.attackBaseRepel_;
      guardCutCancelRate_ = other.guardCutCancelRate_;
      guardLevel_ = other.guardLevel_;
      slashGuardCutRate_ = other.slashGuardCutRate_;
      blowGuardCutRate_ = other.blowGuardCutRate_;
      thrustGuardCutRate_ = other.thrustGuardCutRate_;
      poisonGuardResist_ = other.poisonGuardResist_;
      diseaseGuardResist_ = other.diseaseGuardResist_;
      bloodGuardResist_ = other.bloodGuardResist_;
      curseGuardResist_ = other.curseGuardResist_;
      isDurabilityDivergence_ = other.isDurabilityDivergence_;
      rightHandEquipable_ = other.rightHandEquipable_;
      leftHandEquipable_ = other.leftHandEquipable_;
      buffs_ = other.buffs_;
      magicStatFunc_ = other.magicStatFunc_;
      fireStatFunc_ = other.fireStatFunc_;
      thunderStatFunc_ = other.thunderStatFunc_;
      attackBaseDark_ = other.attackBaseDark_;
      darkStatFunc_ = other.darkStatFunc_;
      poisonStatFunc_ = other.poisonStatFunc_;
      bleedStatFunc_ = other.bleedStatFunc_;
      properLuck_ = other.properLuck_;
      weaponArt_ = other.weaponArt_;
      correctLuck_ = other.correctLuck_;
      weaponClass_ = other.weaponClass_;
      aecpId_ = other.aecpId_;
    }

    public EquipParamWeapon Clone() {
      return new EquipParamWeapon(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Offset" field.</summary>
    public const int OffsetFieldNumber = 4;
    private int offset_;
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "BehaviorVariationId" field.</summary>
    public const int BehaviorVariationIdFieldNumber = 5;
    private uint behaviorVariationId_;
    public uint BehaviorVariationId {
      get { return behaviorVariationId_; }
      set {
        behaviorVariationId_ = value;
      }
    }

    /// <summary>Field number for the "SortId" field.</summary>
    public const int SortIdFieldNumber = 6;
    private uint sortId_;
    public uint SortId {
      get { return sortId_; }
      set {
        sortId_ = value;
      }
    }

    /// <summary>Field number for the "WanderingEquipId" field.</summary>
    public const int WanderingEquipIdFieldNumber = 7;
    private int wanderingEquipId_;
    public int WanderingEquipId {
      get { return wanderingEquipId_; }
      set {
        wanderingEquipId_ = value;
      }
    }

    /// <summary>Field number for the "Weight" field.</summary>
    public const int WeightFieldNumber = 8;
    private float weight_;
    public float Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "WeaponWeightRate" field.</summary>
    public const int WeaponWeightRateFieldNumber = 9;
    private int weaponWeightRate_;
    public int WeaponWeightRate {
      get { return weaponWeightRate_; }
      set {
        weaponWeightRate_ = value;
      }
    }

    /// <summary>Field number for the "FixPrice" field.</summary>
    public const int FixPriceFieldNumber = 10;
    private int fixPrice_;
    public int FixPrice {
      get { return fixPrice_; }
      set {
        fixPrice_ = value;
      }
    }

    /// <summary>Field number for the "BasicPrice" field.</summary>
    public const int BasicPriceFieldNumber = 11;
    private int basicPrice_;
    public int BasicPrice {
      get { return basicPrice_; }
      set {
        basicPrice_ = value;
      }
    }

    /// <summary>Field number for the "SellValue" field.</summary>
    public const int SellValueFieldNumber = 12;
    private int sellValue_;
    public int SellValue {
      get { return sellValue_; }
      set {
        sellValue_ = value;
      }
    }

    /// <summary>Field number for the "CorrectStrength" field.</summary>
    public const int CorrectStrengthFieldNumber = 13;
    private float correctStrength_;
    public float CorrectStrength {
      get { return correctStrength_; }
      set {
        correctStrength_ = value;
      }
    }

    /// <summary>Field number for the "CorrectAgility" field.</summary>
    public const int CorrectAgilityFieldNumber = 14;
    private float correctAgility_;
    public float CorrectAgility {
      get { return correctAgility_; }
      set {
        correctAgility_ = value;
      }
    }

    /// <summary>Field number for the "CorrectMagic" field.</summary>
    public const int CorrectMagicFieldNumber = 15;
    private float correctMagic_;
    public float CorrectMagic {
      get { return correctMagic_; }
      set {
        correctMagic_ = value;
      }
    }

    /// <summary>Field number for the "CorrectFaith" field.</summary>
    public const int CorrectFaithFieldNumber = 16;
    private float correctFaith_;
    public float CorrectFaith {
      get { return correctFaith_; }
      set {
        correctFaith_ = value;
      }
    }

    /// <summary>Field number for the "PhysGuardCutRate" field.</summary>
    public const int PhysGuardCutRateFieldNumber = 17;
    private float physGuardCutRate_;
    public float PhysGuardCutRate {
      get { return physGuardCutRate_; }
      set {
        physGuardCutRate_ = value;
      }
    }

    /// <summary>Field number for the "MagGuardCutRate" field.</summary>
    public const int MagGuardCutRateFieldNumber = 18;
    private float magGuardCutRate_;
    public float MagGuardCutRate {
      get { return magGuardCutRate_; }
      set {
        magGuardCutRate_ = value;
      }
    }

    /// <summary>Field number for the "FireGuardCutRate" field.</summary>
    public const int FireGuardCutRateFieldNumber = 19;
    private float fireGuardCutRate_;
    public float FireGuardCutRate {
      get { return fireGuardCutRate_; }
      set {
        fireGuardCutRate_ = value;
      }
    }

    /// <summary>Field number for the "ThunGuardCutRate" field.</summary>
    public const int ThunGuardCutRateFieldNumber = 20;
    private float thunGuardCutRate_;
    public float ThunGuardCutRate {
      get { return thunGuardCutRate_; }
      set {
        thunGuardCutRate_ = value;
      }
    }

    /// <summary>Field number for the "SpEffectBehaviorId1" field.</summary>
    public const int SpEffectBehaviorId1FieldNumber = 21;
    private int spEffectBehaviorId1_;
    public int SpEffectBehaviorId1 {
      get { return spEffectBehaviorId1_; }
      set {
        spEffectBehaviorId1_ = value;
      }
    }

    /// <summary>Field number for the "SpEffectBehaviorId2" field.</summary>
    public const int SpEffectBehaviorId2FieldNumber = 22;
    private int spEffectBehaviorId2_;
    public int SpEffectBehaviorId2 {
      get { return spEffectBehaviorId2_; }
      set {
        spEffectBehaviorId2_ = value;
      }
    }

    /// <summary>Field number for the "SpEffectBehaviorId3" field.</summary>
    public const int SpEffectBehaviorId3FieldNumber = 23;
    private int spEffectBehaviorId3_;
    public int SpEffectBehaviorId3 {
      get { return spEffectBehaviorId3_; }
      set {
        spEffectBehaviorId3_ = value;
      }
    }

    /// <summary>Field number for the "ResidentSpEffectId1" field.</summary>
    public const int ResidentSpEffectId1FieldNumber = 24;
    private int residentSpEffectId1_;
    public int ResidentSpEffectId1 {
      get { return residentSpEffectId1_; }
      set {
        residentSpEffectId1_ = value;
      }
    }

    /// <summary>Field number for the "ResidentSpEffectId2" field.</summary>
    public const int ResidentSpEffectId2FieldNumber = 25;
    private int residentSpEffectId2_;
    public int ResidentSpEffectId2 {
      get { return residentSpEffectId2_; }
      set {
        residentSpEffectId2_ = value;
      }
    }

    /// <summary>Field number for the "ResidentSpEffectId3" field.</summary>
    public const int ResidentSpEffectId3FieldNumber = 26;
    private int residentSpEffectId3_;
    public int ResidentSpEffectId3 {
      get { return residentSpEffectId3_; }
      set {
        residentSpEffectId3_ = value;
      }
    }

    /// <summary>Field number for the "MaterialSetId" field.</summary>
    public const int MaterialSetIdFieldNumber = 27;
    private int materialSetId_;
    public int MaterialSetId {
      get { return materialSetId_; }
      set {
        materialSetId_ = value;
      }
    }

    /// <summary>Field number for the "OriginEquipWep" field.</summary>
    public const int OriginEquipWepFieldNumber = 28;
    private int originEquipWep_;
    public int OriginEquipWep {
      get { return originEquipWep_; }
      set {
        originEquipWep_ = value;
      }
    }

    /// <summary>Field number for the "OriginEquipWep1" field.</summary>
    public const int OriginEquipWep1FieldNumber = 29;
    private int originEquipWep1_;
    public int OriginEquipWep1 {
      get { return originEquipWep1_; }
      set {
        originEquipWep1_ = value;
      }
    }

    /// <summary>Field number for the "OriginEquipWep2" field.</summary>
    public const int OriginEquipWep2FieldNumber = 30;
    private int originEquipWep2_;
    public int OriginEquipWep2 {
      get { return originEquipWep2_; }
      set {
        originEquipWep2_ = value;
      }
    }

    /// <summary>Field number for the "OriginEquipWep3" field.</summary>
    public const int OriginEquipWep3FieldNumber = 31;
    private int originEquipWep3_;
    public int OriginEquipWep3 {
      get { return originEquipWep3_; }
      set {
        originEquipWep3_ = value;
      }
    }

    /// <summary>Field number for the "OriginEquipWep4" field.</summary>
    public const int OriginEquipWep4FieldNumber = 32;
    private int originEquipWep4_;
    public int OriginEquipWep4 {
      get { return originEquipWep4_; }
      set {
        originEquipWep4_ = value;
      }
    }

    /// <summary>Field number for the "OriginEquipWep5" field.</summary>
    public const int OriginEquipWep5FieldNumber = 33;
    private int originEquipWep5_;
    public int OriginEquipWep5 {
      get { return originEquipWep5_; }
      set {
        originEquipWep5_ = value;
      }
    }

    /// <summary>Field number for the "OriginEquipWep6" field.</summary>
    public const int OriginEquipWep6FieldNumber = 34;
    private int originEquipWep6_;
    public int OriginEquipWep6 {
      get { return originEquipWep6_; }
      set {
        originEquipWep6_ = value;
      }
    }

    /// <summary>Field number for the "OriginEquipWep7" field.</summary>
    public const int OriginEquipWep7FieldNumber = 35;
    private int originEquipWep7_;
    public int OriginEquipWep7 {
      get { return originEquipWep7_; }
      set {
        originEquipWep7_ = value;
      }
    }

    /// <summary>Field number for the "OriginEquipWep8" field.</summary>
    public const int OriginEquipWep8FieldNumber = 36;
    private int originEquipWep8_;
    public int OriginEquipWep8 {
      get { return originEquipWep8_; }
      set {
        originEquipWep8_ = value;
      }
    }

    /// <summary>Field number for the "OriginEquipWep9" field.</summary>
    public const int OriginEquipWep9FieldNumber = 37;
    private int originEquipWep9_;
    public int OriginEquipWep9 {
      get { return originEquipWep9_; }
      set {
        originEquipWep9_ = value;
      }
    }

    /// <summary>Field number for the "OriginEquipWep10" field.</summary>
    public const int OriginEquipWep10FieldNumber = 38;
    private int originEquipWep10_;
    public int OriginEquipWep10 {
      get { return originEquipWep10_; }
      set {
        originEquipWep10_ = value;
      }
    }

    /// <summary>Field number for the "OriginEquipWep11" field.</summary>
    public const int OriginEquipWep11FieldNumber = 39;
    private int originEquipWep11_;
    public int OriginEquipWep11 {
      get { return originEquipWep11_; }
      set {
        originEquipWep11_ = value;
      }
    }

    /// <summary>Field number for the "OriginEquipWep12" field.</summary>
    public const int OriginEquipWep12FieldNumber = 40;
    private int originEquipWep12_;
    public int OriginEquipWep12 {
      get { return originEquipWep12_; }
      set {
        originEquipWep12_ = value;
      }
    }

    /// <summary>Field number for the "OriginEquipWep13" field.</summary>
    public const int OriginEquipWep13FieldNumber = 41;
    private int originEquipWep13_;
    public int OriginEquipWep13 {
      get { return originEquipWep13_; }
      set {
        originEquipWep13_ = value;
      }
    }

    /// <summary>Field number for the "OriginEquipWep14" field.</summary>
    public const int OriginEquipWep14FieldNumber = 42;
    private int originEquipWep14_;
    public int OriginEquipWep14 {
      get { return originEquipWep14_; }
      set {
        originEquipWep14_ = value;
      }
    }

    /// <summary>Field number for the "OriginEquipWep15" field.</summary>
    public const int OriginEquipWep15FieldNumber = 43;
    private int originEquipWep15_;
    public int OriginEquipWep15 {
      get { return originEquipWep15_; }
      set {
        originEquipWep15_ = value;
      }
    }

    /// <summary>Field number for the "AntiDemonDamageRate" field.</summary>
    public const int AntiDemonDamageRateFieldNumber = 44;
    private float antiDemonDamageRate_;
    public float AntiDemonDamageRate {
      get { return antiDemonDamageRate_; }
      set {
        antiDemonDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "AntSaintDamageRate" field.</summary>
    public const int AntSaintDamageRateFieldNumber = 45;
    private float antSaintDamageRate_;
    public float AntSaintDamageRate {
      get { return antSaintDamageRate_; }
      set {
        antSaintDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "AntWeakA_DamageRate" field.</summary>
    public const int AntWeakADamageRateFieldNumber = 46;
    private float antWeakADamageRate_;
    public float AntWeakADamageRate {
      get { return antWeakADamageRate_; }
      set {
        antWeakADamageRate_ = value;
      }
    }

    /// <summary>Field number for the "AntWeakB_DamageRate" field.</summary>
    public const int AntWeakBDamageRateFieldNumber = 47;
    private float antWeakBDamageRate_;
    public float AntWeakBDamageRate {
      get { return antWeakBDamageRate_; }
      set {
        antWeakBDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "VagrantItemLotId" field.</summary>
    public const int VagrantItemLotIdFieldNumber = 48;
    private int vagrantItemLotId_;
    public int VagrantItemLotId {
      get { return vagrantItemLotId_; }
      set {
        vagrantItemLotId_ = value;
      }
    }

    /// <summary>Field number for the "VagrantBonusEneDropItemLotId" field.</summary>
    public const int VagrantBonusEneDropItemLotIdFieldNumber = 49;
    private int vagrantBonusEneDropItemLotId_;
    public int VagrantBonusEneDropItemLotId {
      get { return vagrantBonusEneDropItemLotId_; }
      set {
        vagrantBonusEneDropItemLotId_ = value;
      }
    }

    /// <summary>Field number for the "VagrantItemEneDropItemLotId" field.</summary>
    public const int VagrantItemEneDropItemLotIdFieldNumber = 50;
    private int vagrantItemEneDropItemLotId_;
    public int VagrantItemEneDropItemLotId {
      get { return vagrantItemEneDropItemLotId_; }
      set {
        vagrantItemEneDropItemLotId_ = value;
      }
    }

    /// <summary>Field number for the "EquipModelId" field.</summary>
    public const int EquipModelIdFieldNumber = 51;
    private uint equipModelId_;
    public uint EquipModelId {
      get { return equipModelId_; }
      set {
        equipModelId_ = value;
      }
    }

    /// <summary>Field number for the "IconId" field.</summary>
    public const int IconIdFieldNumber = 52;
    private uint iconId_;
    public uint IconId {
      get { return iconId_; }
      set {
        iconId_ = value;
      }
    }

    /// <summary>Field number for the "Durability" field.</summary>
    public const int DurabilityFieldNumber = 53;
    private int durability_;
    public int Durability {
      get { return durability_; }
      set {
        durability_ = value;
      }
    }

    /// <summary>Field number for the "MaxDurability" field.</summary>
    public const int MaxDurabilityFieldNumber = 54;
    private int maxDurability_;
    public int MaxDurability {
      get { return maxDurability_; }
      set {
        maxDurability_ = value;
      }
    }

    /// <summary>Field number for the "ParryDamageLife" field.</summary>
    public const int ParryDamageLifeFieldNumber = 55;
    private int parryDamageLife_;
    public int ParryDamageLife {
      get { return parryDamageLife_; }
      set {
        parryDamageLife_ = value;
      }
    }

    /// <summary>Field number for the "AttackThrowEscape" field.</summary>
    public const int AttackThrowEscapeFieldNumber = 56;
    private uint attackThrowEscape_;
    public uint AttackThrowEscape {
      get { return attackThrowEscape_; }
      set {
        attackThrowEscape_ = value;
      }
    }

    /// <summary>Field number for the "AttackBasePhysics" field.</summary>
    public const int AttackBasePhysicsFieldNumber = 57;
    private int attackBasePhysics_;
    public int AttackBasePhysics {
      get { return attackBasePhysics_; }
      set {
        attackBasePhysics_ = value;
      }
    }

    /// <summary>Field number for the "AttackBaseMagic" field.</summary>
    public const int AttackBaseMagicFieldNumber = 58;
    private int attackBaseMagic_;
    public int AttackBaseMagic {
      get { return attackBaseMagic_; }
      set {
        attackBaseMagic_ = value;
      }
    }

    /// <summary>Field number for the "AttackBaseFire" field.</summary>
    public const int AttackBaseFireFieldNumber = 59;
    private int attackBaseFire_;
    public int AttackBaseFire {
      get { return attackBaseFire_; }
      set {
        attackBaseFire_ = value;
      }
    }

    /// <summary>Field number for the "AttackBaseThunder" field.</summary>
    public const int AttackBaseThunderFieldNumber = 60;
    private int attackBaseThunder_;
    public int AttackBaseThunder {
      get { return attackBaseThunder_; }
      set {
        attackBaseThunder_ = value;
      }
    }

    /// <summary>Field number for the "AttackBaseStamina" field.</summary>
    public const int AttackBaseStaminaFieldNumber = 61;
    private int attackBaseStamina_;
    public int AttackBaseStamina {
      get { return attackBaseStamina_; }
      set {
        attackBaseStamina_ = value;
      }
    }

    /// <summary>Field number for the "AttackBasePoise" field.</summary>
    public const int AttackBasePoiseFieldNumber = 62;
    private int attackBasePoise_;
    public int AttackBasePoise {
      get { return attackBasePoise_; }
      set {
        attackBasePoise_ = value;
      }
    }

    /// <summary>Field number for the "SaDurability" field.</summary>
    public const int SaDurabilityFieldNumber = 63;
    private int saDurability_;
    public int SaDurability {
      get { return saDurability_; }
      set {
        saDurability_ = value;
      }
    }

    /// <summary>Field number for the "GuardAngle" field.</summary>
    public const int GuardAngleFieldNumber = 64;
    private int guardAngle_;
    public int GuardAngle {
      get { return guardAngle_; }
      set {
        guardAngle_ = value;
      }
    }

    /// <summary>Field number for the "Stability" field.</summary>
    public const int StabilityFieldNumber = 65;
    private int stability_;
    public int Stability {
      get { return stability_; }
      set {
        stability_ = value;
      }
    }

    /// <summary>Field number for the "ReinforceTypeId" field.</summary>
    public const int ReinforceTypeIdFieldNumber = 66;
    private int reinforceTypeId_;
    public int ReinforceTypeId {
      get { return reinforceTypeId_; }
      set {
        reinforceTypeId_ = value;
      }
    }

    /// <summary>Field number for the "TrophySGradeId" field.</summary>
    public const int TrophySGradeIdFieldNumber = 67;
    private int trophySGradeId_;
    public int TrophySGradeId {
      get { return trophySGradeId_; }
      set {
        trophySGradeId_ = value;
      }
    }

    /// <summary>Field number for the "ThrophySeqId" field.</summary>
    public const int ThrophySeqIdFieldNumber = 68;
    private int throphySeqId_;
    public int ThrophySeqId {
      get { return throphySeqId_; }
      set {
        throphySeqId_ = value;
      }
    }

    /// <summary>Field number for the "ThrowAtkRate" field.</summary>
    public const int ThrowAtkRateFieldNumber = 69;
    private int throwAtkRate_;
    public int ThrowAtkRate {
      get { return throwAtkRate_; }
      set {
        throwAtkRate_ = value;
      }
    }

    /// <summary>Field number for the "BowDistRate" field.</summary>
    public const int BowDistRateFieldNumber = 70;
    private int bowDistRate_;
    public int BowDistRate {
      get { return bowDistRate_; }
      set {
        bowDistRate_ = value;
      }
    }

    /// <summary>Field number for the "EquipModelCategory" field.</summary>
    public const int EquipModelCategoryFieldNumber = 71;
    private uint equipModelCategory_;
    public uint EquipModelCategory {
      get { return equipModelCategory_; }
      set {
        equipModelCategory_ = value;
      }
    }

    /// <summary>Field number for the "EquipModelGender" field.</summary>
    public const int EquipModelGenderFieldNumber = 72;
    private uint equipModelGender_;
    public uint EquipModelGender {
      get { return equipModelGender_; }
      set {
        equipModelGender_ = value;
      }
    }

    /// <summary>Field number for the "WeaponCategory" field.</summary>
    public const int WeaponCategoryFieldNumber = 73;
    private uint weaponCategory_;
    public uint WeaponCategory {
      get { return weaponCategory_; }
      set {
        weaponCategory_ = value;
      }
    }

    /// <summary>Field number for the "MotionCategory" field.</summary>
    public const int MotionCategoryFieldNumber = 74;
    private uint motionCategory_;
    public uint MotionCategory {
      get { return motionCategory_; }
      set {
        motionCategory_ = value;
      }
    }

    /// <summary>Field number for the "GuardMotionCategory" field.</summary>
    public const int GuardMotionCategoryFieldNumber = 75;
    private uint guardMotionCategory_;
    public uint GuardMotionCategory {
      get { return guardMotionCategory_; }
      set {
        guardMotionCategory_ = value;
      }
    }

    /// <summary>Field number for the "AtkMaterial" field.</summary>
    public const int AtkMaterialFieldNumber = 76;
    private uint atkMaterial_;
    public uint AtkMaterial {
      get { return atkMaterial_; }
      set {
        atkMaterial_ = value;
      }
    }

    /// <summary>Field number for the "DefMaterial" field.</summary>
    public const int DefMaterialFieldNumber = 77;
    private uint defMaterial_;
    public uint DefMaterial {
      get { return defMaterial_; }
      set {
        defMaterial_ = value;
      }
    }

    /// <summary>Field number for the "DefSfxMaterial" field.</summary>
    public const int DefSfxMaterialFieldNumber = 78;
    private uint defSfxMaterial_;
    public uint DefSfxMaterial {
      get { return defSfxMaterial_; }
      set {
        defSfxMaterial_ = value;
      }
    }

    /// <summary>Field number for the "PhysicsStatFunc" field.</summary>
    public const int PhysicsStatFuncFieldNumber = 79;
    private uint physicsStatFunc_;
    public uint PhysicsStatFunc {
      get { return physicsStatFunc_; }
      set {
        physicsStatFunc_ = value;
      }
    }

    /// <summary>Field number for the "SpAttribute" field.</summary>
    public const int SpAttributeFieldNumber = 80;
    private uint spAttribute_;
    public uint SpAttribute {
      get { return spAttribute_; }
      set {
        spAttribute_ = value;
      }
    }

    /// <summary>Field number for the "SpAtkCategory" field.</summary>
    public const int SpAtkCategoryFieldNumber = 81;
    private uint spAtkCategory_;
    public uint SpAtkCategory {
      get { return spAtkCategory_; }
      set {
        spAtkCategory_ = value;
      }
    }

    /// <summary>Field number for the "WepMotionOneHandId" field.</summary>
    public const int WepMotionOneHandIdFieldNumber = 82;
    private uint wepMotionOneHandId_;
    public uint WepMotionOneHandId {
      get { return wepMotionOneHandId_; }
      set {
        wepMotionOneHandId_ = value;
      }
    }

    /// <summary>Field number for the "WepMotionBothHandId" field.</summary>
    public const int WepMotionBothHandIdFieldNumber = 83;
    private uint wepMotionBothHandId_;
    public uint WepMotionBothHandId {
      get { return wepMotionBothHandId_; }
      set {
        wepMotionBothHandId_ = value;
      }
    }

    /// <summary>Field number for the "ProperStrength" field.</summary>
    public const int ProperStrengthFieldNumber = 84;
    private uint properStrength_;
    public uint ProperStrength {
      get { return properStrength_; }
      set {
        properStrength_ = value;
      }
    }

    /// <summary>Field number for the "ProperAgility" field.</summary>
    public const int ProperAgilityFieldNumber = 85;
    private uint properAgility_;
    public uint ProperAgility {
      get { return properAgility_; }
      set {
        properAgility_ = value;
      }
    }

    /// <summary>Field number for the "ProperMagic" field.</summary>
    public const int ProperMagicFieldNumber = 86;
    private uint properMagic_;
    public uint ProperMagic {
      get { return properMagic_; }
      set {
        properMagic_ = value;
      }
    }

    /// <summary>Field number for the "ProperFaith" field.</summary>
    public const int ProperFaithFieldNumber = 87;
    private uint properFaith_;
    public uint ProperFaith {
      get { return properFaith_; }
      set {
        properFaith_ = value;
      }
    }

    /// <summary>Field number for the "OverStrength" field.</summary>
    public const int OverStrengthFieldNumber = 88;
    private uint overStrength_;
    public uint OverStrength {
      get { return overStrength_; }
      set {
        overStrength_ = value;
      }
    }

    /// <summary>Field number for the "AttackBaseParry" field.</summary>
    public const int AttackBaseParryFieldNumber = 89;
    private uint attackBaseParry_;
    public uint AttackBaseParry {
      get { return attackBaseParry_; }
      set {
        attackBaseParry_ = value;
      }
    }

    /// <summary>Field number for the "DefenseBaseParry" field.</summary>
    public const int DefenseBaseParryFieldNumber = 90;
    private uint defenseBaseParry_;
    public uint DefenseBaseParry {
      get { return defenseBaseParry_; }
      set {
        defenseBaseParry_ = value;
      }
    }

    /// <summary>Field number for the "GuardBaseRepel" field.</summary>
    public const int GuardBaseRepelFieldNumber = 91;
    private uint guardBaseRepel_;
    public uint GuardBaseRepel {
      get { return guardBaseRepel_; }
      set {
        guardBaseRepel_ = value;
      }
    }

    /// <summary>Field number for the "AttackBaseRepel" field.</summary>
    public const int AttackBaseRepelFieldNumber = 92;
    private uint attackBaseRepel_;
    public uint AttackBaseRepel {
      get { return attackBaseRepel_; }
      set {
        attackBaseRepel_ = value;
      }
    }

    /// <summary>Field number for the "GuardCutCancelRate" field.</summary>
    public const int GuardCutCancelRateFieldNumber = 93;
    private uint guardCutCancelRate_;
    public uint GuardCutCancelRate {
      get { return guardCutCancelRate_; }
      set {
        guardCutCancelRate_ = value;
      }
    }

    /// <summary>Field number for the "GuardLevel" field.</summary>
    public const int GuardLevelFieldNumber = 94;
    private uint guardLevel_;
    public uint GuardLevel {
      get { return guardLevel_; }
      set {
        guardLevel_ = value;
      }
    }

    /// <summary>Field number for the "SlashGuardCutRate" field.</summary>
    public const int SlashGuardCutRateFieldNumber = 95;
    private uint slashGuardCutRate_;
    public uint SlashGuardCutRate {
      get { return slashGuardCutRate_; }
      set {
        slashGuardCutRate_ = value;
      }
    }

    /// <summary>Field number for the "BlowGuardCutRate" field.</summary>
    public const int BlowGuardCutRateFieldNumber = 96;
    private uint blowGuardCutRate_;
    public uint BlowGuardCutRate {
      get { return blowGuardCutRate_; }
      set {
        blowGuardCutRate_ = value;
      }
    }

    /// <summary>Field number for the "ThrustGuardCutRate" field.</summary>
    public const int ThrustGuardCutRateFieldNumber = 97;
    private uint thrustGuardCutRate_;
    public uint ThrustGuardCutRate {
      get { return thrustGuardCutRate_; }
      set {
        thrustGuardCutRate_ = value;
      }
    }

    /// <summary>Field number for the "PoisonGuardResist" field.</summary>
    public const int PoisonGuardResistFieldNumber = 98;
    private uint poisonGuardResist_;
    public uint PoisonGuardResist {
      get { return poisonGuardResist_; }
      set {
        poisonGuardResist_ = value;
      }
    }

    /// <summary>Field number for the "DiseaseGuardResist" field.</summary>
    public const int DiseaseGuardResistFieldNumber = 99;
    private uint diseaseGuardResist_;
    public uint DiseaseGuardResist {
      get { return diseaseGuardResist_; }
      set {
        diseaseGuardResist_ = value;
      }
    }

    /// <summary>Field number for the "BloodGuardResist" field.</summary>
    public const int BloodGuardResistFieldNumber = 100;
    private uint bloodGuardResist_;
    public uint BloodGuardResist {
      get { return bloodGuardResist_; }
      set {
        bloodGuardResist_ = value;
      }
    }

    /// <summary>Field number for the "CurseGuardResist" field.</summary>
    public const int CurseGuardResistFieldNumber = 101;
    private uint curseGuardResist_;
    public uint CurseGuardResist {
      get { return curseGuardResist_; }
      set {
        curseGuardResist_ = value;
      }
    }

    /// <summary>Field number for the "IsDurabilityDivergence" field.</summary>
    public const int IsDurabilityDivergenceFieldNumber = 102;
    private uint isDurabilityDivergence_;
    public uint IsDurabilityDivergence {
      get { return isDurabilityDivergence_; }
      set {
        isDurabilityDivergence_ = value;
      }
    }

    /// <summary>Field number for the "RightHandEquipable" field.</summary>
    public const int RightHandEquipableFieldNumber = 103;
    private bool rightHandEquipable_;
    public bool RightHandEquipable {
      get { return rightHandEquipable_; }
      set {
        rightHandEquipable_ = value;
      }
    }

    /// <summary>Field number for the "LeftHandEquipable" field.</summary>
    public const int LeftHandEquipableFieldNumber = 104;
    private bool leftHandEquipable_;
    public bool LeftHandEquipable {
      get { return leftHandEquipable_; }
      set {
        leftHandEquipable_ = value;
      }
    }

    /// <summary>Field number for the "Buffs" field.</summary>
    public const int BuffsFieldNumber = 105;
    private uint buffs_;
    public uint Buffs {
      get { return buffs_; }
      set {
        buffs_ = value;
      }
    }

    /// <summary>Field number for the "MagicStatFunc" field.</summary>
    public const int MagicStatFuncFieldNumber = 106;
    private uint magicStatFunc_;
    public uint MagicStatFunc {
      get { return magicStatFunc_; }
      set {
        magicStatFunc_ = value;
      }
    }

    /// <summary>Field number for the "FireStatFunc" field.</summary>
    public const int FireStatFuncFieldNumber = 107;
    private uint fireStatFunc_;
    public uint FireStatFunc {
      get { return fireStatFunc_; }
      set {
        fireStatFunc_ = value;
      }
    }

    /// <summary>Field number for the "ThunderStatFunc" field.</summary>
    public const int ThunderStatFuncFieldNumber = 108;
    private uint thunderStatFunc_;
    public uint ThunderStatFunc {
      get { return thunderStatFunc_; }
      set {
        thunderStatFunc_ = value;
      }
    }

    /// <summary>Field number for the "AttackBaseDark" field.</summary>
    public const int AttackBaseDarkFieldNumber = 109;
    private int attackBaseDark_;
    public int AttackBaseDark {
      get { return attackBaseDark_; }
      set {
        attackBaseDark_ = value;
      }
    }

    /// <summary>Field number for the "DarkStatFunc" field.</summary>
    public const int DarkStatFuncFieldNumber = 110;
    private uint darkStatFunc_;
    public uint DarkStatFunc {
      get { return darkStatFunc_; }
      set {
        darkStatFunc_ = value;
      }
    }

    /// <summary>Field number for the "PoisonStatFunc" field.</summary>
    public const int PoisonStatFuncFieldNumber = 111;
    private uint poisonStatFunc_;
    public uint PoisonStatFunc {
      get { return poisonStatFunc_; }
      set {
        poisonStatFunc_ = value;
      }
    }

    /// <summary>Field number for the "BleedStatFunc" field.</summary>
    public const int BleedStatFuncFieldNumber = 112;
    private uint bleedStatFunc_;
    public uint BleedStatFunc {
      get { return bleedStatFunc_; }
      set {
        bleedStatFunc_ = value;
      }
    }

    /// <summary>Field number for the "ProperLuck" field.</summary>
    public const int ProperLuckFieldNumber = 113;
    private uint properLuck_;
    public uint ProperLuck {
      get { return properLuck_; }
      set {
        properLuck_ = value;
      }
    }

    /// <summary>Field number for the "WeaponArt" field.</summary>
    public const int WeaponArtFieldNumber = 114;
    private uint weaponArt_;
    public uint WeaponArt {
      get { return weaponArt_; }
      set {
        weaponArt_ = value;
      }
    }

    /// <summary>Field number for the "CorrectLuck" field.</summary>
    public const int CorrectLuckFieldNumber = 115;
    private float correctLuck_;
    public float CorrectLuck {
      get { return correctLuck_; }
      set {
        correctLuck_ = value;
      }
    }

    /// <summary>Field number for the "WeaponClass" field.</summary>
    public const int WeaponClassFieldNumber = 116;
    private int weaponClass_;
    public int WeaponClass {
      get { return weaponClass_; }
      set {
        weaponClass_ = value;
      }
    }

    /// <summary>Field number for the "AecpId" field.</summary>
    public const int AecpIdFieldNumber = 117;
    private int aecpId_;
    public int AecpId {
      get { return aecpId_; }
      set {
        aecpId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as EquipParamWeapon);
    }

    public bool Equals(EquipParamWeapon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Index != other.Index) return false;
      if (Offset != other.Offset) return false;
      if (BehaviorVariationId != other.BehaviorVariationId) return false;
      if (SortId != other.SortId) return false;
      if (WanderingEquipId != other.WanderingEquipId) return false;
      if (Weight != other.Weight) return false;
      if (WeaponWeightRate != other.WeaponWeightRate) return false;
      if (FixPrice != other.FixPrice) return false;
      if (BasicPrice != other.BasicPrice) return false;
      if (SellValue != other.SellValue) return false;
      if (CorrectStrength != other.CorrectStrength) return false;
      if (CorrectAgility != other.CorrectAgility) return false;
      if (CorrectMagic != other.CorrectMagic) return false;
      if (CorrectFaith != other.CorrectFaith) return false;
      if (PhysGuardCutRate != other.PhysGuardCutRate) return false;
      if (MagGuardCutRate != other.MagGuardCutRate) return false;
      if (FireGuardCutRate != other.FireGuardCutRate) return false;
      if (ThunGuardCutRate != other.ThunGuardCutRate) return false;
      if (SpEffectBehaviorId1 != other.SpEffectBehaviorId1) return false;
      if (SpEffectBehaviorId2 != other.SpEffectBehaviorId2) return false;
      if (SpEffectBehaviorId3 != other.SpEffectBehaviorId3) return false;
      if (ResidentSpEffectId1 != other.ResidentSpEffectId1) return false;
      if (ResidentSpEffectId2 != other.ResidentSpEffectId2) return false;
      if (ResidentSpEffectId3 != other.ResidentSpEffectId3) return false;
      if (MaterialSetId != other.MaterialSetId) return false;
      if (OriginEquipWep != other.OriginEquipWep) return false;
      if (OriginEquipWep1 != other.OriginEquipWep1) return false;
      if (OriginEquipWep2 != other.OriginEquipWep2) return false;
      if (OriginEquipWep3 != other.OriginEquipWep3) return false;
      if (OriginEquipWep4 != other.OriginEquipWep4) return false;
      if (OriginEquipWep5 != other.OriginEquipWep5) return false;
      if (OriginEquipWep6 != other.OriginEquipWep6) return false;
      if (OriginEquipWep7 != other.OriginEquipWep7) return false;
      if (OriginEquipWep8 != other.OriginEquipWep8) return false;
      if (OriginEquipWep9 != other.OriginEquipWep9) return false;
      if (OriginEquipWep10 != other.OriginEquipWep10) return false;
      if (OriginEquipWep11 != other.OriginEquipWep11) return false;
      if (OriginEquipWep12 != other.OriginEquipWep12) return false;
      if (OriginEquipWep13 != other.OriginEquipWep13) return false;
      if (OriginEquipWep14 != other.OriginEquipWep14) return false;
      if (OriginEquipWep15 != other.OriginEquipWep15) return false;
      if (AntiDemonDamageRate != other.AntiDemonDamageRate) return false;
      if (AntSaintDamageRate != other.AntSaintDamageRate) return false;
      if (AntWeakADamageRate != other.AntWeakADamageRate) return false;
      if (AntWeakBDamageRate != other.AntWeakBDamageRate) return false;
      if (VagrantItemLotId != other.VagrantItemLotId) return false;
      if (VagrantBonusEneDropItemLotId != other.VagrantBonusEneDropItemLotId) return false;
      if (VagrantItemEneDropItemLotId != other.VagrantItemEneDropItemLotId) return false;
      if (EquipModelId != other.EquipModelId) return false;
      if (IconId != other.IconId) return false;
      if (Durability != other.Durability) return false;
      if (MaxDurability != other.MaxDurability) return false;
      if (ParryDamageLife != other.ParryDamageLife) return false;
      if (AttackThrowEscape != other.AttackThrowEscape) return false;
      if (AttackBasePhysics != other.AttackBasePhysics) return false;
      if (AttackBaseMagic != other.AttackBaseMagic) return false;
      if (AttackBaseFire != other.AttackBaseFire) return false;
      if (AttackBaseThunder != other.AttackBaseThunder) return false;
      if (AttackBaseStamina != other.AttackBaseStamina) return false;
      if (AttackBasePoise != other.AttackBasePoise) return false;
      if (SaDurability != other.SaDurability) return false;
      if (GuardAngle != other.GuardAngle) return false;
      if (Stability != other.Stability) return false;
      if (ReinforceTypeId != other.ReinforceTypeId) return false;
      if (TrophySGradeId != other.TrophySGradeId) return false;
      if (ThrophySeqId != other.ThrophySeqId) return false;
      if (ThrowAtkRate != other.ThrowAtkRate) return false;
      if (BowDistRate != other.BowDistRate) return false;
      if (EquipModelCategory != other.EquipModelCategory) return false;
      if (EquipModelGender != other.EquipModelGender) return false;
      if (WeaponCategory != other.WeaponCategory) return false;
      if (MotionCategory != other.MotionCategory) return false;
      if (GuardMotionCategory != other.GuardMotionCategory) return false;
      if (AtkMaterial != other.AtkMaterial) return false;
      if (DefMaterial != other.DefMaterial) return false;
      if (DefSfxMaterial != other.DefSfxMaterial) return false;
      if (PhysicsStatFunc != other.PhysicsStatFunc) return false;
      if (SpAttribute != other.SpAttribute) return false;
      if (SpAtkCategory != other.SpAtkCategory) return false;
      if (WepMotionOneHandId != other.WepMotionOneHandId) return false;
      if (WepMotionBothHandId != other.WepMotionBothHandId) return false;
      if (ProperStrength != other.ProperStrength) return false;
      if (ProperAgility != other.ProperAgility) return false;
      if (ProperMagic != other.ProperMagic) return false;
      if (ProperFaith != other.ProperFaith) return false;
      if (OverStrength != other.OverStrength) return false;
      if (AttackBaseParry != other.AttackBaseParry) return false;
      if (DefenseBaseParry != other.DefenseBaseParry) return false;
      if (GuardBaseRepel != other.GuardBaseRepel) return false;
      if (AttackBaseRepel != other.AttackBaseRepel) return false;
      if (GuardCutCancelRate != other.GuardCutCancelRate) return false;
      if (GuardLevel != other.GuardLevel) return false;
      if (SlashGuardCutRate != other.SlashGuardCutRate) return false;
      if (BlowGuardCutRate != other.BlowGuardCutRate) return false;
      if (ThrustGuardCutRate != other.ThrustGuardCutRate) return false;
      if (PoisonGuardResist != other.PoisonGuardResist) return false;
      if (DiseaseGuardResist != other.DiseaseGuardResist) return false;
      if (BloodGuardResist != other.BloodGuardResist) return false;
      if (CurseGuardResist != other.CurseGuardResist) return false;
      if (IsDurabilityDivergence != other.IsDurabilityDivergence) return false;
      if (RightHandEquipable != other.RightHandEquipable) return false;
      if (LeftHandEquipable != other.LeftHandEquipable) return false;
      if (Buffs != other.Buffs) return false;
      if (MagicStatFunc != other.MagicStatFunc) return false;
      if (FireStatFunc != other.FireStatFunc) return false;
      if (ThunderStatFunc != other.ThunderStatFunc) return false;
      if (AttackBaseDark != other.AttackBaseDark) return false;
      if (DarkStatFunc != other.DarkStatFunc) return false;
      if (PoisonStatFunc != other.PoisonStatFunc) return false;
      if (BleedStatFunc != other.BleedStatFunc) return false;
      if (ProperLuck != other.ProperLuck) return false;
      if (WeaponArt != other.WeaponArt) return false;
      if (CorrectLuck != other.CorrectLuck) return false;
      if (WeaponClass != other.WeaponClass) return false;
      if (AecpId != other.AecpId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (BehaviorVariationId != 0) hash ^= BehaviorVariationId.GetHashCode();
      if (SortId != 0) hash ^= SortId.GetHashCode();
      if (WanderingEquipId != 0) hash ^= WanderingEquipId.GetHashCode();
      if (Weight != 0F) hash ^= Weight.GetHashCode();
      if (WeaponWeightRate != 0) hash ^= WeaponWeightRate.GetHashCode();
      if (FixPrice != 0) hash ^= FixPrice.GetHashCode();
      if (BasicPrice != 0) hash ^= BasicPrice.GetHashCode();
      if (SellValue != 0) hash ^= SellValue.GetHashCode();
      if (CorrectStrength != 0F) hash ^= CorrectStrength.GetHashCode();
      if (CorrectAgility != 0F) hash ^= CorrectAgility.GetHashCode();
      if (CorrectMagic != 0F) hash ^= CorrectMagic.GetHashCode();
      if (CorrectFaith != 0F) hash ^= CorrectFaith.GetHashCode();
      if (PhysGuardCutRate != 0F) hash ^= PhysGuardCutRate.GetHashCode();
      if (MagGuardCutRate != 0F) hash ^= MagGuardCutRate.GetHashCode();
      if (FireGuardCutRate != 0F) hash ^= FireGuardCutRate.GetHashCode();
      if (ThunGuardCutRate != 0F) hash ^= ThunGuardCutRate.GetHashCode();
      if (SpEffectBehaviorId1 != 0) hash ^= SpEffectBehaviorId1.GetHashCode();
      if (SpEffectBehaviorId2 != 0) hash ^= SpEffectBehaviorId2.GetHashCode();
      if (SpEffectBehaviorId3 != 0) hash ^= SpEffectBehaviorId3.GetHashCode();
      if (ResidentSpEffectId1 != 0) hash ^= ResidentSpEffectId1.GetHashCode();
      if (ResidentSpEffectId2 != 0) hash ^= ResidentSpEffectId2.GetHashCode();
      if (ResidentSpEffectId3 != 0) hash ^= ResidentSpEffectId3.GetHashCode();
      if (MaterialSetId != 0) hash ^= MaterialSetId.GetHashCode();
      if (OriginEquipWep != 0) hash ^= OriginEquipWep.GetHashCode();
      if (OriginEquipWep1 != 0) hash ^= OriginEquipWep1.GetHashCode();
      if (OriginEquipWep2 != 0) hash ^= OriginEquipWep2.GetHashCode();
      if (OriginEquipWep3 != 0) hash ^= OriginEquipWep3.GetHashCode();
      if (OriginEquipWep4 != 0) hash ^= OriginEquipWep4.GetHashCode();
      if (OriginEquipWep5 != 0) hash ^= OriginEquipWep5.GetHashCode();
      if (OriginEquipWep6 != 0) hash ^= OriginEquipWep6.GetHashCode();
      if (OriginEquipWep7 != 0) hash ^= OriginEquipWep7.GetHashCode();
      if (OriginEquipWep8 != 0) hash ^= OriginEquipWep8.GetHashCode();
      if (OriginEquipWep9 != 0) hash ^= OriginEquipWep9.GetHashCode();
      if (OriginEquipWep10 != 0) hash ^= OriginEquipWep10.GetHashCode();
      if (OriginEquipWep11 != 0) hash ^= OriginEquipWep11.GetHashCode();
      if (OriginEquipWep12 != 0) hash ^= OriginEquipWep12.GetHashCode();
      if (OriginEquipWep13 != 0) hash ^= OriginEquipWep13.GetHashCode();
      if (OriginEquipWep14 != 0) hash ^= OriginEquipWep14.GetHashCode();
      if (OriginEquipWep15 != 0) hash ^= OriginEquipWep15.GetHashCode();
      if (AntiDemonDamageRate != 0F) hash ^= AntiDemonDamageRate.GetHashCode();
      if (AntSaintDamageRate != 0F) hash ^= AntSaintDamageRate.GetHashCode();
      if (AntWeakADamageRate != 0F) hash ^= AntWeakADamageRate.GetHashCode();
      if (AntWeakBDamageRate != 0F) hash ^= AntWeakBDamageRate.GetHashCode();
      if (VagrantItemLotId != 0) hash ^= VagrantItemLotId.GetHashCode();
      if (VagrantBonusEneDropItemLotId != 0) hash ^= VagrantBonusEneDropItemLotId.GetHashCode();
      if (VagrantItemEneDropItemLotId != 0) hash ^= VagrantItemEneDropItemLotId.GetHashCode();
      if (EquipModelId != 0) hash ^= EquipModelId.GetHashCode();
      if (IconId != 0) hash ^= IconId.GetHashCode();
      if (Durability != 0) hash ^= Durability.GetHashCode();
      if (MaxDurability != 0) hash ^= MaxDurability.GetHashCode();
      if (ParryDamageLife != 0) hash ^= ParryDamageLife.GetHashCode();
      if (AttackThrowEscape != 0) hash ^= AttackThrowEscape.GetHashCode();
      if (AttackBasePhysics != 0) hash ^= AttackBasePhysics.GetHashCode();
      if (AttackBaseMagic != 0) hash ^= AttackBaseMagic.GetHashCode();
      if (AttackBaseFire != 0) hash ^= AttackBaseFire.GetHashCode();
      if (AttackBaseThunder != 0) hash ^= AttackBaseThunder.GetHashCode();
      if (AttackBaseStamina != 0) hash ^= AttackBaseStamina.GetHashCode();
      if (AttackBasePoise != 0) hash ^= AttackBasePoise.GetHashCode();
      if (SaDurability != 0) hash ^= SaDurability.GetHashCode();
      if (GuardAngle != 0) hash ^= GuardAngle.GetHashCode();
      if (Stability != 0) hash ^= Stability.GetHashCode();
      if (ReinforceTypeId != 0) hash ^= ReinforceTypeId.GetHashCode();
      if (TrophySGradeId != 0) hash ^= TrophySGradeId.GetHashCode();
      if (ThrophySeqId != 0) hash ^= ThrophySeqId.GetHashCode();
      if (ThrowAtkRate != 0) hash ^= ThrowAtkRate.GetHashCode();
      if (BowDistRate != 0) hash ^= BowDistRate.GetHashCode();
      if (EquipModelCategory != 0) hash ^= EquipModelCategory.GetHashCode();
      if (EquipModelGender != 0) hash ^= EquipModelGender.GetHashCode();
      if (WeaponCategory != 0) hash ^= WeaponCategory.GetHashCode();
      if (MotionCategory != 0) hash ^= MotionCategory.GetHashCode();
      if (GuardMotionCategory != 0) hash ^= GuardMotionCategory.GetHashCode();
      if (AtkMaterial != 0) hash ^= AtkMaterial.GetHashCode();
      if (DefMaterial != 0) hash ^= DefMaterial.GetHashCode();
      if (DefSfxMaterial != 0) hash ^= DefSfxMaterial.GetHashCode();
      if (PhysicsStatFunc != 0) hash ^= PhysicsStatFunc.GetHashCode();
      if (SpAttribute != 0) hash ^= SpAttribute.GetHashCode();
      if (SpAtkCategory != 0) hash ^= SpAtkCategory.GetHashCode();
      if (WepMotionOneHandId != 0) hash ^= WepMotionOneHandId.GetHashCode();
      if (WepMotionBothHandId != 0) hash ^= WepMotionBothHandId.GetHashCode();
      if (ProperStrength != 0) hash ^= ProperStrength.GetHashCode();
      if (ProperAgility != 0) hash ^= ProperAgility.GetHashCode();
      if (ProperMagic != 0) hash ^= ProperMagic.GetHashCode();
      if (ProperFaith != 0) hash ^= ProperFaith.GetHashCode();
      if (OverStrength != 0) hash ^= OverStrength.GetHashCode();
      if (AttackBaseParry != 0) hash ^= AttackBaseParry.GetHashCode();
      if (DefenseBaseParry != 0) hash ^= DefenseBaseParry.GetHashCode();
      if (GuardBaseRepel != 0) hash ^= GuardBaseRepel.GetHashCode();
      if (AttackBaseRepel != 0) hash ^= AttackBaseRepel.GetHashCode();
      if (GuardCutCancelRate != 0) hash ^= GuardCutCancelRate.GetHashCode();
      if (GuardLevel != 0) hash ^= GuardLevel.GetHashCode();
      if (SlashGuardCutRate != 0) hash ^= SlashGuardCutRate.GetHashCode();
      if (BlowGuardCutRate != 0) hash ^= BlowGuardCutRate.GetHashCode();
      if (ThrustGuardCutRate != 0) hash ^= ThrustGuardCutRate.GetHashCode();
      if (PoisonGuardResist != 0) hash ^= PoisonGuardResist.GetHashCode();
      if (DiseaseGuardResist != 0) hash ^= DiseaseGuardResist.GetHashCode();
      if (BloodGuardResist != 0) hash ^= BloodGuardResist.GetHashCode();
      if (CurseGuardResist != 0) hash ^= CurseGuardResist.GetHashCode();
      if (IsDurabilityDivergence != 0) hash ^= IsDurabilityDivergence.GetHashCode();
      if (RightHandEquipable != false) hash ^= RightHandEquipable.GetHashCode();
      if (LeftHandEquipable != false) hash ^= LeftHandEquipable.GetHashCode();
      if (Buffs != 0) hash ^= Buffs.GetHashCode();
      if (MagicStatFunc != 0) hash ^= MagicStatFunc.GetHashCode();
      if (FireStatFunc != 0) hash ^= FireStatFunc.GetHashCode();
      if (ThunderStatFunc != 0) hash ^= ThunderStatFunc.GetHashCode();
      if (AttackBaseDark != 0) hash ^= AttackBaseDark.GetHashCode();
      if (DarkStatFunc != 0) hash ^= DarkStatFunc.GetHashCode();
      if (PoisonStatFunc != 0) hash ^= PoisonStatFunc.GetHashCode();
      if (BleedStatFunc != 0) hash ^= BleedStatFunc.GetHashCode();
      if (ProperLuck != 0) hash ^= ProperLuck.GetHashCode();
      if (WeaponArt != 0) hash ^= WeaponArt.GetHashCode();
      if (CorrectLuck != 0F) hash ^= CorrectLuck.GetHashCode();
      if (WeaponClass != 0) hash ^= WeaponClass.GetHashCode();
      if (AecpId != 0) hash ^= AecpId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Index);
      }
      if (Offset != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Offset);
      }
      if (BehaviorVariationId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(BehaviorVariationId);
      }
      if (SortId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(SortId);
      }
      if (WanderingEquipId != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(WanderingEquipId);
      }
      if (Weight != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Weight);
      }
      if (WeaponWeightRate != 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(WeaponWeightRate);
      }
      if (FixPrice != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(FixPrice);
      }
      if (BasicPrice != 0) {
        output.WriteRawTag(88);
        output.WriteSInt32(BasicPrice);
      }
      if (SellValue != 0) {
        output.WriteRawTag(96);
        output.WriteSInt32(SellValue);
      }
      if (CorrectStrength != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(CorrectStrength);
      }
      if (CorrectAgility != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(CorrectAgility);
      }
      if (CorrectMagic != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(CorrectMagic);
      }
      if (CorrectFaith != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(CorrectFaith);
      }
      if (PhysGuardCutRate != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(PhysGuardCutRate);
      }
      if (MagGuardCutRate != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(MagGuardCutRate);
      }
      if (FireGuardCutRate != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(FireGuardCutRate);
      }
      if (ThunGuardCutRate != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(ThunGuardCutRate);
      }
      if (SpEffectBehaviorId1 != 0) {
        output.WriteRawTag(168, 1);
        output.WriteSInt32(SpEffectBehaviorId1);
      }
      if (SpEffectBehaviorId2 != 0) {
        output.WriteRawTag(176, 1);
        output.WriteSInt32(SpEffectBehaviorId2);
      }
      if (SpEffectBehaviorId3 != 0) {
        output.WriteRawTag(184, 1);
        output.WriteSInt32(SpEffectBehaviorId3);
      }
      if (ResidentSpEffectId1 != 0) {
        output.WriteRawTag(192, 1);
        output.WriteSInt32(ResidentSpEffectId1);
      }
      if (ResidentSpEffectId2 != 0) {
        output.WriteRawTag(200, 1);
        output.WriteSInt32(ResidentSpEffectId2);
      }
      if (ResidentSpEffectId3 != 0) {
        output.WriteRawTag(208, 1);
        output.WriteSInt32(ResidentSpEffectId3);
      }
      if (MaterialSetId != 0) {
        output.WriteRawTag(216, 1);
        output.WriteSInt32(MaterialSetId);
      }
      if (OriginEquipWep != 0) {
        output.WriteRawTag(224, 1);
        output.WriteSInt32(OriginEquipWep);
      }
      if (OriginEquipWep1 != 0) {
        output.WriteRawTag(232, 1);
        output.WriteSInt32(OriginEquipWep1);
      }
      if (OriginEquipWep2 != 0) {
        output.WriteRawTag(240, 1);
        output.WriteSInt32(OriginEquipWep2);
      }
      if (OriginEquipWep3 != 0) {
        output.WriteRawTag(248, 1);
        output.WriteSInt32(OriginEquipWep3);
      }
      if (OriginEquipWep4 != 0) {
        output.WriteRawTag(128, 2);
        output.WriteSInt32(OriginEquipWep4);
      }
      if (OriginEquipWep5 != 0) {
        output.WriteRawTag(136, 2);
        output.WriteSInt32(OriginEquipWep5);
      }
      if (OriginEquipWep6 != 0) {
        output.WriteRawTag(144, 2);
        output.WriteSInt32(OriginEquipWep6);
      }
      if (OriginEquipWep7 != 0) {
        output.WriteRawTag(152, 2);
        output.WriteSInt32(OriginEquipWep7);
      }
      if (OriginEquipWep8 != 0) {
        output.WriteRawTag(160, 2);
        output.WriteSInt32(OriginEquipWep8);
      }
      if (OriginEquipWep9 != 0) {
        output.WriteRawTag(168, 2);
        output.WriteSInt32(OriginEquipWep9);
      }
      if (OriginEquipWep10 != 0) {
        output.WriteRawTag(176, 2);
        output.WriteSInt32(OriginEquipWep10);
      }
      if (OriginEquipWep11 != 0) {
        output.WriteRawTag(184, 2);
        output.WriteSInt32(OriginEquipWep11);
      }
      if (OriginEquipWep12 != 0) {
        output.WriteRawTag(192, 2);
        output.WriteSInt32(OriginEquipWep12);
      }
      if (OriginEquipWep13 != 0) {
        output.WriteRawTag(200, 2);
        output.WriteSInt32(OriginEquipWep13);
      }
      if (OriginEquipWep14 != 0) {
        output.WriteRawTag(208, 2);
        output.WriteSInt32(OriginEquipWep14);
      }
      if (OriginEquipWep15 != 0) {
        output.WriteRawTag(216, 2);
        output.WriteSInt32(OriginEquipWep15);
      }
      if (AntiDemonDamageRate != 0F) {
        output.WriteRawTag(229, 2);
        output.WriteFloat(AntiDemonDamageRate);
      }
      if (AntSaintDamageRate != 0F) {
        output.WriteRawTag(237, 2);
        output.WriteFloat(AntSaintDamageRate);
      }
      if (AntWeakADamageRate != 0F) {
        output.WriteRawTag(245, 2);
        output.WriteFloat(AntWeakADamageRate);
      }
      if (AntWeakBDamageRate != 0F) {
        output.WriteRawTag(253, 2);
        output.WriteFloat(AntWeakBDamageRate);
      }
      if (VagrantItemLotId != 0) {
        output.WriteRawTag(128, 3);
        output.WriteSInt32(VagrantItemLotId);
      }
      if (VagrantBonusEneDropItemLotId != 0) {
        output.WriteRawTag(136, 3);
        output.WriteSInt32(VagrantBonusEneDropItemLotId);
      }
      if (VagrantItemEneDropItemLotId != 0) {
        output.WriteRawTag(144, 3);
        output.WriteSInt32(VagrantItemEneDropItemLotId);
      }
      if (EquipModelId != 0) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(EquipModelId);
      }
      if (IconId != 0) {
        output.WriteRawTag(160, 3);
        output.WriteUInt32(IconId);
      }
      if (Durability != 0) {
        output.WriteRawTag(168, 3);
        output.WriteSInt32(Durability);
      }
      if (MaxDurability != 0) {
        output.WriteRawTag(176, 3);
        output.WriteSInt32(MaxDurability);
      }
      if (ParryDamageLife != 0) {
        output.WriteRawTag(184, 3);
        output.WriteSInt32(ParryDamageLife);
      }
      if (AttackThrowEscape != 0) {
        output.WriteRawTag(192, 3);
        output.WriteUInt32(AttackThrowEscape);
      }
      if (AttackBasePhysics != 0) {
        output.WriteRawTag(200, 3);
        output.WriteSInt32(AttackBasePhysics);
      }
      if (AttackBaseMagic != 0) {
        output.WriteRawTag(208, 3);
        output.WriteSInt32(AttackBaseMagic);
      }
      if (AttackBaseFire != 0) {
        output.WriteRawTag(216, 3);
        output.WriteSInt32(AttackBaseFire);
      }
      if (AttackBaseThunder != 0) {
        output.WriteRawTag(224, 3);
        output.WriteSInt32(AttackBaseThunder);
      }
      if (AttackBaseStamina != 0) {
        output.WriteRawTag(232, 3);
        output.WriteSInt32(AttackBaseStamina);
      }
      if (AttackBasePoise != 0) {
        output.WriteRawTag(240, 3);
        output.WriteSInt32(AttackBasePoise);
      }
      if (SaDurability != 0) {
        output.WriteRawTag(248, 3);
        output.WriteSInt32(SaDurability);
      }
      if (GuardAngle != 0) {
        output.WriteRawTag(128, 4);
        output.WriteSInt32(GuardAngle);
      }
      if (Stability != 0) {
        output.WriteRawTag(136, 4);
        output.WriteSInt32(Stability);
      }
      if (ReinforceTypeId != 0) {
        output.WriteRawTag(144, 4);
        output.WriteSInt32(ReinforceTypeId);
      }
      if (TrophySGradeId != 0) {
        output.WriteRawTag(152, 4);
        output.WriteSInt32(TrophySGradeId);
      }
      if (ThrophySeqId != 0) {
        output.WriteRawTag(160, 4);
        output.WriteSInt32(ThrophySeqId);
      }
      if (ThrowAtkRate != 0) {
        output.WriteRawTag(168, 4);
        output.WriteSInt32(ThrowAtkRate);
      }
      if (BowDistRate != 0) {
        output.WriteRawTag(176, 4);
        output.WriteSInt32(BowDistRate);
      }
      if (EquipModelCategory != 0) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(EquipModelCategory);
      }
      if (EquipModelGender != 0) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(EquipModelGender);
      }
      if (WeaponCategory != 0) {
        output.WriteRawTag(200, 4);
        output.WriteUInt32(WeaponCategory);
      }
      if (MotionCategory != 0) {
        output.WriteRawTag(208, 4);
        output.WriteUInt32(MotionCategory);
      }
      if (GuardMotionCategory != 0) {
        output.WriteRawTag(216, 4);
        output.WriteUInt32(GuardMotionCategory);
      }
      if (AtkMaterial != 0) {
        output.WriteRawTag(224, 4);
        output.WriteUInt32(AtkMaterial);
      }
      if (DefMaterial != 0) {
        output.WriteRawTag(232, 4);
        output.WriteUInt32(DefMaterial);
      }
      if (DefSfxMaterial != 0) {
        output.WriteRawTag(240, 4);
        output.WriteUInt32(DefSfxMaterial);
      }
      if (PhysicsStatFunc != 0) {
        output.WriteRawTag(248, 4);
        output.WriteUInt32(PhysicsStatFunc);
      }
      if (SpAttribute != 0) {
        output.WriteRawTag(128, 5);
        output.WriteUInt32(SpAttribute);
      }
      if (SpAtkCategory != 0) {
        output.WriteRawTag(136, 5);
        output.WriteUInt32(SpAtkCategory);
      }
      if (WepMotionOneHandId != 0) {
        output.WriteRawTag(144, 5);
        output.WriteUInt32(WepMotionOneHandId);
      }
      if (WepMotionBothHandId != 0) {
        output.WriteRawTag(152, 5);
        output.WriteUInt32(WepMotionBothHandId);
      }
      if (ProperStrength != 0) {
        output.WriteRawTag(160, 5);
        output.WriteUInt32(ProperStrength);
      }
      if (ProperAgility != 0) {
        output.WriteRawTag(168, 5);
        output.WriteUInt32(ProperAgility);
      }
      if (ProperMagic != 0) {
        output.WriteRawTag(176, 5);
        output.WriteUInt32(ProperMagic);
      }
      if (ProperFaith != 0) {
        output.WriteRawTag(184, 5);
        output.WriteUInt32(ProperFaith);
      }
      if (OverStrength != 0) {
        output.WriteRawTag(192, 5);
        output.WriteUInt32(OverStrength);
      }
      if (AttackBaseParry != 0) {
        output.WriteRawTag(200, 5);
        output.WriteUInt32(AttackBaseParry);
      }
      if (DefenseBaseParry != 0) {
        output.WriteRawTag(208, 5);
        output.WriteUInt32(DefenseBaseParry);
      }
      if (GuardBaseRepel != 0) {
        output.WriteRawTag(216, 5);
        output.WriteUInt32(GuardBaseRepel);
      }
      if (AttackBaseRepel != 0) {
        output.WriteRawTag(224, 5);
        output.WriteUInt32(AttackBaseRepel);
      }
      if (GuardCutCancelRate != 0) {
        output.WriteRawTag(232, 5);
        output.WriteUInt32(GuardCutCancelRate);
      }
      if (GuardLevel != 0) {
        output.WriteRawTag(240, 5);
        output.WriteUInt32(GuardLevel);
      }
      if (SlashGuardCutRate != 0) {
        output.WriteRawTag(248, 5);
        output.WriteUInt32(SlashGuardCutRate);
      }
      if (BlowGuardCutRate != 0) {
        output.WriteRawTag(128, 6);
        output.WriteUInt32(BlowGuardCutRate);
      }
      if (ThrustGuardCutRate != 0) {
        output.WriteRawTag(136, 6);
        output.WriteUInt32(ThrustGuardCutRate);
      }
      if (PoisonGuardResist != 0) {
        output.WriteRawTag(144, 6);
        output.WriteUInt32(PoisonGuardResist);
      }
      if (DiseaseGuardResist != 0) {
        output.WriteRawTag(152, 6);
        output.WriteUInt32(DiseaseGuardResist);
      }
      if (BloodGuardResist != 0) {
        output.WriteRawTag(160, 6);
        output.WriteUInt32(BloodGuardResist);
      }
      if (CurseGuardResist != 0) {
        output.WriteRawTag(168, 6);
        output.WriteUInt32(CurseGuardResist);
      }
      if (IsDurabilityDivergence != 0) {
        output.WriteRawTag(176, 6);
        output.WriteUInt32(IsDurabilityDivergence);
      }
      if (RightHandEquipable != false) {
        output.WriteRawTag(184, 6);
        output.WriteBool(RightHandEquipable);
      }
      if (LeftHandEquipable != false) {
        output.WriteRawTag(192, 6);
        output.WriteBool(LeftHandEquipable);
      }
      if (Buffs != 0) {
        output.WriteRawTag(200, 6);
        output.WriteUInt32(Buffs);
      }
      if (MagicStatFunc != 0) {
        output.WriteRawTag(208, 6);
        output.WriteUInt32(MagicStatFunc);
      }
      if (FireStatFunc != 0) {
        output.WriteRawTag(216, 6);
        output.WriteUInt32(FireStatFunc);
      }
      if (ThunderStatFunc != 0) {
        output.WriteRawTag(224, 6);
        output.WriteUInt32(ThunderStatFunc);
      }
      if (AttackBaseDark != 0) {
        output.WriteRawTag(232, 6);
        output.WriteSInt32(AttackBaseDark);
      }
      if (DarkStatFunc != 0) {
        output.WriteRawTag(240, 6);
        output.WriteUInt32(DarkStatFunc);
      }
      if (PoisonStatFunc != 0) {
        output.WriteRawTag(248, 6);
        output.WriteUInt32(PoisonStatFunc);
      }
      if (BleedStatFunc != 0) {
        output.WriteRawTag(128, 7);
        output.WriteUInt32(BleedStatFunc);
      }
      if (ProperLuck != 0) {
        output.WriteRawTag(136, 7);
        output.WriteUInt32(ProperLuck);
      }
      if (WeaponArt != 0) {
        output.WriteRawTag(144, 7);
        output.WriteUInt32(WeaponArt);
      }
      if (CorrectLuck != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(CorrectLuck);
      }
      if (WeaponClass != 0) {
        output.WriteRawTag(160, 7);
        output.WriteSInt32(WeaponClass);
      }
      if (AecpId != 0) {
        output.WriteRawTag(168, 7);
        output.WriteSInt32(AecpId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Index);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Offset);
      }
      if (BehaviorVariationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BehaviorVariationId);
      }
      if (SortId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SortId);
      }
      if (WanderingEquipId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(WanderingEquipId);
      }
      if (Weight != 0F) {
        size += 1 + 4;
      }
      if (WeaponWeightRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(WeaponWeightRate);
      }
      if (FixPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(FixPrice);
      }
      if (BasicPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BasicPrice);
      }
      if (SellValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SellValue);
      }
      if (CorrectStrength != 0F) {
        size += 1 + 4;
      }
      if (CorrectAgility != 0F) {
        size += 1 + 4;
      }
      if (CorrectMagic != 0F) {
        size += 1 + 4;
      }
      if (CorrectFaith != 0F) {
        size += 2 + 4;
      }
      if (PhysGuardCutRate != 0F) {
        size += 2 + 4;
      }
      if (MagGuardCutRate != 0F) {
        size += 2 + 4;
      }
      if (FireGuardCutRate != 0F) {
        size += 2 + 4;
      }
      if (ThunGuardCutRate != 0F) {
        size += 2 + 4;
      }
      if (SpEffectBehaviorId1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SpEffectBehaviorId1);
      }
      if (SpEffectBehaviorId2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SpEffectBehaviorId2);
      }
      if (SpEffectBehaviorId3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SpEffectBehaviorId3);
      }
      if (ResidentSpEffectId1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ResidentSpEffectId1);
      }
      if (ResidentSpEffectId2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ResidentSpEffectId2);
      }
      if (ResidentSpEffectId3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ResidentSpEffectId3);
      }
      if (MaterialSetId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(MaterialSetId);
      }
      if (OriginEquipWep != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OriginEquipWep);
      }
      if (OriginEquipWep1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OriginEquipWep1);
      }
      if (OriginEquipWep2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OriginEquipWep2);
      }
      if (OriginEquipWep3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OriginEquipWep3);
      }
      if (OriginEquipWep4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OriginEquipWep4);
      }
      if (OriginEquipWep5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OriginEquipWep5);
      }
      if (OriginEquipWep6 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OriginEquipWep6);
      }
      if (OriginEquipWep7 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OriginEquipWep7);
      }
      if (OriginEquipWep8 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OriginEquipWep8);
      }
      if (OriginEquipWep9 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OriginEquipWep9);
      }
      if (OriginEquipWep10 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OriginEquipWep10);
      }
      if (OriginEquipWep11 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OriginEquipWep11);
      }
      if (OriginEquipWep12 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OriginEquipWep12);
      }
      if (OriginEquipWep13 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OriginEquipWep13);
      }
      if (OriginEquipWep14 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OriginEquipWep14);
      }
      if (OriginEquipWep15 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(OriginEquipWep15);
      }
      if (AntiDemonDamageRate != 0F) {
        size += 2 + 4;
      }
      if (AntSaintDamageRate != 0F) {
        size += 2 + 4;
      }
      if (AntWeakADamageRate != 0F) {
        size += 2 + 4;
      }
      if (AntWeakBDamageRate != 0F) {
        size += 2 + 4;
      }
      if (VagrantItemLotId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(VagrantItemLotId);
      }
      if (VagrantBonusEneDropItemLotId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(VagrantBonusEneDropItemLotId);
      }
      if (VagrantItemEneDropItemLotId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(VagrantItemEneDropItemLotId);
      }
      if (EquipModelId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EquipModelId);
      }
      if (IconId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IconId);
      }
      if (Durability != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Durability);
      }
      if (MaxDurability != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(MaxDurability);
      }
      if (ParryDamageLife != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ParryDamageLife);
      }
      if (AttackThrowEscape != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackThrowEscape);
      }
      if (AttackBasePhysics != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(AttackBasePhysics);
      }
      if (AttackBaseMagic != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(AttackBaseMagic);
      }
      if (AttackBaseFire != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(AttackBaseFire);
      }
      if (AttackBaseThunder != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(AttackBaseThunder);
      }
      if (AttackBaseStamina != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(AttackBaseStamina);
      }
      if (AttackBasePoise != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(AttackBasePoise);
      }
      if (SaDurability != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SaDurability);
      }
      if (GuardAngle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(GuardAngle);
      }
      if (Stability != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Stability);
      }
      if (ReinforceTypeId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ReinforceTypeId);
      }
      if (TrophySGradeId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(TrophySGradeId);
      }
      if (ThrophySeqId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ThrophySeqId);
      }
      if (ThrowAtkRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ThrowAtkRate);
      }
      if (BowDistRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(BowDistRate);
      }
      if (EquipModelCategory != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EquipModelCategory);
      }
      if (EquipModelGender != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EquipModelGender);
      }
      if (WeaponCategory != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WeaponCategory);
      }
      if (MotionCategory != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MotionCategory);
      }
      if (GuardMotionCategory != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GuardMotionCategory);
      }
      if (AtkMaterial != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtkMaterial);
      }
      if (DefMaterial != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DefMaterial);
      }
      if (DefSfxMaterial != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DefSfxMaterial);
      }
      if (PhysicsStatFunc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PhysicsStatFunc);
      }
      if (SpAttribute != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpAttribute);
      }
      if (SpAtkCategory != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpAtkCategory);
      }
      if (WepMotionOneHandId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WepMotionOneHandId);
      }
      if (WepMotionBothHandId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WepMotionBothHandId);
      }
      if (ProperStrength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ProperStrength);
      }
      if (ProperAgility != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ProperAgility);
      }
      if (ProperMagic != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ProperMagic);
      }
      if (ProperFaith != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ProperFaith);
      }
      if (OverStrength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OverStrength);
      }
      if (AttackBaseParry != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackBaseParry);
      }
      if (DefenseBaseParry != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DefenseBaseParry);
      }
      if (GuardBaseRepel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GuardBaseRepel);
      }
      if (AttackBaseRepel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackBaseRepel);
      }
      if (GuardCutCancelRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GuardCutCancelRate);
      }
      if (GuardLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GuardLevel);
      }
      if (SlashGuardCutRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SlashGuardCutRate);
      }
      if (BlowGuardCutRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BlowGuardCutRate);
      }
      if (ThrustGuardCutRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ThrustGuardCutRate);
      }
      if (PoisonGuardResist != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PoisonGuardResist);
      }
      if (DiseaseGuardResist != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DiseaseGuardResist);
      }
      if (BloodGuardResist != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BloodGuardResist);
      }
      if (CurseGuardResist != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CurseGuardResist);
      }
      if (IsDurabilityDivergence != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IsDurabilityDivergence);
      }
      if (RightHandEquipable != false) {
        size += 2 + 1;
      }
      if (LeftHandEquipable != false) {
        size += 2 + 1;
      }
      if (Buffs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Buffs);
      }
      if (MagicStatFunc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MagicStatFunc);
      }
      if (FireStatFunc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FireStatFunc);
      }
      if (ThunderStatFunc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ThunderStatFunc);
      }
      if (AttackBaseDark != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(AttackBaseDark);
      }
      if (DarkStatFunc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DarkStatFunc);
      }
      if (PoisonStatFunc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PoisonStatFunc);
      }
      if (BleedStatFunc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BleedStatFunc);
      }
      if (ProperLuck != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ProperLuck);
      }
      if (WeaponArt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WeaponArt);
      }
      if (CorrectLuck != 0F) {
        size += 2 + 4;
      }
      if (WeaponClass != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(WeaponClass);
      }
      if (AecpId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(AecpId);
      }
      return size;
    }

    public void MergeFrom(EquipParamWeapon other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.BehaviorVariationId != 0) {
        BehaviorVariationId = other.BehaviorVariationId;
      }
      if (other.SortId != 0) {
        SortId = other.SortId;
      }
      if (other.WanderingEquipId != 0) {
        WanderingEquipId = other.WanderingEquipId;
      }
      if (other.Weight != 0F) {
        Weight = other.Weight;
      }
      if (other.WeaponWeightRate != 0) {
        WeaponWeightRate = other.WeaponWeightRate;
      }
      if (other.FixPrice != 0) {
        FixPrice = other.FixPrice;
      }
      if (other.BasicPrice != 0) {
        BasicPrice = other.BasicPrice;
      }
      if (other.SellValue != 0) {
        SellValue = other.SellValue;
      }
      if (other.CorrectStrength != 0F) {
        CorrectStrength = other.CorrectStrength;
      }
      if (other.CorrectAgility != 0F) {
        CorrectAgility = other.CorrectAgility;
      }
      if (other.CorrectMagic != 0F) {
        CorrectMagic = other.CorrectMagic;
      }
      if (other.CorrectFaith != 0F) {
        CorrectFaith = other.CorrectFaith;
      }
      if (other.PhysGuardCutRate != 0F) {
        PhysGuardCutRate = other.PhysGuardCutRate;
      }
      if (other.MagGuardCutRate != 0F) {
        MagGuardCutRate = other.MagGuardCutRate;
      }
      if (other.FireGuardCutRate != 0F) {
        FireGuardCutRate = other.FireGuardCutRate;
      }
      if (other.ThunGuardCutRate != 0F) {
        ThunGuardCutRate = other.ThunGuardCutRate;
      }
      if (other.SpEffectBehaviorId1 != 0) {
        SpEffectBehaviorId1 = other.SpEffectBehaviorId1;
      }
      if (other.SpEffectBehaviorId2 != 0) {
        SpEffectBehaviorId2 = other.SpEffectBehaviorId2;
      }
      if (other.SpEffectBehaviorId3 != 0) {
        SpEffectBehaviorId3 = other.SpEffectBehaviorId3;
      }
      if (other.ResidentSpEffectId1 != 0) {
        ResidentSpEffectId1 = other.ResidentSpEffectId1;
      }
      if (other.ResidentSpEffectId2 != 0) {
        ResidentSpEffectId2 = other.ResidentSpEffectId2;
      }
      if (other.ResidentSpEffectId3 != 0) {
        ResidentSpEffectId3 = other.ResidentSpEffectId3;
      }
      if (other.MaterialSetId != 0) {
        MaterialSetId = other.MaterialSetId;
      }
      if (other.OriginEquipWep != 0) {
        OriginEquipWep = other.OriginEquipWep;
      }
      if (other.OriginEquipWep1 != 0) {
        OriginEquipWep1 = other.OriginEquipWep1;
      }
      if (other.OriginEquipWep2 != 0) {
        OriginEquipWep2 = other.OriginEquipWep2;
      }
      if (other.OriginEquipWep3 != 0) {
        OriginEquipWep3 = other.OriginEquipWep3;
      }
      if (other.OriginEquipWep4 != 0) {
        OriginEquipWep4 = other.OriginEquipWep4;
      }
      if (other.OriginEquipWep5 != 0) {
        OriginEquipWep5 = other.OriginEquipWep5;
      }
      if (other.OriginEquipWep6 != 0) {
        OriginEquipWep6 = other.OriginEquipWep6;
      }
      if (other.OriginEquipWep7 != 0) {
        OriginEquipWep7 = other.OriginEquipWep7;
      }
      if (other.OriginEquipWep8 != 0) {
        OriginEquipWep8 = other.OriginEquipWep8;
      }
      if (other.OriginEquipWep9 != 0) {
        OriginEquipWep9 = other.OriginEquipWep9;
      }
      if (other.OriginEquipWep10 != 0) {
        OriginEquipWep10 = other.OriginEquipWep10;
      }
      if (other.OriginEquipWep11 != 0) {
        OriginEquipWep11 = other.OriginEquipWep11;
      }
      if (other.OriginEquipWep12 != 0) {
        OriginEquipWep12 = other.OriginEquipWep12;
      }
      if (other.OriginEquipWep13 != 0) {
        OriginEquipWep13 = other.OriginEquipWep13;
      }
      if (other.OriginEquipWep14 != 0) {
        OriginEquipWep14 = other.OriginEquipWep14;
      }
      if (other.OriginEquipWep15 != 0) {
        OriginEquipWep15 = other.OriginEquipWep15;
      }
      if (other.AntiDemonDamageRate != 0F) {
        AntiDemonDamageRate = other.AntiDemonDamageRate;
      }
      if (other.AntSaintDamageRate != 0F) {
        AntSaintDamageRate = other.AntSaintDamageRate;
      }
      if (other.AntWeakADamageRate != 0F) {
        AntWeakADamageRate = other.AntWeakADamageRate;
      }
      if (other.AntWeakBDamageRate != 0F) {
        AntWeakBDamageRate = other.AntWeakBDamageRate;
      }
      if (other.VagrantItemLotId != 0) {
        VagrantItemLotId = other.VagrantItemLotId;
      }
      if (other.VagrantBonusEneDropItemLotId != 0) {
        VagrantBonusEneDropItemLotId = other.VagrantBonusEneDropItemLotId;
      }
      if (other.VagrantItemEneDropItemLotId != 0) {
        VagrantItemEneDropItemLotId = other.VagrantItemEneDropItemLotId;
      }
      if (other.EquipModelId != 0) {
        EquipModelId = other.EquipModelId;
      }
      if (other.IconId != 0) {
        IconId = other.IconId;
      }
      if (other.Durability != 0) {
        Durability = other.Durability;
      }
      if (other.MaxDurability != 0) {
        MaxDurability = other.MaxDurability;
      }
      if (other.ParryDamageLife != 0) {
        ParryDamageLife = other.ParryDamageLife;
      }
      if (other.AttackThrowEscape != 0) {
        AttackThrowEscape = other.AttackThrowEscape;
      }
      if (other.AttackBasePhysics != 0) {
        AttackBasePhysics = other.AttackBasePhysics;
      }
      if (other.AttackBaseMagic != 0) {
        AttackBaseMagic = other.AttackBaseMagic;
      }
      if (other.AttackBaseFire != 0) {
        AttackBaseFire = other.AttackBaseFire;
      }
      if (other.AttackBaseThunder != 0) {
        AttackBaseThunder = other.AttackBaseThunder;
      }
      if (other.AttackBaseStamina != 0) {
        AttackBaseStamina = other.AttackBaseStamina;
      }
      if (other.AttackBasePoise != 0) {
        AttackBasePoise = other.AttackBasePoise;
      }
      if (other.SaDurability != 0) {
        SaDurability = other.SaDurability;
      }
      if (other.GuardAngle != 0) {
        GuardAngle = other.GuardAngle;
      }
      if (other.Stability != 0) {
        Stability = other.Stability;
      }
      if (other.ReinforceTypeId != 0) {
        ReinforceTypeId = other.ReinforceTypeId;
      }
      if (other.TrophySGradeId != 0) {
        TrophySGradeId = other.TrophySGradeId;
      }
      if (other.ThrophySeqId != 0) {
        ThrophySeqId = other.ThrophySeqId;
      }
      if (other.ThrowAtkRate != 0) {
        ThrowAtkRate = other.ThrowAtkRate;
      }
      if (other.BowDistRate != 0) {
        BowDistRate = other.BowDistRate;
      }
      if (other.EquipModelCategory != 0) {
        EquipModelCategory = other.EquipModelCategory;
      }
      if (other.EquipModelGender != 0) {
        EquipModelGender = other.EquipModelGender;
      }
      if (other.WeaponCategory != 0) {
        WeaponCategory = other.WeaponCategory;
      }
      if (other.MotionCategory != 0) {
        MotionCategory = other.MotionCategory;
      }
      if (other.GuardMotionCategory != 0) {
        GuardMotionCategory = other.GuardMotionCategory;
      }
      if (other.AtkMaterial != 0) {
        AtkMaterial = other.AtkMaterial;
      }
      if (other.DefMaterial != 0) {
        DefMaterial = other.DefMaterial;
      }
      if (other.DefSfxMaterial != 0) {
        DefSfxMaterial = other.DefSfxMaterial;
      }
      if (other.PhysicsStatFunc != 0) {
        PhysicsStatFunc = other.PhysicsStatFunc;
      }
      if (other.SpAttribute != 0) {
        SpAttribute = other.SpAttribute;
      }
      if (other.SpAtkCategory != 0) {
        SpAtkCategory = other.SpAtkCategory;
      }
      if (other.WepMotionOneHandId != 0) {
        WepMotionOneHandId = other.WepMotionOneHandId;
      }
      if (other.WepMotionBothHandId != 0) {
        WepMotionBothHandId = other.WepMotionBothHandId;
      }
      if (other.ProperStrength != 0) {
        ProperStrength = other.ProperStrength;
      }
      if (other.ProperAgility != 0) {
        ProperAgility = other.ProperAgility;
      }
      if (other.ProperMagic != 0) {
        ProperMagic = other.ProperMagic;
      }
      if (other.ProperFaith != 0) {
        ProperFaith = other.ProperFaith;
      }
      if (other.OverStrength != 0) {
        OverStrength = other.OverStrength;
      }
      if (other.AttackBaseParry != 0) {
        AttackBaseParry = other.AttackBaseParry;
      }
      if (other.DefenseBaseParry != 0) {
        DefenseBaseParry = other.DefenseBaseParry;
      }
      if (other.GuardBaseRepel != 0) {
        GuardBaseRepel = other.GuardBaseRepel;
      }
      if (other.AttackBaseRepel != 0) {
        AttackBaseRepel = other.AttackBaseRepel;
      }
      if (other.GuardCutCancelRate != 0) {
        GuardCutCancelRate = other.GuardCutCancelRate;
      }
      if (other.GuardLevel != 0) {
        GuardLevel = other.GuardLevel;
      }
      if (other.SlashGuardCutRate != 0) {
        SlashGuardCutRate = other.SlashGuardCutRate;
      }
      if (other.BlowGuardCutRate != 0) {
        BlowGuardCutRate = other.BlowGuardCutRate;
      }
      if (other.ThrustGuardCutRate != 0) {
        ThrustGuardCutRate = other.ThrustGuardCutRate;
      }
      if (other.PoisonGuardResist != 0) {
        PoisonGuardResist = other.PoisonGuardResist;
      }
      if (other.DiseaseGuardResist != 0) {
        DiseaseGuardResist = other.DiseaseGuardResist;
      }
      if (other.BloodGuardResist != 0) {
        BloodGuardResist = other.BloodGuardResist;
      }
      if (other.CurseGuardResist != 0) {
        CurseGuardResist = other.CurseGuardResist;
      }
      if (other.IsDurabilityDivergence != 0) {
        IsDurabilityDivergence = other.IsDurabilityDivergence;
      }
      if (other.RightHandEquipable != false) {
        RightHandEquipable = other.RightHandEquipable;
      }
      if (other.LeftHandEquipable != false) {
        LeftHandEquipable = other.LeftHandEquipable;
      }
      if (other.Buffs != 0) {
        Buffs = other.Buffs;
      }
      if (other.MagicStatFunc != 0) {
        MagicStatFunc = other.MagicStatFunc;
      }
      if (other.FireStatFunc != 0) {
        FireStatFunc = other.FireStatFunc;
      }
      if (other.ThunderStatFunc != 0) {
        ThunderStatFunc = other.ThunderStatFunc;
      }
      if (other.AttackBaseDark != 0) {
        AttackBaseDark = other.AttackBaseDark;
      }
      if (other.DarkStatFunc != 0) {
        DarkStatFunc = other.DarkStatFunc;
      }
      if (other.PoisonStatFunc != 0) {
        PoisonStatFunc = other.PoisonStatFunc;
      }
      if (other.BleedStatFunc != 0) {
        BleedStatFunc = other.BleedStatFunc;
      }
      if (other.ProperLuck != 0) {
        ProperLuck = other.ProperLuck;
      }
      if (other.WeaponArt != 0) {
        WeaponArt = other.WeaponArt;
      }
      if (other.CorrectLuck != 0F) {
        CorrectLuck = other.CorrectLuck;
      }
      if (other.WeaponClass != 0) {
        WeaponClass = other.WeaponClass;
      }
      if (other.AecpId != 0) {
        AecpId = other.AecpId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadSInt32();
            break;
          }
          case 32: {
            Offset = input.ReadSInt32();
            break;
          }
          case 40: {
            BehaviorVariationId = input.ReadUInt32();
            break;
          }
          case 48: {
            SortId = input.ReadUInt32();
            break;
          }
          case 56: {
            WanderingEquipId = input.ReadSInt32();
            break;
          }
          case 69: {
            Weight = input.ReadFloat();
            break;
          }
          case 72: {
            WeaponWeightRate = input.ReadSInt32();
            break;
          }
          case 80: {
            FixPrice = input.ReadSInt32();
            break;
          }
          case 88: {
            BasicPrice = input.ReadSInt32();
            break;
          }
          case 96: {
            SellValue = input.ReadSInt32();
            break;
          }
          case 109: {
            CorrectStrength = input.ReadFloat();
            break;
          }
          case 117: {
            CorrectAgility = input.ReadFloat();
            break;
          }
          case 125: {
            CorrectMagic = input.ReadFloat();
            break;
          }
          case 133: {
            CorrectFaith = input.ReadFloat();
            break;
          }
          case 141: {
            PhysGuardCutRate = input.ReadFloat();
            break;
          }
          case 149: {
            MagGuardCutRate = input.ReadFloat();
            break;
          }
          case 157: {
            FireGuardCutRate = input.ReadFloat();
            break;
          }
          case 165: {
            ThunGuardCutRate = input.ReadFloat();
            break;
          }
          case 168: {
            SpEffectBehaviorId1 = input.ReadSInt32();
            break;
          }
          case 176: {
            SpEffectBehaviorId2 = input.ReadSInt32();
            break;
          }
          case 184: {
            SpEffectBehaviorId3 = input.ReadSInt32();
            break;
          }
          case 192: {
            ResidentSpEffectId1 = input.ReadSInt32();
            break;
          }
          case 200: {
            ResidentSpEffectId2 = input.ReadSInt32();
            break;
          }
          case 208: {
            ResidentSpEffectId3 = input.ReadSInt32();
            break;
          }
          case 216: {
            MaterialSetId = input.ReadSInt32();
            break;
          }
          case 224: {
            OriginEquipWep = input.ReadSInt32();
            break;
          }
          case 232: {
            OriginEquipWep1 = input.ReadSInt32();
            break;
          }
          case 240: {
            OriginEquipWep2 = input.ReadSInt32();
            break;
          }
          case 248: {
            OriginEquipWep3 = input.ReadSInt32();
            break;
          }
          case 256: {
            OriginEquipWep4 = input.ReadSInt32();
            break;
          }
          case 264: {
            OriginEquipWep5 = input.ReadSInt32();
            break;
          }
          case 272: {
            OriginEquipWep6 = input.ReadSInt32();
            break;
          }
          case 280: {
            OriginEquipWep7 = input.ReadSInt32();
            break;
          }
          case 288: {
            OriginEquipWep8 = input.ReadSInt32();
            break;
          }
          case 296: {
            OriginEquipWep9 = input.ReadSInt32();
            break;
          }
          case 304: {
            OriginEquipWep10 = input.ReadSInt32();
            break;
          }
          case 312: {
            OriginEquipWep11 = input.ReadSInt32();
            break;
          }
          case 320: {
            OriginEquipWep12 = input.ReadSInt32();
            break;
          }
          case 328: {
            OriginEquipWep13 = input.ReadSInt32();
            break;
          }
          case 336: {
            OriginEquipWep14 = input.ReadSInt32();
            break;
          }
          case 344: {
            OriginEquipWep15 = input.ReadSInt32();
            break;
          }
          case 357: {
            AntiDemonDamageRate = input.ReadFloat();
            break;
          }
          case 365: {
            AntSaintDamageRate = input.ReadFloat();
            break;
          }
          case 373: {
            AntWeakADamageRate = input.ReadFloat();
            break;
          }
          case 381: {
            AntWeakBDamageRate = input.ReadFloat();
            break;
          }
          case 384: {
            VagrantItemLotId = input.ReadSInt32();
            break;
          }
          case 392: {
            VagrantBonusEneDropItemLotId = input.ReadSInt32();
            break;
          }
          case 400: {
            VagrantItemEneDropItemLotId = input.ReadSInt32();
            break;
          }
          case 408: {
            EquipModelId = input.ReadUInt32();
            break;
          }
          case 416: {
            IconId = input.ReadUInt32();
            break;
          }
          case 424: {
            Durability = input.ReadSInt32();
            break;
          }
          case 432: {
            MaxDurability = input.ReadSInt32();
            break;
          }
          case 440: {
            ParryDamageLife = input.ReadSInt32();
            break;
          }
          case 448: {
            AttackThrowEscape = input.ReadUInt32();
            break;
          }
          case 456: {
            AttackBasePhysics = input.ReadSInt32();
            break;
          }
          case 464: {
            AttackBaseMagic = input.ReadSInt32();
            break;
          }
          case 472: {
            AttackBaseFire = input.ReadSInt32();
            break;
          }
          case 480: {
            AttackBaseThunder = input.ReadSInt32();
            break;
          }
          case 488: {
            AttackBaseStamina = input.ReadSInt32();
            break;
          }
          case 496: {
            AttackBasePoise = input.ReadSInt32();
            break;
          }
          case 504: {
            SaDurability = input.ReadSInt32();
            break;
          }
          case 512: {
            GuardAngle = input.ReadSInt32();
            break;
          }
          case 520: {
            Stability = input.ReadSInt32();
            break;
          }
          case 528: {
            ReinforceTypeId = input.ReadSInt32();
            break;
          }
          case 536: {
            TrophySGradeId = input.ReadSInt32();
            break;
          }
          case 544: {
            ThrophySeqId = input.ReadSInt32();
            break;
          }
          case 552: {
            ThrowAtkRate = input.ReadSInt32();
            break;
          }
          case 560: {
            BowDistRate = input.ReadSInt32();
            break;
          }
          case 568: {
            EquipModelCategory = input.ReadUInt32();
            break;
          }
          case 576: {
            EquipModelGender = input.ReadUInt32();
            break;
          }
          case 584: {
            WeaponCategory = input.ReadUInt32();
            break;
          }
          case 592: {
            MotionCategory = input.ReadUInt32();
            break;
          }
          case 600: {
            GuardMotionCategory = input.ReadUInt32();
            break;
          }
          case 608: {
            AtkMaterial = input.ReadUInt32();
            break;
          }
          case 616: {
            DefMaterial = input.ReadUInt32();
            break;
          }
          case 624: {
            DefSfxMaterial = input.ReadUInt32();
            break;
          }
          case 632: {
            PhysicsStatFunc = input.ReadUInt32();
            break;
          }
          case 640: {
            SpAttribute = input.ReadUInt32();
            break;
          }
          case 648: {
            SpAtkCategory = input.ReadUInt32();
            break;
          }
          case 656: {
            WepMotionOneHandId = input.ReadUInt32();
            break;
          }
          case 664: {
            WepMotionBothHandId = input.ReadUInt32();
            break;
          }
          case 672: {
            ProperStrength = input.ReadUInt32();
            break;
          }
          case 680: {
            ProperAgility = input.ReadUInt32();
            break;
          }
          case 688: {
            ProperMagic = input.ReadUInt32();
            break;
          }
          case 696: {
            ProperFaith = input.ReadUInt32();
            break;
          }
          case 704: {
            OverStrength = input.ReadUInt32();
            break;
          }
          case 712: {
            AttackBaseParry = input.ReadUInt32();
            break;
          }
          case 720: {
            DefenseBaseParry = input.ReadUInt32();
            break;
          }
          case 728: {
            GuardBaseRepel = input.ReadUInt32();
            break;
          }
          case 736: {
            AttackBaseRepel = input.ReadUInt32();
            break;
          }
          case 744: {
            GuardCutCancelRate = input.ReadUInt32();
            break;
          }
          case 752: {
            GuardLevel = input.ReadUInt32();
            break;
          }
          case 760: {
            SlashGuardCutRate = input.ReadUInt32();
            break;
          }
          case 768: {
            BlowGuardCutRate = input.ReadUInt32();
            break;
          }
          case 776: {
            ThrustGuardCutRate = input.ReadUInt32();
            break;
          }
          case 784: {
            PoisonGuardResist = input.ReadUInt32();
            break;
          }
          case 792: {
            DiseaseGuardResist = input.ReadUInt32();
            break;
          }
          case 800: {
            BloodGuardResist = input.ReadUInt32();
            break;
          }
          case 808: {
            CurseGuardResist = input.ReadUInt32();
            break;
          }
          case 816: {
            IsDurabilityDivergence = input.ReadUInt32();
            break;
          }
          case 824: {
            RightHandEquipable = input.ReadBool();
            break;
          }
          case 832: {
            LeftHandEquipable = input.ReadBool();
            break;
          }
          case 840: {
            Buffs = input.ReadUInt32();
            break;
          }
          case 848: {
            MagicStatFunc = input.ReadUInt32();
            break;
          }
          case 856: {
            FireStatFunc = input.ReadUInt32();
            break;
          }
          case 864: {
            ThunderStatFunc = input.ReadUInt32();
            break;
          }
          case 872: {
            AttackBaseDark = input.ReadSInt32();
            break;
          }
          case 880: {
            DarkStatFunc = input.ReadUInt32();
            break;
          }
          case 888: {
            PoisonStatFunc = input.ReadUInt32();
            break;
          }
          case 896: {
            BleedStatFunc = input.ReadUInt32();
            break;
          }
          case 904: {
            ProperLuck = input.ReadUInt32();
            break;
          }
          case 912: {
            WeaponArt = input.ReadUInt32();
            break;
          }
          case 925: {
            CorrectLuck = input.ReadFloat();
            break;
          }
          case 928: {
            WeaponClass = input.ReadSInt32();
            break;
          }
          case 936: {
            AecpId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EquipParamAccessory : pb::IMessage<EquipParamAccessory> {
    private static readonly pb::MessageParser<EquipParamAccessory> _parser = new pb::MessageParser<EquipParamAccessory>(() => new EquipParamAccessory());
    public static pb::MessageParser<EquipParamAccessory> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ds3Ext.Ds3ExtReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public EquipParamAccessory() {
      OnConstruction();
    }

    partial void OnConstruction();

    public EquipParamAccessory(EquipParamAccessory other) : this() {
      id_ = other.id_;
      index_ = other.index_;
      offset_ = other.offset_;
      refId_ = other.refId_;
      sfxVariationId_ = other.sfxVariationId_;
      weight_ = other.weight_;
      behaviorId_ = other.behaviorId_;
      basicPrice_ = other.basicPrice_;
      sellValue_ = other.sellValue_;
      sortId_ = other.sortId_;
      qwcId_ = other.qwcId_;
      equipModelId_ = other.equipModelId_;
      iconId_ = other.iconId_;
      shopLv_ = other.shopLv_;
      trophySGradeId_ = other.trophySGradeId_;
      throphySeqId_ = other.throphySeqId_;
      equipModelCategory_ = other.equipModelCategory_;
      equipModelGender_ = other.equipModelGender_;
      accessoryCategory_ = other.accessoryCategory_;
      refCategory_ = other.refCategory_;
      spEffectCategory_ = other.spEffectCategory_;
    }

    public EquipParamAccessory Clone() {
      return new EquipParamAccessory(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Offset" field.</summary>
    public const int OffsetFieldNumber = 4;
    private int offset_;
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "RefId" field.</summary>
    public const int RefIdFieldNumber = 5;
    private int refId_;
    public int RefId {
      get { return refId_; }
      set {
        refId_ = value;
      }
    }

    /// <summary>Field number for the "SfxVariationId" field.</summary>
    public const int SfxVariationIdFieldNumber = 6;
    private int sfxVariationId_;
    public int SfxVariationId {
      get { return sfxVariationId_; }
      set {
        sfxVariationId_ = value;
      }
    }

    /// <summary>Field number for the "Weight" field.</summary>
    public const int WeightFieldNumber = 7;
    private float weight_;
    public float Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "BehaviorId" field.</summary>
    public const int BehaviorIdFieldNumber = 8;
    private int behaviorId_;
    public int BehaviorId {
      get { return behaviorId_; }
      set {
        behaviorId_ = value;
      }
    }

    /// <summary>Field number for the "BasicPrice" field.</summary>
    public const int BasicPriceFieldNumber = 9;
    private int basicPrice_;
    public int BasicPrice {
      get { return basicPrice_; }
      set {
        basicPrice_ = value;
      }
    }

    /// <summary>Field number for the "SellValue" field.</summary>
    public const int SellValueFieldNumber = 10;
    private int sellValue_;
    public int SellValue {
      get { return sellValue_; }
      set {
        sellValue_ = value;
      }
    }

    /// <summary>Field number for the "SortId" field.</summary>
    public const int SortIdFieldNumber = 11;
    private int sortId_;
    public int SortId {
      get { return sortId_; }
      set {
        sortId_ = value;
      }
    }

    /// <summary>Field number for the "QwcId" field.</summary>
    public const int QwcIdFieldNumber = 12;
    private int qwcId_;
    public int QwcId {
      get { return qwcId_; }
      set {
        qwcId_ = value;
      }
    }

    /// <summary>Field number for the "EquipModelId" field.</summary>
    public const int EquipModelIdFieldNumber = 13;
    private int equipModelId_;
    public int EquipModelId {
      get { return equipModelId_; }
      set {
        equipModelId_ = value;
      }
    }

    /// <summary>Field number for the "IconId" field.</summary>
    public const int IconIdFieldNumber = 14;
    private int iconId_;
    public int IconId {
      get { return iconId_; }
      set {
        iconId_ = value;
      }
    }

    /// <summary>Field number for the "ShopLv" field.</summary>
    public const int ShopLvFieldNumber = 15;
    private int shopLv_;
    public int ShopLv {
      get { return shopLv_; }
      set {
        shopLv_ = value;
      }
    }

    /// <summary>Field number for the "TrophySGradeId" field.</summary>
    public const int TrophySGradeIdFieldNumber = 16;
    private int trophySGradeId_;
    public int TrophySGradeId {
      get { return trophySGradeId_; }
      set {
        trophySGradeId_ = value;
      }
    }

    /// <summary>Field number for the "ThrophySeqId" field.</summary>
    public const int ThrophySeqIdFieldNumber = 17;
    private int throphySeqId_;
    public int ThrophySeqId {
      get { return throphySeqId_; }
      set {
        throphySeqId_ = value;
      }
    }

    /// <summary>Field number for the "EquipModelCategory" field.</summary>
    public const int EquipModelCategoryFieldNumber = 18;
    private uint equipModelCategory_;
    public uint EquipModelCategory {
      get { return equipModelCategory_; }
      set {
        equipModelCategory_ = value;
      }
    }

    /// <summary>Field number for the "EquipModelGender" field.</summary>
    public const int EquipModelGenderFieldNumber = 19;
    private uint equipModelGender_;
    public uint EquipModelGender {
      get { return equipModelGender_; }
      set {
        equipModelGender_ = value;
      }
    }

    /// <summary>Field number for the "AccessoryCategory" field.</summary>
    public const int AccessoryCategoryFieldNumber = 20;
    private uint accessoryCategory_;
    public uint AccessoryCategory {
      get { return accessoryCategory_; }
      set {
        accessoryCategory_ = value;
      }
    }

    /// <summary>Field number for the "RefCategory" field.</summary>
    public const int RefCategoryFieldNumber = 21;
    private uint refCategory_;
    public uint RefCategory {
      get { return refCategory_; }
      set {
        refCategory_ = value;
      }
    }

    /// <summary>Field number for the "SpEffectCategory" field.</summary>
    public const int SpEffectCategoryFieldNumber = 22;
    private uint spEffectCategory_;
    public uint SpEffectCategory {
      get { return spEffectCategory_; }
      set {
        spEffectCategory_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as EquipParamAccessory);
    }

    public bool Equals(EquipParamAccessory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Index != other.Index) return false;
      if (Offset != other.Offset) return false;
      if (RefId != other.RefId) return false;
      if (SfxVariationId != other.SfxVariationId) return false;
      if (Weight != other.Weight) return false;
      if (BehaviorId != other.BehaviorId) return false;
      if (BasicPrice != other.BasicPrice) return false;
      if (SellValue != other.SellValue) return false;
      if (SortId != other.SortId) return false;
      if (QwcId != other.QwcId) return false;
      if (EquipModelId != other.EquipModelId) return false;
      if (IconId != other.IconId) return false;
      if (ShopLv != other.ShopLv) return false;
      if (TrophySGradeId != other.TrophySGradeId) return false;
      if (ThrophySeqId != other.ThrophySeqId) return false;
      if (EquipModelCategory != other.EquipModelCategory) return false;
      if (EquipModelGender != other.EquipModelGender) return false;
      if (AccessoryCategory != other.AccessoryCategory) return false;
      if (RefCategory != other.RefCategory) return false;
      if (SpEffectCategory != other.SpEffectCategory) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (RefId != 0) hash ^= RefId.GetHashCode();
      if (SfxVariationId != 0) hash ^= SfxVariationId.GetHashCode();
      if (Weight != 0F) hash ^= Weight.GetHashCode();
      if (BehaviorId != 0) hash ^= BehaviorId.GetHashCode();
      if (BasicPrice != 0) hash ^= BasicPrice.GetHashCode();
      if (SellValue != 0) hash ^= SellValue.GetHashCode();
      if (SortId != 0) hash ^= SortId.GetHashCode();
      if (QwcId != 0) hash ^= QwcId.GetHashCode();
      if (EquipModelId != 0) hash ^= EquipModelId.GetHashCode();
      if (IconId != 0) hash ^= IconId.GetHashCode();
      if (ShopLv != 0) hash ^= ShopLv.GetHashCode();
      if (TrophySGradeId != 0) hash ^= TrophySGradeId.GetHashCode();
      if (ThrophySeqId != 0) hash ^= ThrophySeqId.GetHashCode();
      if (EquipModelCategory != 0) hash ^= EquipModelCategory.GetHashCode();
      if (EquipModelGender != 0) hash ^= EquipModelGender.GetHashCode();
      if (AccessoryCategory != 0) hash ^= AccessoryCategory.GetHashCode();
      if (RefCategory != 0) hash ^= RefCategory.GetHashCode();
      if (SpEffectCategory != 0) hash ^= SpEffectCategory.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Index);
      }
      if (Offset != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Offset);
      }
      if (RefId != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(RefId);
      }
      if (SfxVariationId != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(SfxVariationId);
      }
      if (Weight != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Weight);
      }
      if (BehaviorId != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(BehaviorId);
      }
      if (BasicPrice != 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(BasicPrice);
      }
      if (SellValue != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(SellValue);
      }
      if (SortId != 0) {
        output.WriteRawTag(88);
        output.WriteSInt32(SortId);
      }
      if (QwcId != 0) {
        output.WriteRawTag(96);
        output.WriteSInt32(QwcId);
      }
      if (EquipModelId != 0) {
        output.WriteRawTag(104);
        output.WriteSInt32(EquipModelId);
      }
      if (IconId != 0) {
        output.WriteRawTag(112);
        output.WriteSInt32(IconId);
      }
      if (ShopLv != 0) {
        output.WriteRawTag(120);
        output.WriteSInt32(ShopLv);
      }
      if (TrophySGradeId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteSInt32(TrophySGradeId);
      }
      if (ThrophySeqId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteSInt32(ThrophySeqId);
      }
      if (EquipModelCategory != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(EquipModelCategory);
      }
      if (EquipModelGender != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(EquipModelGender);
      }
      if (AccessoryCategory != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(AccessoryCategory);
      }
      if (RefCategory != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(RefCategory);
      }
      if (SpEffectCategory != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(SpEffectCategory);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Index);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Offset);
      }
      if (RefId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(RefId);
      }
      if (SfxVariationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SfxVariationId);
      }
      if (Weight != 0F) {
        size += 1 + 4;
      }
      if (BehaviorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BehaviorId);
      }
      if (BasicPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BasicPrice);
      }
      if (SellValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SellValue);
      }
      if (SortId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SortId);
      }
      if (QwcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(QwcId);
      }
      if (EquipModelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(EquipModelId);
      }
      if (IconId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IconId);
      }
      if (ShopLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ShopLv);
      }
      if (TrophySGradeId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(TrophySGradeId);
      }
      if (ThrophySeqId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ThrophySeqId);
      }
      if (EquipModelCategory != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EquipModelCategory);
      }
      if (EquipModelGender != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EquipModelGender);
      }
      if (AccessoryCategory != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AccessoryCategory);
      }
      if (RefCategory != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RefCategory);
      }
      if (SpEffectCategory != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpEffectCategory);
      }
      return size;
    }

    public void MergeFrom(EquipParamAccessory other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.RefId != 0) {
        RefId = other.RefId;
      }
      if (other.SfxVariationId != 0) {
        SfxVariationId = other.SfxVariationId;
      }
      if (other.Weight != 0F) {
        Weight = other.Weight;
      }
      if (other.BehaviorId != 0) {
        BehaviorId = other.BehaviorId;
      }
      if (other.BasicPrice != 0) {
        BasicPrice = other.BasicPrice;
      }
      if (other.SellValue != 0) {
        SellValue = other.SellValue;
      }
      if (other.SortId != 0) {
        SortId = other.SortId;
      }
      if (other.QwcId != 0) {
        QwcId = other.QwcId;
      }
      if (other.EquipModelId != 0) {
        EquipModelId = other.EquipModelId;
      }
      if (other.IconId != 0) {
        IconId = other.IconId;
      }
      if (other.ShopLv != 0) {
        ShopLv = other.ShopLv;
      }
      if (other.TrophySGradeId != 0) {
        TrophySGradeId = other.TrophySGradeId;
      }
      if (other.ThrophySeqId != 0) {
        ThrophySeqId = other.ThrophySeqId;
      }
      if (other.EquipModelCategory != 0) {
        EquipModelCategory = other.EquipModelCategory;
      }
      if (other.EquipModelGender != 0) {
        EquipModelGender = other.EquipModelGender;
      }
      if (other.AccessoryCategory != 0) {
        AccessoryCategory = other.AccessoryCategory;
      }
      if (other.RefCategory != 0) {
        RefCategory = other.RefCategory;
      }
      if (other.SpEffectCategory != 0) {
        SpEffectCategory = other.SpEffectCategory;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadSInt32();
            break;
          }
          case 32: {
            Offset = input.ReadSInt32();
            break;
          }
          case 40: {
            RefId = input.ReadSInt32();
            break;
          }
          case 48: {
            SfxVariationId = input.ReadSInt32();
            break;
          }
          case 61: {
            Weight = input.ReadFloat();
            break;
          }
          case 64: {
            BehaviorId = input.ReadSInt32();
            break;
          }
          case 72: {
            BasicPrice = input.ReadSInt32();
            break;
          }
          case 80: {
            SellValue = input.ReadSInt32();
            break;
          }
          case 88: {
            SortId = input.ReadSInt32();
            break;
          }
          case 96: {
            QwcId = input.ReadSInt32();
            break;
          }
          case 104: {
            EquipModelId = input.ReadSInt32();
            break;
          }
          case 112: {
            IconId = input.ReadSInt32();
            break;
          }
          case 120: {
            ShopLv = input.ReadSInt32();
            break;
          }
          case 128: {
            TrophySGradeId = input.ReadSInt32();
            break;
          }
          case 136: {
            ThrophySeqId = input.ReadSInt32();
            break;
          }
          case 144: {
            EquipModelCategory = input.ReadUInt32();
            break;
          }
          case 152: {
            EquipModelGender = input.ReadUInt32();
            break;
          }
          case 160: {
            AccessoryCategory = input.ReadUInt32();
            break;
          }
          case 168: {
            RefCategory = input.ReadUInt32();
            break;
          }
          case 176: {
            SpEffectCategory = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EquipParamProtector : pb::IMessage<EquipParamProtector> {
    private static readonly pb::MessageParser<EquipParamProtector> _parser = new pb::MessageParser<EquipParamProtector>(() => new EquipParamProtector());
    public static pb::MessageParser<EquipParamProtector> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ds3Ext.Ds3ExtReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public EquipParamProtector() {
      OnConstruction();
    }

    partial void OnConstruction();

    public EquipParamProtector(EquipParamProtector other) : this() {
      id_ = other.id_;
      index_ = other.index_;
      offset_ = other.offset_;
      sortId_ = other.sortId_;
      wanderingEquipId_ = other.wanderingEquipId_;
      vagrantItemLotId_ = other.vagrantItemLotId_;
      vagrantBonusEneDropItemLotId_ = other.vagrantBonusEneDropItemLotId_;
      vagrantItemEneDropItemLotId_ = other.vagrantItemEneDropItemLotId_;
      fixPrice_ = other.fixPrice_;
      basicPrice_ = other.basicPrice_;
      sellValue_ = other.sellValue_;
      weight_ = other.weight_;
      residentSpEffectId1_ = other.residentSpEffectId1_;
      residentSpEffectId2_ = other.residentSpEffectId2_;
      residentSpEffectId3_ = other.residentSpEffectId3_;
      materialSetId_ = other.materialSetId_;
      partsDamageRate_ = other.partsDamageRate_;
      resistPoison_ = other.resistPoison_;
      resistToxic_ = other.resistToxic_;
      resistBlood_ = other.resistBlood_;
      resistCurse_ = other.resistCurse_;
      defensePhysics_ = other.defensePhysics_;
      defenseSlash_ = other.defenseSlash_;
      defenseStrike_ = other.defenseStrike_;
      defenseThrust_ = other.defenseThrust_;
      defenseMagic_ = other.defenseMagic_;
      defenseFire_ = other.defenseFire_;
      defenseThunder_ = other.defenseThunder_;
      equipModelId_ = other.equipModelId_;
      knockbackBounceRate_ = other.knockbackBounceRate_;
      durability_ = other.durability_;
      durabilityMax_ = other.durabilityMax_;
      saDurability_ = other.saDurability_;
      poise_ = other.poise_;
      defenseDark_ = other.defenseDark_;
      resistFrost_ = other.resistFrost_;
    }

    public EquipParamProtector Clone() {
      return new EquipParamProtector(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Offset" field.</summary>
    public const int OffsetFieldNumber = 4;
    private int offset_;
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "SortId" field.</summary>
    public const int SortIdFieldNumber = 5;
    private int sortId_;
    public int SortId {
      get { return sortId_; }
      set {
        sortId_ = value;
      }
    }

    /// <summary>Field number for the "WanderingEquipId" field.</summary>
    public const int WanderingEquipIdFieldNumber = 6;
    private int wanderingEquipId_;
    public int WanderingEquipId {
      get { return wanderingEquipId_; }
      set {
        wanderingEquipId_ = value;
      }
    }

    /// <summary>Field number for the "VagrantItemLotId" field.</summary>
    public const int VagrantItemLotIdFieldNumber = 7;
    private int vagrantItemLotId_;
    public int VagrantItemLotId {
      get { return vagrantItemLotId_; }
      set {
        vagrantItemLotId_ = value;
      }
    }

    /// <summary>Field number for the "VagrantBonusEneDropItemLotId" field.</summary>
    public const int VagrantBonusEneDropItemLotIdFieldNumber = 8;
    private int vagrantBonusEneDropItemLotId_;
    public int VagrantBonusEneDropItemLotId {
      get { return vagrantBonusEneDropItemLotId_; }
      set {
        vagrantBonusEneDropItemLotId_ = value;
      }
    }

    /// <summary>Field number for the "VagrantItemEneDropItemLotId" field.</summary>
    public const int VagrantItemEneDropItemLotIdFieldNumber = 9;
    private int vagrantItemEneDropItemLotId_;
    public int VagrantItemEneDropItemLotId {
      get { return vagrantItemEneDropItemLotId_; }
      set {
        vagrantItemEneDropItemLotId_ = value;
      }
    }

    /// <summary>Field number for the "FixPrice" field.</summary>
    public const int FixPriceFieldNumber = 10;
    private int fixPrice_;
    public int FixPrice {
      get { return fixPrice_; }
      set {
        fixPrice_ = value;
      }
    }

    /// <summary>Field number for the "BasicPrice" field.</summary>
    public const int BasicPriceFieldNumber = 11;
    private int basicPrice_;
    public int BasicPrice {
      get { return basicPrice_; }
      set {
        basicPrice_ = value;
      }
    }

    /// <summary>Field number for the "SellValue" field.</summary>
    public const int SellValueFieldNumber = 12;
    private int sellValue_;
    public int SellValue {
      get { return sellValue_; }
      set {
        sellValue_ = value;
      }
    }

    /// <summary>Field number for the "Weight" field.</summary>
    public const int WeightFieldNumber = 13;
    private float weight_;
    public float Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "ResidentSpEffectId1" field.</summary>
    public const int ResidentSpEffectId1FieldNumber = 14;
    private int residentSpEffectId1_;
    public int ResidentSpEffectId1 {
      get { return residentSpEffectId1_; }
      set {
        residentSpEffectId1_ = value;
      }
    }

    /// <summary>Field number for the "ResidentSpEffectId2" field.</summary>
    public const int ResidentSpEffectId2FieldNumber = 15;
    private int residentSpEffectId2_;
    public int ResidentSpEffectId2 {
      get { return residentSpEffectId2_; }
      set {
        residentSpEffectId2_ = value;
      }
    }

    /// <summary>Field number for the "ResidentSpEffectId3" field.</summary>
    public const int ResidentSpEffectId3FieldNumber = 16;
    private int residentSpEffectId3_;
    public int ResidentSpEffectId3 {
      get { return residentSpEffectId3_; }
      set {
        residentSpEffectId3_ = value;
      }
    }

    /// <summary>Field number for the "MaterialSetId" field.</summary>
    public const int MaterialSetIdFieldNumber = 17;
    private int materialSetId_;
    public int MaterialSetId {
      get { return materialSetId_; }
      set {
        materialSetId_ = value;
      }
    }

    /// <summary>Field number for the "PartsDamageRate" field.</summary>
    public const int PartsDamageRateFieldNumber = 18;
    private float partsDamageRate_;
    public float PartsDamageRate {
      get { return partsDamageRate_; }
      set {
        partsDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "ResistPoison" field.</summary>
    public const int ResistPoisonFieldNumber = 19;
    private int resistPoison_;
    public int ResistPoison {
      get { return resistPoison_; }
      set {
        resistPoison_ = value;
      }
    }

    /// <summary>Field number for the "ResistToxic" field.</summary>
    public const int ResistToxicFieldNumber = 20;
    private int resistToxic_;
    public int ResistToxic {
      get { return resistToxic_; }
      set {
        resistToxic_ = value;
      }
    }

    /// <summary>Field number for the "ResistBlood" field.</summary>
    public const int ResistBloodFieldNumber = 21;
    private int resistBlood_;
    public int ResistBlood {
      get { return resistBlood_; }
      set {
        resistBlood_ = value;
      }
    }

    /// <summary>Field number for the "ResistCurse" field.</summary>
    public const int ResistCurseFieldNumber = 22;
    private uint resistCurse_;
    public uint ResistCurse {
      get { return resistCurse_; }
      set {
        resistCurse_ = value;
      }
    }

    /// <summary>Field number for the "DefensePhysics" field.</summary>
    public const int DefensePhysicsFieldNumber = 23;
    private float defensePhysics_;
    public float DefensePhysics {
      get { return defensePhysics_; }
      set {
        defensePhysics_ = value;
      }
    }

    /// <summary>Field number for the "DefenseSlash" field.</summary>
    public const int DefenseSlashFieldNumber = 24;
    private float defenseSlash_;
    public float DefenseSlash {
      get { return defenseSlash_; }
      set {
        defenseSlash_ = value;
      }
    }

    /// <summary>Field number for the "DefenseStrike" field.</summary>
    public const int DefenseStrikeFieldNumber = 25;
    private float defenseStrike_;
    public float DefenseStrike {
      get { return defenseStrike_; }
      set {
        defenseStrike_ = value;
      }
    }

    /// <summary>Field number for the "DefenseThrust" field.</summary>
    public const int DefenseThrustFieldNumber = 26;
    private float defenseThrust_;
    public float DefenseThrust {
      get { return defenseThrust_; }
      set {
        defenseThrust_ = value;
      }
    }

    /// <summary>Field number for the "DefenseMagic" field.</summary>
    public const int DefenseMagicFieldNumber = 27;
    private float defenseMagic_;
    public float DefenseMagic {
      get { return defenseMagic_; }
      set {
        defenseMagic_ = value;
      }
    }

    /// <summary>Field number for the "DefenseFire" field.</summary>
    public const int DefenseFireFieldNumber = 28;
    private float defenseFire_;
    public float DefenseFire {
      get { return defenseFire_; }
      set {
        defenseFire_ = value;
      }
    }

    /// <summary>Field number for the "DefenseThunder" field.</summary>
    public const int DefenseThunderFieldNumber = 29;
    private float defenseThunder_;
    public float DefenseThunder {
      get { return defenseThunder_; }
      set {
        defenseThunder_ = value;
      }
    }

    /// <summary>Field number for the "EquipModelId" field.</summary>
    public const int EquipModelIdFieldNumber = 30;
    private int equipModelId_;
    public int EquipModelId {
      get { return equipModelId_; }
      set {
        equipModelId_ = value;
      }
    }

    /// <summary>Field number for the "KnockbackBounceRate" field.</summary>
    public const int KnockbackBounceRateFieldNumber = 31;
    private int knockbackBounceRate_;
    public int KnockbackBounceRate {
      get { return knockbackBounceRate_; }
      set {
        knockbackBounceRate_ = value;
      }
    }

    /// <summary>Field number for the "Durability" field.</summary>
    public const int DurabilityFieldNumber = 32;
    private int durability_;
    public int Durability {
      get { return durability_; }
      set {
        durability_ = value;
      }
    }

    /// <summary>Field number for the "DurabilityMax" field.</summary>
    public const int DurabilityMaxFieldNumber = 33;
    private int durabilityMax_;
    public int DurabilityMax {
      get { return durabilityMax_; }
      set {
        durabilityMax_ = value;
      }
    }

    /// <summary>Field number for the "SaDurability" field.</summary>
    public const int SaDurabilityFieldNumber = 34;
    private uint saDurability_;
    public uint SaDurability {
      get { return saDurability_; }
      set {
        saDurability_ = value;
      }
    }

    /// <summary>Field number for the "Poise" field.</summary>
    public const int PoiseFieldNumber = 35;
    private float poise_;
    public float Poise {
      get { return poise_; }
      set {
        poise_ = value;
      }
    }

    /// <summary>Field number for the "DefenseDark" field.</summary>
    public const int DefenseDarkFieldNumber = 36;
    private float defenseDark_;
    public float DefenseDark {
      get { return defenseDark_; }
      set {
        defenseDark_ = value;
      }
    }

    /// <summary>Field number for the "ResistFrost" field.</summary>
    public const int ResistFrostFieldNumber = 37;
    private int resistFrost_;
    public int ResistFrost {
      get { return resistFrost_; }
      set {
        resistFrost_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as EquipParamProtector);
    }

    public bool Equals(EquipParamProtector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Index != other.Index) return false;
      if (Offset != other.Offset) return false;
      if (SortId != other.SortId) return false;
      if (WanderingEquipId != other.WanderingEquipId) return false;
      if (VagrantItemLotId != other.VagrantItemLotId) return false;
      if (VagrantBonusEneDropItemLotId != other.VagrantBonusEneDropItemLotId) return false;
      if (VagrantItemEneDropItemLotId != other.VagrantItemEneDropItemLotId) return false;
      if (FixPrice != other.FixPrice) return false;
      if (BasicPrice != other.BasicPrice) return false;
      if (SellValue != other.SellValue) return false;
      if (Weight != other.Weight) return false;
      if (ResidentSpEffectId1 != other.ResidentSpEffectId1) return false;
      if (ResidentSpEffectId2 != other.ResidentSpEffectId2) return false;
      if (ResidentSpEffectId3 != other.ResidentSpEffectId3) return false;
      if (MaterialSetId != other.MaterialSetId) return false;
      if (PartsDamageRate != other.PartsDamageRate) return false;
      if (ResistPoison != other.ResistPoison) return false;
      if (ResistToxic != other.ResistToxic) return false;
      if (ResistBlood != other.ResistBlood) return false;
      if (ResistCurse != other.ResistCurse) return false;
      if (DefensePhysics != other.DefensePhysics) return false;
      if (DefenseSlash != other.DefenseSlash) return false;
      if (DefenseStrike != other.DefenseStrike) return false;
      if (DefenseThrust != other.DefenseThrust) return false;
      if (DefenseMagic != other.DefenseMagic) return false;
      if (DefenseFire != other.DefenseFire) return false;
      if (DefenseThunder != other.DefenseThunder) return false;
      if (EquipModelId != other.EquipModelId) return false;
      if (KnockbackBounceRate != other.KnockbackBounceRate) return false;
      if (Durability != other.Durability) return false;
      if (DurabilityMax != other.DurabilityMax) return false;
      if (SaDurability != other.SaDurability) return false;
      if (Poise != other.Poise) return false;
      if (DefenseDark != other.DefenseDark) return false;
      if (ResistFrost != other.ResistFrost) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (SortId != 0) hash ^= SortId.GetHashCode();
      if (WanderingEquipId != 0) hash ^= WanderingEquipId.GetHashCode();
      if (VagrantItemLotId != 0) hash ^= VagrantItemLotId.GetHashCode();
      if (VagrantBonusEneDropItemLotId != 0) hash ^= VagrantBonusEneDropItemLotId.GetHashCode();
      if (VagrantItemEneDropItemLotId != 0) hash ^= VagrantItemEneDropItemLotId.GetHashCode();
      if (FixPrice != 0) hash ^= FixPrice.GetHashCode();
      if (BasicPrice != 0) hash ^= BasicPrice.GetHashCode();
      if (SellValue != 0) hash ^= SellValue.GetHashCode();
      if (Weight != 0F) hash ^= Weight.GetHashCode();
      if (ResidentSpEffectId1 != 0) hash ^= ResidentSpEffectId1.GetHashCode();
      if (ResidentSpEffectId2 != 0) hash ^= ResidentSpEffectId2.GetHashCode();
      if (ResidentSpEffectId3 != 0) hash ^= ResidentSpEffectId3.GetHashCode();
      if (MaterialSetId != 0) hash ^= MaterialSetId.GetHashCode();
      if (PartsDamageRate != 0F) hash ^= PartsDamageRate.GetHashCode();
      if (ResistPoison != 0) hash ^= ResistPoison.GetHashCode();
      if (ResistToxic != 0) hash ^= ResistToxic.GetHashCode();
      if (ResistBlood != 0) hash ^= ResistBlood.GetHashCode();
      if (ResistCurse != 0) hash ^= ResistCurse.GetHashCode();
      if (DefensePhysics != 0F) hash ^= DefensePhysics.GetHashCode();
      if (DefenseSlash != 0F) hash ^= DefenseSlash.GetHashCode();
      if (DefenseStrike != 0F) hash ^= DefenseStrike.GetHashCode();
      if (DefenseThrust != 0F) hash ^= DefenseThrust.GetHashCode();
      if (DefenseMagic != 0F) hash ^= DefenseMagic.GetHashCode();
      if (DefenseFire != 0F) hash ^= DefenseFire.GetHashCode();
      if (DefenseThunder != 0F) hash ^= DefenseThunder.GetHashCode();
      if (EquipModelId != 0) hash ^= EquipModelId.GetHashCode();
      if (KnockbackBounceRate != 0) hash ^= KnockbackBounceRate.GetHashCode();
      if (Durability != 0) hash ^= Durability.GetHashCode();
      if (DurabilityMax != 0) hash ^= DurabilityMax.GetHashCode();
      if (SaDurability != 0) hash ^= SaDurability.GetHashCode();
      if (Poise != 0F) hash ^= Poise.GetHashCode();
      if (DefenseDark != 0F) hash ^= DefenseDark.GetHashCode();
      if (ResistFrost != 0) hash ^= ResistFrost.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Index);
      }
      if (Offset != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Offset);
      }
      if (SortId != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(SortId);
      }
      if (WanderingEquipId != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(WanderingEquipId);
      }
      if (VagrantItemLotId != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(VagrantItemLotId);
      }
      if (VagrantBonusEneDropItemLotId != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(VagrantBonusEneDropItemLotId);
      }
      if (VagrantItemEneDropItemLotId != 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(VagrantItemEneDropItemLotId);
      }
      if (FixPrice != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(FixPrice);
      }
      if (BasicPrice != 0) {
        output.WriteRawTag(88);
        output.WriteSInt32(BasicPrice);
      }
      if (SellValue != 0) {
        output.WriteRawTag(96);
        output.WriteSInt32(SellValue);
      }
      if (Weight != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(Weight);
      }
      if (ResidentSpEffectId1 != 0) {
        output.WriteRawTag(112);
        output.WriteSInt32(ResidentSpEffectId1);
      }
      if (ResidentSpEffectId2 != 0) {
        output.WriteRawTag(120);
        output.WriteSInt32(ResidentSpEffectId2);
      }
      if (ResidentSpEffectId3 != 0) {
        output.WriteRawTag(128, 1);
        output.WriteSInt32(ResidentSpEffectId3);
      }
      if (MaterialSetId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteSInt32(MaterialSetId);
      }
      if (PartsDamageRate != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(PartsDamageRate);
      }
      if (ResistPoison != 0) {
        output.WriteRawTag(152, 1);
        output.WriteSInt32(ResistPoison);
      }
      if (ResistToxic != 0) {
        output.WriteRawTag(160, 1);
        output.WriteSInt32(ResistToxic);
      }
      if (ResistBlood != 0) {
        output.WriteRawTag(168, 1);
        output.WriteSInt32(ResistBlood);
      }
      if (ResistCurse != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(ResistCurse);
      }
      if (DefensePhysics != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(DefensePhysics);
      }
      if (DefenseSlash != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(DefenseSlash);
      }
      if (DefenseStrike != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(DefenseStrike);
      }
      if (DefenseThrust != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(DefenseThrust);
      }
      if (DefenseMagic != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(DefenseMagic);
      }
      if (DefenseFire != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(DefenseFire);
      }
      if (DefenseThunder != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(DefenseThunder);
      }
      if (EquipModelId != 0) {
        output.WriteRawTag(240, 1);
        output.WriteSInt32(EquipModelId);
      }
      if (KnockbackBounceRate != 0) {
        output.WriteRawTag(248, 1);
        output.WriteSInt32(KnockbackBounceRate);
      }
      if (Durability != 0) {
        output.WriteRawTag(128, 2);
        output.WriteSInt32(Durability);
      }
      if (DurabilityMax != 0) {
        output.WriteRawTag(136, 2);
        output.WriteSInt32(DurabilityMax);
      }
      if (SaDurability != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(SaDurability);
      }
      if (Poise != 0F) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(Poise);
      }
      if (DefenseDark != 0F) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(DefenseDark);
      }
      if (ResistFrost != 0) {
        output.WriteRawTag(168, 2);
        output.WriteSInt32(ResistFrost);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Index);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Offset);
      }
      if (SortId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SortId);
      }
      if (WanderingEquipId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(WanderingEquipId);
      }
      if (VagrantItemLotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(VagrantItemLotId);
      }
      if (VagrantBonusEneDropItemLotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(VagrantBonusEneDropItemLotId);
      }
      if (VagrantItemEneDropItemLotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(VagrantItemEneDropItemLotId);
      }
      if (FixPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(FixPrice);
      }
      if (BasicPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BasicPrice);
      }
      if (SellValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SellValue);
      }
      if (Weight != 0F) {
        size += 1 + 4;
      }
      if (ResidentSpEffectId1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ResidentSpEffectId1);
      }
      if (ResidentSpEffectId2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ResidentSpEffectId2);
      }
      if (ResidentSpEffectId3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ResidentSpEffectId3);
      }
      if (MaterialSetId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(MaterialSetId);
      }
      if (PartsDamageRate != 0F) {
        size += 2 + 4;
      }
      if (ResistPoison != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ResistPoison);
      }
      if (ResistToxic != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ResistToxic);
      }
      if (ResistBlood != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ResistBlood);
      }
      if (ResistCurse != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ResistCurse);
      }
      if (DefensePhysics != 0F) {
        size += 2 + 4;
      }
      if (DefenseSlash != 0F) {
        size += 2 + 4;
      }
      if (DefenseStrike != 0F) {
        size += 2 + 4;
      }
      if (DefenseThrust != 0F) {
        size += 2 + 4;
      }
      if (DefenseMagic != 0F) {
        size += 2 + 4;
      }
      if (DefenseFire != 0F) {
        size += 2 + 4;
      }
      if (DefenseThunder != 0F) {
        size += 2 + 4;
      }
      if (EquipModelId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(EquipModelId);
      }
      if (KnockbackBounceRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(KnockbackBounceRate);
      }
      if (Durability != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Durability);
      }
      if (DurabilityMax != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DurabilityMax);
      }
      if (SaDurability != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SaDurability);
      }
      if (Poise != 0F) {
        size += 2 + 4;
      }
      if (DefenseDark != 0F) {
        size += 2 + 4;
      }
      if (ResistFrost != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ResistFrost);
      }
      return size;
    }

    public void MergeFrom(EquipParamProtector other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.SortId != 0) {
        SortId = other.SortId;
      }
      if (other.WanderingEquipId != 0) {
        WanderingEquipId = other.WanderingEquipId;
      }
      if (other.VagrantItemLotId != 0) {
        VagrantItemLotId = other.VagrantItemLotId;
      }
      if (other.VagrantBonusEneDropItemLotId != 0) {
        VagrantBonusEneDropItemLotId = other.VagrantBonusEneDropItemLotId;
      }
      if (other.VagrantItemEneDropItemLotId != 0) {
        VagrantItemEneDropItemLotId = other.VagrantItemEneDropItemLotId;
      }
      if (other.FixPrice != 0) {
        FixPrice = other.FixPrice;
      }
      if (other.BasicPrice != 0) {
        BasicPrice = other.BasicPrice;
      }
      if (other.SellValue != 0) {
        SellValue = other.SellValue;
      }
      if (other.Weight != 0F) {
        Weight = other.Weight;
      }
      if (other.ResidentSpEffectId1 != 0) {
        ResidentSpEffectId1 = other.ResidentSpEffectId1;
      }
      if (other.ResidentSpEffectId2 != 0) {
        ResidentSpEffectId2 = other.ResidentSpEffectId2;
      }
      if (other.ResidentSpEffectId3 != 0) {
        ResidentSpEffectId3 = other.ResidentSpEffectId3;
      }
      if (other.MaterialSetId != 0) {
        MaterialSetId = other.MaterialSetId;
      }
      if (other.PartsDamageRate != 0F) {
        PartsDamageRate = other.PartsDamageRate;
      }
      if (other.ResistPoison != 0) {
        ResistPoison = other.ResistPoison;
      }
      if (other.ResistToxic != 0) {
        ResistToxic = other.ResistToxic;
      }
      if (other.ResistBlood != 0) {
        ResistBlood = other.ResistBlood;
      }
      if (other.ResistCurse != 0) {
        ResistCurse = other.ResistCurse;
      }
      if (other.DefensePhysics != 0F) {
        DefensePhysics = other.DefensePhysics;
      }
      if (other.DefenseSlash != 0F) {
        DefenseSlash = other.DefenseSlash;
      }
      if (other.DefenseStrike != 0F) {
        DefenseStrike = other.DefenseStrike;
      }
      if (other.DefenseThrust != 0F) {
        DefenseThrust = other.DefenseThrust;
      }
      if (other.DefenseMagic != 0F) {
        DefenseMagic = other.DefenseMagic;
      }
      if (other.DefenseFire != 0F) {
        DefenseFire = other.DefenseFire;
      }
      if (other.DefenseThunder != 0F) {
        DefenseThunder = other.DefenseThunder;
      }
      if (other.EquipModelId != 0) {
        EquipModelId = other.EquipModelId;
      }
      if (other.KnockbackBounceRate != 0) {
        KnockbackBounceRate = other.KnockbackBounceRate;
      }
      if (other.Durability != 0) {
        Durability = other.Durability;
      }
      if (other.DurabilityMax != 0) {
        DurabilityMax = other.DurabilityMax;
      }
      if (other.SaDurability != 0) {
        SaDurability = other.SaDurability;
      }
      if (other.Poise != 0F) {
        Poise = other.Poise;
      }
      if (other.DefenseDark != 0F) {
        DefenseDark = other.DefenseDark;
      }
      if (other.ResistFrost != 0) {
        ResistFrost = other.ResistFrost;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadSInt32();
            break;
          }
          case 32: {
            Offset = input.ReadSInt32();
            break;
          }
          case 40: {
            SortId = input.ReadSInt32();
            break;
          }
          case 48: {
            WanderingEquipId = input.ReadSInt32();
            break;
          }
          case 56: {
            VagrantItemLotId = input.ReadSInt32();
            break;
          }
          case 64: {
            VagrantBonusEneDropItemLotId = input.ReadSInt32();
            break;
          }
          case 72: {
            VagrantItemEneDropItemLotId = input.ReadSInt32();
            break;
          }
          case 80: {
            FixPrice = input.ReadSInt32();
            break;
          }
          case 88: {
            BasicPrice = input.ReadSInt32();
            break;
          }
          case 96: {
            SellValue = input.ReadSInt32();
            break;
          }
          case 109: {
            Weight = input.ReadFloat();
            break;
          }
          case 112: {
            ResidentSpEffectId1 = input.ReadSInt32();
            break;
          }
          case 120: {
            ResidentSpEffectId2 = input.ReadSInt32();
            break;
          }
          case 128: {
            ResidentSpEffectId3 = input.ReadSInt32();
            break;
          }
          case 136: {
            MaterialSetId = input.ReadSInt32();
            break;
          }
          case 149: {
            PartsDamageRate = input.ReadFloat();
            break;
          }
          case 152: {
            ResistPoison = input.ReadSInt32();
            break;
          }
          case 160: {
            ResistToxic = input.ReadSInt32();
            break;
          }
          case 168: {
            ResistBlood = input.ReadSInt32();
            break;
          }
          case 176: {
            ResistCurse = input.ReadUInt32();
            break;
          }
          case 189: {
            DefensePhysics = input.ReadFloat();
            break;
          }
          case 197: {
            DefenseSlash = input.ReadFloat();
            break;
          }
          case 205: {
            DefenseStrike = input.ReadFloat();
            break;
          }
          case 213: {
            DefenseThrust = input.ReadFloat();
            break;
          }
          case 221: {
            DefenseMagic = input.ReadFloat();
            break;
          }
          case 229: {
            DefenseFire = input.ReadFloat();
            break;
          }
          case 237: {
            DefenseThunder = input.ReadFloat();
            break;
          }
          case 240: {
            EquipModelId = input.ReadSInt32();
            break;
          }
          case 248: {
            KnockbackBounceRate = input.ReadSInt32();
            break;
          }
          case 256: {
            Durability = input.ReadSInt32();
            break;
          }
          case 264: {
            DurabilityMax = input.ReadSInt32();
            break;
          }
          case 272: {
            SaDurability = input.ReadUInt32();
            break;
          }
          case 285: {
            Poise = input.ReadFloat();
            break;
          }
          case 293: {
            DefenseDark = input.ReadFloat();
            break;
          }
          case 296: {
            ResistFrost = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ReinforceParamWeapon : pb::IMessage<ReinforceParamWeapon> {
    private static readonly pb::MessageParser<ReinforceParamWeapon> _parser = new pb::MessageParser<ReinforceParamWeapon>(() => new ReinforceParamWeapon());
    public static pb::MessageParser<ReinforceParamWeapon> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ds3Ext.Ds3ExtReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ReinforceParamWeapon() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ReinforceParamWeapon(ReinforceParamWeapon other) : this() {
      id_ = other.id_;
      index_ = other.index_;
      offset_ = other.offset_;
      physicsAtkRate_ = other.physicsAtkRate_;
      magicAtkRate_ = other.magicAtkRate_;
      fireAtkRate_ = other.fireAtkRate_;
      thunderAtkRate_ = other.thunderAtkRate_;
      staminaAtkRate_ = other.staminaAtkRate_;
      saWeaponAtkRate_ = other.saWeaponAtkRate_;
      saDurabilityRate_ = other.saDurabilityRate_;
      correctStrengthRate_ = other.correctStrengthRate_;
      correctAgilityRate_ = other.correctAgilityRate_;
      correctMagicRate_ = other.correctMagicRate_;
      correctFaithRate_ = other.correctFaithRate_;
      physicsGuardCutRate_ = other.physicsGuardCutRate_;
      magicGuardCutRate_ = other.magicGuardCutRate_;
      fireGuardCutRate_ = other.fireGuardCutRate_;
      thunderGuardCutRate_ = other.thunderGuardCutRate_;
      poisonGuardResistRate_ = other.poisonGuardResistRate_;
      diseaseGuardResistRate_ = other.diseaseGuardResistRate_;
      bloodGuardResistRate_ = other.bloodGuardResistRate_;
      curseGuardResistRate_ = other.curseGuardResistRate_;
      staminaGuardDefRate_ = other.staminaGuardDefRate_;
      spEffectId1_ = other.spEffectId1_;
      spEffectId2_ = other.spEffectId2_;
      spEffectId3_ = other.spEffectId3_;
      residentSpEffectId1_ = other.residentSpEffectId1_;
      residentSpEffectId2_ = other.residentSpEffectId2_;
      residentSpEffectId3_ = other.residentSpEffectId3_;
      materialSetId1_ = other.materialSetId1_;
      materialSetId2_ = other.materialSetId2_;
      darkAtkRate_ = other.darkAtkRate_;
      darkGuardResistRate_ = other.darkGuardResistRate_;
      correctLuckRate_ = other.correctLuckRate_;
      unknown0_ = other.unknown0_;
      unknown1_ = other.unknown1_;
      unknown2_ = other.unknown2_;
      unknown3_ = other.unknown3_;
      unknown4_ = other.unknown4_;
      unknown5_ = other.unknown5_;
      unknown6_ = other.unknown6_;
      unknown7_ = other.unknown7_;
      unknown8_ = other.unknown8_;
      unknown9_ = other.unknown9_;
      unknown10_ = other.unknown10_;
      unknown11_ = other.unknown11_;
    }

    public ReinforceParamWeapon Clone() {
      return new ReinforceParamWeapon(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Offset" field.</summary>
    public const int OffsetFieldNumber = 4;
    private int offset_;
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "PhysicsAtkRate" field.</summary>
    public const int PhysicsAtkRateFieldNumber = 5;
    private float physicsAtkRate_;
    public float PhysicsAtkRate {
      get { return physicsAtkRate_; }
      set {
        physicsAtkRate_ = value;
      }
    }

    /// <summary>Field number for the "MagicAtkRate" field.</summary>
    public const int MagicAtkRateFieldNumber = 6;
    private float magicAtkRate_;
    public float MagicAtkRate {
      get { return magicAtkRate_; }
      set {
        magicAtkRate_ = value;
      }
    }

    /// <summary>Field number for the "FireAtkRate" field.</summary>
    public const int FireAtkRateFieldNumber = 7;
    private float fireAtkRate_;
    public float FireAtkRate {
      get { return fireAtkRate_; }
      set {
        fireAtkRate_ = value;
      }
    }

    /// <summary>Field number for the "ThunderAtkRate" field.</summary>
    public const int ThunderAtkRateFieldNumber = 8;
    private float thunderAtkRate_;
    public float ThunderAtkRate {
      get { return thunderAtkRate_; }
      set {
        thunderAtkRate_ = value;
      }
    }

    /// <summary>Field number for the "StaminaAtkRate" field.</summary>
    public const int StaminaAtkRateFieldNumber = 9;
    private float staminaAtkRate_;
    public float StaminaAtkRate {
      get { return staminaAtkRate_; }
      set {
        staminaAtkRate_ = value;
      }
    }

    /// <summary>Field number for the "SaWeaponAtkRate" field.</summary>
    public const int SaWeaponAtkRateFieldNumber = 10;
    private float saWeaponAtkRate_;
    public float SaWeaponAtkRate {
      get { return saWeaponAtkRate_; }
      set {
        saWeaponAtkRate_ = value;
      }
    }

    /// <summary>Field number for the "SaDurabilityRate" field.</summary>
    public const int SaDurabilityRateFieldNumber = 11;
    private float saDurabilityRate_;
    public float SaDurabilityRate {
      get { return saDurabilityRate_; }
      set {
        saDurabilityRate_ = value;
      }
    }

    /// <summary>Field number for the "CorrectStrengthRate" field.</summary>
    public const int CorrectStrengthRateFieldNumber = 12;
    private float correctStrengthRate_;
    public float CorrectStrengthRate {
      get { return correctStrengthRate_; }
      set {
        correctStrengthRate_ = value;
      }
    }

    /// <summary>Field number for the "CorrectAgilityRate" field.</summary>
    public const int CorrectAgilityRateFieldNumber = 13;
    private float correctAgilityRate_;
    public float CorrectAgilityRate {
      get { return correctAgilityRate_; }
      set {
        correctAgilityRate_ = value;
      }
    }

    /// <summary>Field number for the "CorrectMagicRate" field.</summary>
    public const int CorrectMagicRateFieldNumber = 14;
    private float correctMagicRate_;
    public float CorrectMagicRate {
      get { return correctMagicRate_; }
      set {
        correctMagicRate_ = value;
      }
    }

    /// <summary>Field number for the "CorrectFaithRate" field.</summary>
    public const int CorrectFaithRateFieldNumber = 15;
    private float correctFaithRate_;
    public float CorrectFaithRate {
      get { return correctFaithRate_; }
      set {
        correctFaithRate_ = value;
      }
    }

    /// <summary>Field number for the "PhysicsGuardCutRate" field.</summary>
    public const int PhysicsGuardCutRateFieldNumber = 16;
    private float physicsGuardCutRate_;
    public float PhysicsGuardCutRate {
      get { return physicsGuardCutRate_; }
      set {
        physicsGuardCutRate_ = value;
      }
    }

    /// <summary>Field number for the "MagicGuardCutRate" field.</summary>
    public const int MagicGuardCutRateFieldNumber = 17;
    private float magicGuardCutRate_;
    public float MagicGuardCutRate {
      get { return magicGuardCutRate_; }
      set {
        magicGuardCutRate_ = value;
      }
    }

    /// <summary>Field number for the "FireGuardCutRate" field.</summary>
    public const int FireGuardCutRateFieldNumber = 18;
    private float fireGuardCutRate_;
    public float FireGuardCutRate {
      get { return fireGuardCutRate_; }
      set {
        fireGuardCutRate_ = value;
      }
    }

    /// <summary>Field number for the "ThunderGuardCutRate" field.</summary>
    public const int ThunderGuardCutRateFieldNumber = 19;
    private float thunderGuardCutRate_;
    public float ThunderGuardCutRate {
      get { return thunderGuardCutRate_; }
      set {
        thunderGuardCutRate_ = value;
      }
    }

    /// <summary>Field number for the "PoisonGuardResistRate" field.</summary>
    public const int PoisonGuardResistRateFieldNumber = 20;
    private float poisonGuardResistRate_;
    public float PoisonGuardResistRate {
      get { return poisonGuardResistRate_; }
      set {
        poisonGuardResistRate_ = value;
      }
    }

    /// <summary>Field number for the "DiseaseGuardResistRate" field.</summary>
    public const int DiseaseGuardResistRateFieldNumber = 21;
    private float diseaseGuardResistRate_;
    public float DiseaseGuardResistRate {
      get { return diseaseGuardResistRate_; }
      set {
        diseaseGuardResistRate_ = value;
      }
    }

    /// <summary>Field number for the "BloodGuardResistRate" field.</summary>
    public const int BloodGuardResistRateFieldNumber = 22;
    private float bloodGuardResistRate_;
    public float BloodGuardResistRate {
      get { return bloodGuardResistRate_; }
      set {
        bloodGuardResistRate_ = value;
      }
    }

    /// <summary>Field number for the "CurseGuardResistRate" field.</summary>
    public const int CurseGuardResistRateFieldNumber = 23;
    private float curseGuardResistRate_;
    public float CurseGuardResistRate {
      get { return curseGuardResistRate_; }
      set {
        curseGuardResistRate_ = value;
      }
    }

    /// <summary>Field number for the "StaminaGuardDefRate" field.</summary>
    public const int StaminaGuardDefRateFieldNumber = 24;
    private float staminaGuardDefRate_;
    public float StaminaGuardDefRate {
      get { return staminaGuardDefRate_; }
      set {
        staminaGuardDefRate_ = value;
      }
    }

    /// <summary>Field number for the "SpEffectId1" field.</summary>
    public const int SpEffectId1FieldNumber = 25;
    private uint spEffectId1_;
    public uint SpEffectId1 {
      get { return spEffectId1_; }
      set {
        spEffectId1_ = value;
      }
    }

    /// <summary>Field number for the "SpEffectId2" field.</summary>
    public const int SpEffectId2FieldNumber = 26;
    private uint spEffectId2_;
    public uint SpEffectId2 {
      get { return spEffectId2_; }
      set {
        spEffectId2_ = value;
      }
    }

    /// <summary>Field number for the "SpEffectId3" field.</summary>
    public const int SpEffectId3FieldNumber = 27;
    private uint spEffectId3_;
    public uint SpEffectId3 {
      get { return spEffectId3_; }
      set {
        spEffectId3_ = value;
      }
    }

    /// <summary>Field number for the "ResidentSpEffectId1" field.</summary>
    public const int ResidentSpEffectId1FieldNumber = 28;
    private uint residentSpEffectId1_;
    public uint ResidentSpEffectId1 {
      get { return residentSpEffectId1_; }
      set {
        residentSpEffectId1_ = value;
      }
    }

    /// <summary>Field number for the "ResidentSpEffectId2" field.</summary>
    public const int ResidentSpEffectId2FieldNumber = 29;
    private uint residentSpEffectId2_;
    public uint ResidentSpEffectId2 {
      get { return residentSpEffectId2_; }
      set {
        residentSpEffectId2_ = value;
      }
    }

    /// <summary>Field number for the "ResidentSpEffectId3" field.</summary>
    public const int ResidentSpEffectId3FieldNumber = 30;
    private uint residentSpEffectId3_;
    public uint ResidentSpEffectId3 {
      get { return residentSpEffectId3_; }
      set {
        residentSpEffectId3_ = value;
      }
    }

    /// <summary>Field number for the "MaterialSetId1" field.</summary>
    public const int MaterialSetId1FieldNumber = 31;
    private uint materialSetId1_;
    public uint MaterialSetId1 {
      get { return materialSetId1_; }
      set {
        materialSetId1_ = value;
      }
    }

    /// <summary>Field number for the "MaterialSetId2" field.</summary>
    public const int MaterialSetId2FieldNumber = 32;
    private uint materialSetId2_;
    public uint MaterialSetId2 {
      get { return materialSetId2_; }
      set {
        materialSetId2_ = value;
      }
    }

    /// <summary>Field number for the "DarkAtkRate" field.</summary>
    public const int DarkAtkRateFieldNumber = 33;
    private float darkAtkRate_;
    public float DarkAtkRate {
      get { return darkAtkRate_; }
      set {
        darkAtkRate_ = value;
      }
    }

    /// <summary>Field number for the "DarkGuardResistRate" field.</summary>
    public const int DarkGuardResistRateFieldNumber = 34;
    private float darkGuardResistRate_;
    public float DarkGuardResistRate {
      get { return darkGuardResistRate_; }
      set {
        darkGuardResistRate_ = value;
      }
    }

    /// <summary>Field number for the "CorrectLuckRate" field.</summary>
    public const int CorrectLuckRateFieldNumber = 35;
    private float correctLuckRate_;
    public float CorrectLuckRate {
      get { return correctLuckRate_; }
      set {
        correctLuckRate_ = value;
      }
    }

    /// <summary>Field number for the "Unknown0" field.</summary>
    public const int Unknown0FieldNumber = 36;
    private uint unknown0_;
    public uint Unknown0 {
      get { return unknown0_; }
      set {
        unknown0_ = value;
      }
    }

    /// <summary>Field number for the "Unknown1" field.</summary>
    public const int Unknown1FieldNumber = 37;
    private uint unknown1_;
    public uint Unknown1 {
      get { return unknown1_; }
      set {
        unknown1_ = value;
      }
    }

    /// <summary>Field number for the "Unknown2" field.</summary>
    public const int Unknown2FieldNumber = 38;
    private uint unknown2_;
    public uint Unknown2 {
      get { return unknown2_; }
      set {
        unknown2_ = value;
      }
    }

    /// <summary>Field number for the "Unknown3" field.</summary>
    public const int Unknown3FieldNumber = 39;
    private uint unknown3_;
    public uint Unknown3 {
      get { return unknown3_; }
      set {
        unknown3_ = value;
      }
    }

    /// <summary>Field number for the "Unknown4" field.</summary>
    public const int Unknown4FieldNumber = 40;
    private uint unknown4_;
    public uint Unknown4 {
      get { return unknown4_; }
      set {
        unknown4_ = value;
      }
    }

    /// <summary>Field number for the "Unknown5" field.</summary>
    public const int Unknown5FieldNumber = 41;
    private uint unknown5_;
    public uint Unknown5 {
      get { return unknown5_; }
      set {
        unknown5_ = value;
      }
    }

    /// <summary>Field number for the "Unknown6" field.</summary>
    public const int Unknown6FieldNumber = 42;
    private uint unknown6_;
    public uint Unknown6 {
      get { return unknown6_; }
      set {
        unknown6_ = value;
      }
    }

    /// <summary>Field number for the "Unknown7" field.</summary>
    public const int Unknown7FieldNumber = 43;
    private uint unknown7_;
    public uint Unknown7 {
      get { return unknown7_; }
      set {
        unknown7_ = value;
      }
    }

    /// <summary>Field number for the "Unknown8" field.</summary>
    public const int Unknown8FieldNumber = 44;
    private uint unknown8_;
    public uint Unknown8 {
      get { return unknown8_; }
      set {
        unknown8_ = value;
      }
    }

    /// <summary>Field number for the "Unknown9" field.</summary>
    public const int Unknown9FieldNumber = 45;
    private uint unknown9_;
    public uint Unknown9 {
      get { return unknown9_; }
      set {
        unknown9_ = value;
      }
    }

    /// <summary>Field number for the "Unknown10" field.</summary>
    public const int Unknown10FieldNumber = 46;
    private uint unknown10_;
    public uint Unknown10 {
      get { return unknown10_; }
      set {
        unknown10_ = value;
      }
    }

    /// <summary>Field number for the "Unknown11" field.</summary>
    public const int Unknown11FieldNumber = 47;
    private uint unknown11_;
    public uint Unknown11 {
      get { return unknown11_; }
      set {
        unknown11_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ReinforceParamWeapon);
    }

    public bool Equals(ReinforceParamWeapon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Index != other.Index) return false;
      if (Offset != other.Offset) return false;
      if (PhysicsAtkRate != other.PhysicsAtkRate) return false;
      if (MagicAtkRate != other.MagicAtkRate) return false;
      if (FireAtkRate != other.FireAtkRate) return false;
      if (ThunderAtkRate != other.ThunderAtkRate) return false;
      if (StaminaAtkRate != other.StaminaAtkRate) return false;
      if (SaWeaponAtkRate != other.SaWeaponAtkRate) return false;
      if (SaDurabilityRate != other.SaDurabilityRate) return false;
      if (CorrectStrengthRate != other.CorrectStrengthRate) return false;
      if (CorrectAgilityRate != other.CorrectAgilityRate) return false;
      if (CorrectMagicRate != other.CorrectMagicRate) return false;
      if (CorrectFaithRate != other.CorrectFaithRate) return false;
      if (PhysicsGuardCutRate != other.PhysicsGuardCutRate) return false;
      if (MagicGuardCutRate != other.MagicGuardCutRate) return false;
      if (FireGuardCutRate != other.FireGuardCutRate) return false;
      if (ThunderGuardCutRate != other.ThunderGuardCutRate) return false;
      if (PoisonGuardResistRate != other.PoisonGuardResistRate) return false;
      if (DiseaseGuardResistRate != other.DiseaseGuardResistRate) return false;
      if (BloodGuardResistRate != other.BloodGuardResistRate) return false;
      if (CurseGuardResistRate != other.CurseGuardResistRate) return false;
      if (StaminaGuardDefRate != other.StaminaGuardDefRate) return false;
      if (SpEffectId1 != other.SpEffectId1) return false;
      if (SpEffectId2 != other.SpEffectId2) return false;
      if (SpEffectId3 != other.SpEffectId3) return false;
      if (ResidentSpEffectId1 != other.ResidentSpEffectId1) return false;
      if (ResidentSpEffectId2 != other.ResidentSpEffectId2) return false;
      if (ResidentSpEffectId3 != other.ResidentSpEffectId3) return false;
      if (MaterialSetId1 != other.MaterialSetId1) return false;
      if (MaterialSetId2 != other.MaterialSetId2) return false;
      if (DarkAtkRate != other.DarkAtkRate) return false;
      if (DarkGuardResistRate != other.DarkGuardResistRate) return false;
      if (CorrectLuckRate != other.CorrectLuckRate) return false;
      if (Unknown0 != other.Unknown0) return false;
      if (Unknown1 != other.Unknown1) return false;
      if (Unknown2 != other.Unknown2) return false;
      if (Unknown3 != other.Unknown3) return false;
      if (Unknown4 != other.Unknown4) return false;
      if (Unknown5 != other.Unknown5) return false;
      if (Unknown6 != other.Unknown6) return false;
      if (Unknown7 != other.Unknown7) return false;
      if (Unknown8 != other.Unknown8) return false;
      if (Unknown9 != other.Unknown9) return false;
      if (Unknown10 != other.Unknown10) return false;
      if (Unknown11 != other.Unknown11) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (PhysicsAtkRate != 0F) hash ^= PhysicsAtkRate.GetHashCode();
      if (MagicAtkRate != 0F) hash ^= MagicAtkRate.GetHashCode();
      if (FireAtkRate != 0F) hash ^= FireAtkRate.GetHashCode();
      if (ThunderAtkRate != 0F) hash ^= ThunderAtkRate.GetHashCode();
      if (StaminaAtkRate != 0F) hash ^= StaminaAtkRate.GetHashCode();
      if (SaWeaponAtkRate != 0F) hash ^= SaWeaponAtkRate.GetHashCode();
      if (SaDurabilityRate != 0F) hash ^= SaDurabilityRate.GetHashCode();
      if (CorrectStrengthRate != 0F) hash ^= CorrectStrengthRate.GetHashCode();
      if (CorrectAgilityRate != 0F) hash ^= CorrectAgilityRate.GetHashCode();
      if (CorrectMagicRate != 0F) hash ^= CorrectMagicRate.GetHashCode();
      if (CorrectFaithRate != 0F) hash ^= CorrectFaithRate.GetHashCode();
      if (PhysicsGuardCutRate != 0F) hash ^= PhysicsGuardCutRate.GetHashCode();
      if (MagicGuardCutRate != 0F) hash ^= MagicGuardCutRate.GetHashCode();
      if (FireGuardCutRate != 0F) hash ^= FireGuardCutRate.GetHashCode();
      if (ThunderGuardCutRate != 0F) hash ^= ThunderGuardCutRate.GetHashCode();
      if (PoisonGuardResistRate != 0F) hash ^= PoisonGuardResistRate.GetHashCode();
      if (DiseaseGuardResistRate != 0F) hash ^= DiseaseGuardResistRate.GetHashCode();
      if (BloodGuardResistRate != 0F) hash ^= BloodGuardResistRate.GetHashCode();
      if (CurseGuardResistRate != 0F) hash ^= CurseGuardResistRate.GetHashCode();
      if (StaminaGuardDefRate != 0F) hash ^= StaminaGuardDefRate.GetHashCode();
      if (SpEffectId1 != 0) hash ^= SpEffectId1.GetHashCode();
      if (SpEffectId2 != 0) hash ^= SpEffectId2.GetHashCode();
      if (SpEffectId3 != 0) hash ^= SpEffectId3.GetHashCode();
      if (ResidentSpEffectId1 != 0) hash ^= ResidentSpEffectId1.GetHashCode();
      if (ResidentSpEffectId2 != 0) hash ^= ResidentSpEffectId2.GetHashCode();
      if (ResidentSpEffectId3 != 0) hash ^= ResidentSpEffectId3.GetHashCode();
      if (MaterialSetId1 != 0) hash ^= MaterialSetId1.GetHashCode();
      if (MaterialSetId2 != 0) hash ^= MaterialSetId2.GetHashCode();
      if (DarkAtkRate != 0F) hash ^= DarkAtkRate.GetHashCode();
      if (DarkGuardResistRate != 0F) hash ^= DarkGuardResistRate.GetHashCode();
      if (CorrectLuckRate != 0F) hash ^= CorrectLuckRate.GetHashCode();
      if (Unknown0 != 0) hash ^= Unknown0.GetHashCode();
      if (Unknown1 != 0) hash ^= Unknown1.GetHashCode();
      if (Unknown2 != 0) hash ^= Unknown2.GetHashCode();
      if (Unknown3 != 0) hash ^= Unknown3.GetHashCode();
      if (Unknown4 != 0) hash ^= Unknown4.GetHashCode();
      if (Unknown5 != 0) hash ^= Unknown5.GetHashCode();
      if (Unknown6 != 0) hash ^= Unknown6.GetHashCode();
      if (Unknown7 != 0) hash ^= Unknown7.GetHashCode();
      if (Unknown8 != 0) hash ^= Unknown8.GetHashCode();
      if (Unknown9 != 0) hash ^= Unknown9.GetHashCode();
      if (Unknown10 != 0) hash ^= Unknown10.GetHashCode();
      if (Unknown11 != 0) hash ^= Unknown11.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Index);
      }
      if (Offset != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Offset);
      }
      if (PhysicsAtkRate != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PhysicsAtkRate);
      }
      if (MagicAtkRate != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(MagicAtkRate);
      }
      if (FireAtkRate != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(FireAtkRate);
      }
      if (ThunderAtkRate != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(ThunderAtkRate);
      }
      if (StaminaAtkRate != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(StaminaAtkRate);
      }
      if (SaWeaponAtkRate != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(SaWeaponAtkRate);
      }
      if (SaDurabilityRate != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(SaDurabilityRate);
      }
      if (CorrectStrengthRate != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(CorrectStrengthRate);
      }
      if (CorrectAgilityRate != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(CorrectAgilityRate);
      }
      if (CorrectMagicRate != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(CorrectMagicRate);
      }
      if (CorrectFaithRate != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(CorrectFaithRate);
      }
      if (PhysicsGuardCutRate != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(PhysicsGuardCutRate);
      }
      if (MagicGuardCutRate != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(MagicGuardCutRate);
      }
      if (FireGuardCutRate != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(FireGuardCutRate);
      }
      if (ThunderGuardCutRate != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(ThunderGuardCutRate);
      }
      if (PoisonGuardResistRate != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(PoisonGuardResistRate);
      }
      if (DiseaseGuardResistRate != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(DiseaseGuardResistRate);
      }
      if (BloodGuardResistRate != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(BloodGuardResistRate);
      }
      if (CurseGuardResistRate != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(CurseGuardResistRate);
      }
      if (StaminaGuardDefRate != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(StaminaGuardDefRate);
      }
      if (SpEffectId1 != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(SpEffectId1);
      }
      if (SpEffectId2 != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(SpEffectId2);
      }
      if (SpEffectId3 != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(SpEffectId3);
      }
      if (ResidentSpEffectId1 != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(ResidentSpEffectId1);
      }
      if (ResidentSpEffectId2 != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(ResidentSpEffectId2);
      }
      if (ResidentSpEffectId3 != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(ResidentSpEffectId3);
      }
      if (MaterialSetId1 != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(MaterialSetId1);
      }
      if (MaterialSetId2 != 0) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(MaterialSetId2);
      }
      if (DarkAtkRate != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(DarkAtkRate);
      }
      if (DarkGuardResistRate != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(DarkGuardResistRate);
      }
      if (CorrectLuckRate != 0F) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(CorrectLuckRate);
      }
      if (Unknown0 != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(Unknown0);
      }
      if (Unknown1 != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(Unknown1);
      }
      if (Unknown2 != 0) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(Unknown2);
      }
      if (Unknown3 != 0) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(Unknown3);
      }
      if (Unknown4 != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(Unknown4);
      }
      if (Unknown5 != 0) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(Unknown5);
      }
      if (Unknown6 != 0) {
        output.WriteRawTag(208, 2);
        output.WriteUInt32(Unknown6);
      }
      if (Unknown7 != 0) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(Unknown7);
      }
      if (Unknown8 != 0) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(Unknown8);
      }
      if (Unknown9 != 0) {
        output.WriteRawTag(232, 2);
        output.WriteUInt32(Unknown9);
      }
      if (Unknown10 != 0) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(Unknown10);
      }
      if (Unknown11 != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(Unknown11);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Index);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Offset);
      }
      if (PhysicsAtkRate != 0F) {
        size += 1 + 4;
      }
      if (MagicAtkRate != 0F) {
        size += 1 + 4;
      }
      if (FireAtkRate != 0F) {
        size += 1 + 4;
      }
      if (ThunderAtkRate != 0F) {
        size += 1 + 4;
      }
      if (StaminaAtkRate != 0F) {
        size += 1 + 4;
      }
      if (SaWeaponAtkRate != 0F) {
        size += 1 + 4;
      }
      if (SaDurabilityRate != 0F) {
        size += 1 + 4;
      }
      if (CorrectStrengthRate != 0F) {
        size += 1 + 4;
      }
      if (CorrectAgilityRate != 0F) {
        size += 1 + 4;
      }
      if (CorrectMagicRate != 0F) {
        size += 1 + 4;
      }
      if (CorrectFaithRate != 0F) {
        size += 1 + 4;
      }
      if (PhysicsGuardCutRate != 0F) {
        size += 2 + 4;
      }
      if (MagicGuardCutRate != 0F) {
        size += 2 + 4;
      }
      if (FireGuardCutRate != 0F) {
        size += 2 + 4;
      }
      if (ThunderGuardCutRate != 0F) {
        size += 2 + 4;
      }
      if (PoisonGuardResistRate != 0F) {
        size += 2 + 4;
      }
      if (DiseaseGuardResistRate != 0F) {
        size += 2 + 4;
      }
      if (BloodGuardResistRate != 0F) {
        size += 2 + 4;
      }
      if (CurseGuardResistRate != 0F) {
        size += 2 + 4;
      }
      if (StaminaGuardDefRate != 0F) {
        size += 2 + 4;
      }
      if (SpEffectId1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpEffectId1);
      }
      if (SpEffectId2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpEffectId2);
      }
      if (SpEffectId3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpEffectId3);
      }
      if (ResidentSpEffectId1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ResidentSpEffectId1);
      }
      if (ResidentSpEffectId2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ResidentSpEffectId2);
      }
      if (ResidentSpEffectId3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ResidentSpEffectId3);
      }
      if (MaterialSetId1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaterialSetId1);
      }
      if (MaterialSetId2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaterialSetId2);
      }
      if (DarkAtkRate != 0F) {
        size += 2 + 4;
      }
      if (DarkGuardResistRate != 0F) {
        size += 2 + 4;
      }
      if (CorrectLuckRate != 0F) {
        size += 2 + 4;
      }
      if (Unknown0 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown0);
      }
      if (Unknown1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown1);
      }
      if (Unknown2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown2);
      }
      if (Unknown3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown3);
      }
      if (Unknown4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown4);
      }
      if (Unknown5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown5);
      }
      if (Unknown6 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown6);
      }
      if (Unknown7 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown7);
      }
      if (Unknown8 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown8);
      }
      if (Unknown9 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown9);
      }
      if (Unknown10 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown10);
      }
      if (Unknown11 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown11);
      }
      return size;
    }

    public void MergeFrom(ReinforceParamWeapon other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.PhysicsAtkRate != 0F) {
        PhysicsAtkRate = other.PhysicsAtkRate;
      }
      if (other.MagicAtkRate != 0F) {
        MagicAtkRate = other.MagicAtkRate;
      }
      if (other.FireAtkRate != 0F) {
        FireAtkRate = other.FireAtkRate;
      }
      if (other.ThunderAtkRate != 0F) {
        ThunderAtkRate = other.ThunderAtkRate;
      }
      if (other.StaminaAtkRate != 0F) {
        StaminaAtkRate = other.StaminaAtkRate;
      }
      if (other.SaWeaponAtkRate != 0F) {
        SaWeaponAtkRate = other.SaWeaponAtkRate;
      }
      if (other.SaDurabilityRate != 0F) {
        SaDurabilityRate = other.SaDurabilityRate;
      }
      if (other.CorrectStrengthRate != 0F) {
        CorrectStrengthRate = other.CorrectStrengthRate;
      }
      if (other.CorrectAgilityRate != 0F) {
        CorrectAgilityRate = other.CorrectAgilityRate;
      }
      if (other.CorrectMagicRate != 0F) {
        CorrectMagicRate = other.CorrectMagicRate;
      }
      if (other.CorrectFaithRate != 0F) {
        CorrectFaithRate = other.CorrectFaithRate;
      }
      if (other.PhysicsGuardCutRate != 0F) {
        PhysicsGuardCutRate = other.PhysicsGuardCutRate;
      }
      if (other.MagicGuardCutRate != 0F) {
        MagicGuardCutRate = other.MagicGuardCutRate;
      }
      if (other.FireGuardCutRate != 0F) {
        FireGuardCutRate = other.FireGuardCutRate;
      }
      if (other.ThunderGuardCutRate != 0F) {
        ThunderGuardCutRate = other.ThunderGuardCutRate;
      }
      if (other.PoisonGuardResistRate != 0F) {
        PoisonGuardResistRate = other.PoisonGuardResistRate;
      }
      if (other.DiseaseGuardResistRate != 0F) {
        DiseaseGuardResistRate = other.DiseaseGuardResistRate;
      }
      if (other.BloodGuardResistRate != 0F) {
        BloodGuardResistRate = other.BloodGuardResistRate;
      }
      if (other.CurseGuardResistRate != 0F) {
        CurseGuardResistRate = other.CurseGuardResistRate;
      }
      if (other.StaminaGuardDefRate != 0F) {
        StaminaGuardDefRate = other.StaminaGuardDefRate;
      }
      if (other.SpEffectId1 != 0) {
        SpEffectId1 = other.SpEffectId1;
      }
      if (other.SpEffectId2 != 0) {
        SpEffectId2 = other.SpEffectId2;
      }
      if (other.SpEffectId3 != 0) {
        SpEffectId3 = other.SpEffectId3;
      }
      if (other.ResidentSpEffectId1 != 0) {
        ResidentSpEffectId1 = other.ResidentSpEffectId1;
      }
      if (other.ResidentSpEffectId2 != 0) {
        ResidentSpEffectId2 = other.ResidentSpEffectId2;
      }
      if (other.ResidentSpEffectId3 != 0) {
        ResidentSpEffectId3 = other.ResidentSpEffectId3;
      }
      if (other.MaterialSetId1 != 0) {
        MaterialSetId1 = other.MaterialSetId1;
      }
      if (other.MaterialSetId2 != 0) {
        MaterialSetId2 = other.MaterialSetId2;
      }
      if (other.DarkAtkRate != 0F) {
        DarkAtkRate = other.DarkAtkRate;
      }
      if (other.DarkGuardResistRate != 0F) {
        DarkGuardResistRate = other.DarkGuardResistRate;
      }
      if (other.CorrectLuckRate != 0F) {
        CorrectLuckRate = other.CorrectLuckRate;
      }
      if (other.Unknown0 != 0) {
        Unknown0 = other.Unknown0;
      }
      if (other.Unknown1 != 0) {
        Unknown1 = other.Unknown1;
      }
      if (other.Unknown2 != 0) {
        Unknown2 = other.Unknown2;
      }
      if (other.Unknown3 != 0) {
        Unknown3 = other.Unknown3;
      }
      if (other.Unknown4 != 0) {
        Unknown4 = other.Unknown4;
      }
      if (other.Unknown5 != 0) {
        Unknown5 = other.Unknown5;
      }
      if (other.Unknown6 != 0) {
        Unknown6 = other.Unknown6;
      }
      if (other.Unknown7 != 0) {
        Unknown7 = other.Unknown7;
      }
      if (other.Unknown8 != 0) {
        Unknown8 = other.Unknown8;
      }
      if (other.Unknown9 != 0) {
        Unknown9 = other.Unknown9;
      }
      if (other.Unknown10 != 0) {
        Unknown10 = other.Unknown10;
      }
      if (other.Unknown11 != 0) {
        Unknown11 = other.Unknown11;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadSInt32();
            break;
          }
          case 32: {
            Offset = input.ReadSInt32();
            break;
          }
          case 45: {
            PhysicsAtkRate = input.ReadFloat();
            break;
          }
          case 53: {
            MagicAtkRate = input.ReadFloat();
            break;
          }
          case 61: {
            FireAtkRate = input.ReadFloat();
            break;
          }
          case 69: {
            ThunderAtkRate = input.ReadFloat();
            break;
          }
          case 77: {
            StaminaAtkRate = input.ReadFloat();
            break;
          }
          case 85: {
            SaWeaponAtkRate = input.ReadFloat();
            break;
          }
          case 93: {
            SaDurabilityRate = input.ReadFloat();
            break;
          }
          case 101: {
            CorrectStrengthRate = input.ReadFloat();
            break;
          }
          case 109: {
            CorrectAgilityRate = input.ReadFloat();
            break;
          }
          case 117: {
            CorrectMagicRate = input.ReadFloat();
            break;
          }
          case 125: {
            CorrectFaithRate = input.ReadFloat();
            break;
          }
          case 133: {
            PhysicsGuardCutRate = input.ReadFloat();
            break;
          }
          case 141: {
            MagicGuardCutRate = input.ReadFloat();
            break;
          }
          case 149: {
            FireGuardCutRate = input.ReadFloat();
            break;
          }
          case 157: {
            ThunderGuardCutRate = input.ReadFloat();
            break;
          }
          case 165: {
            PoisonGuardResistRate = input.ReadFloat();
            break;
          }
          case 173: {
            DiseaseGuardResistRate = input.ReadFloat();
            break;
          }
          case 181: {
            BloodGuardResistRate = input.ReadFloat();
            break;
          }
          case 189: {
            CurseGuardResistRate = input.ReadFloat();
            break;
          }
          case 197: {
            StaminaGuardDefRate = input.ReadFloat();
            break;
          }
          case 200: {
            SpEffectId1 = input.ReadUInt32();
            break;
          }
          case 208: {
            SpEffectId2 = input.ReadUInt32();
            break;
          }
          case 216: {
            SpEffectId3 = input.ReadUInt32();
            break;
          }
          case 224: {
            ResidentSpEffectId1 = input.ReadUInt32();
            break;
          }
          case 232: {
            ResidentSpEffectId2 = input.ReadUInt32();
            break;
          }
          case 240: {
            ResidentSpEffectId3 = input.ReadUInt32();
            break;
          }
          case 248: {
            MaterialSetId1 = input.ReadUInt32();
            break;
          }
          case 256: {
            MaterialSetId2 = input.ReadUInt32();
            break;
          }
          case 269: {
            DarkAtkRate = input.ReadFloat();
            break;
          }
          case 277: {
            DarkGuardResistRate = input.ReadFloat();
            break;
          }
          case 285: {
            CorrectLuckRate = input.ReadFloat();
            break;
          }
          case 288: {
            Unknown0 = input.ReadUInt32();
            break;
          }
          case 296: {
            Unknown1 = input.ReadUInt32();
            break;
          }
          case 304: {
            Unknown2 = input.ReadUInt32();
            break;
          }
          case 312: {
            Unknown3 = input.ReadUInt32();
            break;
          }
          case 320: {
            Unknown4 = input.ReadUInt32();
            break;
          }
          case 328: {
            Unknown5 = input.ReadUInt32();
            break;
          }
          case 336: {
            Unknown6 = input.ReadUInt32();
            break;
          }
          case 344: {
            Unknown7 = input.ReadUInt32();
            break;
          }
          case 352: {
            Unknown8 = input.ReadUInt32();
            break;
          }
          case 360: {
            Unknown9 = input.ReadUInt32();
            break;
          }
          case 368: {
            Unknown10 = input.ReadUInt32();
            break;
          }
          case 376: {
            Unknown11 = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AttackElementCorrectParam : pb::IMessage<AttackElementCorrectParam> {
    private static readonly pb::MessageParser<AttackElementCorrectParam> _parser = new pb::MessageParser<AttackElementCorrectParam>(() => new AttackElementCorrectParam());
    public static pb::MessageParser<AttackElementCorrectParam> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ds3Ext.Ds3ExtReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AttackElementCorrectParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AttackElementCorrectParam(AttackElementCorrectParam other) : this() {
      id_ = other.id_;
      index_ = other.index_;
      offset_ = other.offset_;
      bitmask_ = other.bitmask_;
      v0_ = other.v0_;
      v1_ = other.v1_;
      v2_ = other.v2_;
      v3_ = other.v3_;
      v4_ = other.v4_;
      v5_ = other.v5_;
      v6_ = other.v6_;
      v7_ = other.v7_;
      v8_ = other.v8_;
      v9_ = other.v9_;
      v10_ = other.v10_;
      v11_ = other.v11_;
      v12_ = other.v12_;
      v13_ = other.v13_;
      v14_ = other.v14_;
      v15_ = other.v15_;
      v16_ = other.v16_;
      v17_ = other.v17_;
      v18_ = other.v18_;
      v19_ = other.v19_;
      v20_ = other.v20_;
      v21_ = other.v21_;
      v22_ = other.v22_;
      v23_ = other.v23_;
      v24_ = other.v24_;
      v25_ = other.v25_;
      v26_ = other.v26_;
      v27_ = other.v27_;
      v28_ = other.v28_;
      v29_ = other.v29_;
      v30_ = other.v30_;
      v31_ = other.v31_;
      v32_ = other.v32_;
      v33_ = other.v33_;
      v34_ = other.v34_;
      v35_ = other.v35_;
      v36_ = other.v36_;
      v37_ = other.v37_;
      v38_ = other.v38_;
      v39_ = other.v39_;
      v40_ = other.v40_;
      v41_ = other.v41_;
      v42_ = other.v42_;
      v43_ = other.v43_;
      v44_ = other.v44_;
      v45_ = other.v45_;
      v46_ = other.v46_;
      v47_ = other.v47_;
      v48_ = other.v48_;
      v49_ = other.v49_;
    }

    public AttackElementCorrectParam Clone() {
      return new AttackElementCorrectParam(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Offset" field.</summary>
    public const int OffsetFieldNumber = 4;
    private int offset_;
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "Bitmask" field.</summary>
    public const int BitmaskFieldNumber = 5;
    private int bitmask_;
    public int Bitmask {
      get { return bitmask_; }
      set {
        bitmask_ = value;
      }
    }

    /// <summary>Field number for the "v0" field.</summary>
    public const int V0FieldNumber = 6;
    private int v0_;
    public int V0 {
      get { return v0_; }
      set {
        v0_ = value;
      }
    }

    /// <summary>Field number for the "v1" field.</summary>
    public const int V1FieldNumber = 7;
    private int v1_;
    public int V1 {
      get { return v1_; }
      set {
        v1_ = value;
      }
    }

    /// <summary>Field number for the "v2" field.</summary>
    public const int V2FieldNumber = 8;
    private int v2_;
    public int V2 {
      get { return v2_; }
      set {
        v2_ = value;
      }
    }

    /// <summary>Field number for the "v3" field.</summary>
    public const int V3FieldNumber = 9;
    private int v3_;
    public int V3 {
      get { return v3_; }
      set {
        v3_ = value;
      }
    }

    /// <summary>Field number for the "v4" field.</summary>
    public const int V4FieldNumber = 10;
    private int v4_;
    public int V4 {
      get { return v4_; }
      set {
        v4_ = value;
      }
    }

    /// <summary>Field number for the "v5" field.</summary>
    public const int V5FieldNumber = 11;
    private int v5_;
    public int V5 {
      get { return v5_; }
      set {
        v5_ = value;
      }
    }

    /// <summary>Field number for the "v6" field.</summary>
    public const int V6FieldNumber = 12;
    private int v6_;
    public int V6 {
      get { return v6_; }
      set {
        v6_ = value;
      }
    }

    /// <summary>Field number for the "v7" field.</summary>
    public const int V7FieldNumber = 13;
    private int v7_;
    public int V7 {
      get { return v7_; }
      set {
        v7_ = value;
      }
    }

    /// <summary>Field number for the "v8" field.</summary>
    public const int V8FieldNumber = 14;
    private int v8_;
    public int V8 {
      get { return v8_; }
      set {
        v8_ = value;
      }
    }

    /// <summary>Field number for the "v9" field.</summary>
    public const int V9FieldNumber = 15;
    private int v9_;
    public int V9 {
      get { return v9_; }
      set {
        v9_ = value;
      }
    }

    /// <summary>Field number for the "v10" field.</summary>
    public const int V10FieldNumber = 16;
    private int v10_;
    public int V10 {
      get { return v10_; }
      set {
        v10_ = value;
      }
    }

    /// <summary>Field number for the "v11" field.</summary>
    public const int V11FieldNumber = 17;
    private int v11_;
    public int V11 {
      get { return v11_; }
      set {
        v11_ = value;
      }
    }

    /// <summary>Field number for the "v12" field.</summary>
    public const int V12FieldNumber = 18;
    private int v12_;
    public int V12 {
      get { return v12_; }
      set {
        v12_ = value;
      }
    }

    /// <summary>Field number for the "v13" field.</summary>
    public const int V13FieldNumber = 19;
    private int v13_;
    public int V13 {
      get { return v13_; }
      set {
        v13_ = value;
      }
    }

    /// <summary>Field number for the "v14" field.</summary>
    public const int V14FieldNumber = 20;
    private int v14_;
    public int V14 {
      get { return v14_; }
      set {
        v14_ = value;
      }
    }

    /// <summary>Field number for the "v15" field.</summary>
    public const int V15FieldNumber = 21;
    private int v15_;
    public int V15 {
      get { return v15_; }
      set {
        v15_ = value;
      }
    }

    /// <summary>Field number for the "v16" field.</summary>
    public const int V16FieldNumber = 22;
    private int v16_;
    public int V16 {
      get { return v16_; }
      set {
        v16_ = value;
      }
    }

    /// <summary>Field number for the "v17" field.</summary>
    public const int V17FieldNumber = 23;
    private int v17_;
    public int V17 {
      get { return v17_; }
      set {
        v17_ = value;
      }
    }

    /// <summary>Field number for the "v18" field.</summary>
    public const int V18FieldNumber = 24;
    private int v18_;
    public int V18 {
      get { return v18_; }
      set {
        v18_ = value;
      }
    }

    /// <summary>Field number for the "v19" field.</summary>
    public const int V19FieldNumber = 25;
    private int v19_;
    public int V19 {
      get { return v19_; }
      set {
        v19_ = value;
      }
    }

    /// <summary>Field number for the "v20" field.</summary>
    public const int V20FieldNumber = 26;
    private int v20_;
    public int V20 {
      get { return v20_; }
      set {
        v20_ = value;
      }
    }

    /// <summary>Field number for the "v21" field.</summary>
    public const int V21FieldNumber = 27;
    private int v21_;
    public int V21 {
      get { return v21_; }
      set {
        v21_ = value;
      }
    }

    /// <summary>Field number for the "v22" field.</summary>
    public const int V22FieldNumber = 28;
    private int v22_;
    public int V22 {
      get { return v22_; }
      set {
        v22_ = value;
      }
    }

    /// <summary>Field number for the "v23" field.</summary>
    public const int V23FieldNumber = 29;
    private int v23_;
    public int V23 {
      get { return v23_; }
      set {
        v23_ = value;
      }
    }

    /// <summary>Field number for the "v24" field.</summary>
    public const int V24FieldNumber = 30;
    private int v24_;
    public int V24 {
      get { return v24_; }
      set {
        v24_ = value;
      }
    }

    /// <summary>Field number for the "v25" field.</summary>
    public const int V25FieldNumber = 31;
    private int v25_;
    public int V25 {
      get { return v25_; }
      set {
        v25_ = value;
      }
    }

    /// <summary>Field number for the "v26" field.</summary>
    public const int V26FieldNumber = 32;
    private int v26_;
    public int V26 {
      get { return v26_; }
      set {
        v26_ = value;
      }
    }

    /// <summary>Field number for the "v27" field.</summary>
    public const int V27FieldNumber = 33;
    private int v27_;
    public int V27 {
      get { return v27_; }
      set {
        v27_ = value;
      }
    }

    /// <summary>Field number for the "v28" field.</summary>
    public const int V28FieldNumber = 34;
    private int v28_;
    public int V28 {
      get { return v28_; }
      set {
        v28_ = value;
      }
    }

    /// <summary>Field number for the "v29" field.</summary>
    public const int V29FieldNumber = 35;
    private int v29_;
    public int V29 {
      get { return v29_; }
      set {
        v29_ = value;
      }
    }

    /// <summary>Field number for the "v30" field.</summary>
    public const int V30FieldNumber = 36;
    private int v30_;
    public int V30 {
      get { return v30_; }
      set {
        v30_ = value;
      }
    }

    /// <summary>Field number for the "v31" field.</summary>
    public const int V31FieldNumber = 37;
    private int v31_;
    public int V31 {
      get { return v31_; }
      set {
        v31_ = value;
      }
    }

    /// <summary>Field number for the "v32" field.</summary>
    public const int V32FieldNumber = 38;
    private int v32_;
    public int V32 {
      get { return v32_; }
      set {
        v32_ = value;
      }
    }

    /// <summary>Field number for the "v33" field.</summary>
    public const int V33FieldNumber = 39;
    private int v33_;
    public int V33 {
      get { return v33_; }
      set {
        v33_ = value;
      }
    }

    /// <summary>Field number for the "v34" field.</summary>
    public const int V34FieldNumber = 40;
    private int v34_;
    public int V34 {
      get { return v34_; }
      set {
        v34_ = value;
      }
    }

    /// <summary>Field number for the "v35" field.</summary>
    public const int V35FieldNumber = 41;
    private int v35_;
    public int V35 {
      get { return v35_; }
      set {
        v35_ = value;
      }
    }

    /// <summary>Field number for the "v36" field.</summary>
    public const int V36FieldNumber = 42;
    private int v36_;
    public int V36 {
      get { return v36_; }
      set {
        v36_ = value;
      }
    }

    /// <summary>Field number for the "v37" field.</summary>
    public const int V37FieldNumber = 43;
    private int v37_;
    public int V37 {
      get { return v37_; }
      set {
        v37_ = value;
      }
    }

    /// <summary>Field number for the "v38" field.</summary>
    public const int V38FieldNumber = 44;
    private int v38_;
    public int V38 {
      get { return v38_; }
      set {
        v38_ = value;
      }
    }

    /// <summary>Field number for the "v39" field.</summary>
    public const int V39FieldNumber = 45;
    private int v39_;
    public int V39 {
      get { return v39_; }
      set {
        v39_ = value;
      }
    }

    /// <summary>Field number for the "v40" field.</summary>
    public const int V40FieldNumber = 46;
    private int v40_;
    public int V40 {
      get { return v40_; }
      set {
        v40_ = value;
      }
    }

    /// <summary>Field number for the "v41" field.</summary>
    public const int V41FieldNumber = 47;
    private int v41_;
    public int V41 {
      get { return v41_; }
      set {
        v41_ = value;
      }
    }

    /// <summary>Field number for the "v42" field.</summary>
    public const int V42FieldNumber = 48;
    private int v42_;
    public int V42 {
      get { return v42_; }
      set {
        v42_ = value;
      }
    }

    /// <summary>Field number for the "v43" field.</summary>
    public const int V43FieldNumber = 49;
    private int v43_;
    public int V43 {
      get { return v43_; }
      set {
        v43_ = value;
      }
    }

    /// <summary>Field number for the "v44" field.</summary>
    public const int V44FieldNumber = 50;
    private int v44_;
    public int V44 {
      get { return v44_; }
      set {
        v44_ = value;
      }
    }

    /// <summary>Field number for the "v45" field.</summary>
    public const int V45FieldNumber = 51;
    private int v45_;
    public int V45 {
      get { return v45_; }
      set {
        v45_ = value;
      }
    }

    /// <summary>Field number for the "v46" field.</summary>
    public const int V46FieldNumber = 52;
    private int v46_;
    public int V46 {
      get { return v46_; }
      set {
        v46_ = value;
      }
    }

    /// <summary>Field number for the "v47" field.</summary>
    public const int V47FieldNumber = 53;
    private int v47_;
    public int V47 {
      get { return v47_; }
      set {
        v47_ = value;
      }
    }

    /// <summary>Field number for the "v48" field.</summary>
    public const int V48FieldNumber = 54;
    private int v48_;
    public int V48 {
      get { return v48_; }
      set {
        v48_ = value;
      }
    }

    /// <summary>Field number for the "v49" field.</summary>
    public const int V49FieldNumber = 55;
    private int v49_;
    public int V49 {
      get { return v49_; }
      set {
        v49_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as AttackElementCorrectParam);
    }

    public bool Equals(AttackElementCorrectParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Index != other.Index) return false;
      if (Offset != other.Offset) return false;
      if (Bitmask != other.Bitmask) return false;
      if (V0 != other.V0) return false;
      if (V1 != other.V1) return false;
      if (V2 != other.V2) return false;
      if (V3 != other.V3) return false;
      if (V4 != other.V4) return false;
      if (V5 != other.V5) return false;
      if (V6 != other.V6) return false;
      if (V7 != other.V7) return false;
      if (V8 != other.V8) return false;
      if (V9 != other.V9) return false;
      if (V10 != other.V10) return false;
      if (V11 != other.V11) return false;
      if (V12 != other.V12) return false;
      if (V13 != other.V13) return false;
      if (V14 != other.V14) return false;
      if (V15 != other.V15) return false;
      if (V16 != other.V16) return false;
      if (V17 != other.V17) return false;
      if (V18 != other.V18) return false;
      if (V19 != other.V19) return false;
      if (V20 != other.V20) return false;
      if (V21 != other.V21) return false;
      if (V22 != other.V22) return false;
      if (V23 != other.V23) return false;
      if (V24 != other.V24) return false;
      if (V25 != other.V25) return false;
      if (V26 != other.V26) return false;
      if (V27 != other.V27) return false;
      if (V28 != other.V28) return false;
      if (V29 != other.V29) return false;
      if (V30 != other.V30) return false;
      if (V31 != other.V31) return false;
      if (V32 != other.V32) return false;
      if (V33 != other.V33) return false;
      if (V34 != other.V34) return false;
      if (V35 != other.V35) return false;
      if (V36 != other.V36) return false;
      if (V37 != other.V37) return false;
      if (V38 != other.V38) return false;
      if (V39 != other.V39) return false;
      if (V40 != other.V40) return false;
      if (V41 != other.V41) return false;
      if (V42 != other.V42) return false;
      if (V43 != other.V43) return false;
      if (V44 != other.V44) return false;
      if (V45 != other.V45) return false;
      if (V46 != other.V46) return false;
      if (V47 != other.V47) return false;
      if (V48 != other.V48) return false;
      if (V49 != other.V49) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (Bitmask != 0) hash ^= Bitmask.GetHashCode();
      if (V0 != 0) hash ^= V0.GetHashCode();
      if (V1 != 0) hash ^= V1.GetHashCode();
      if (V2 != 0) hash ^= V2.GetHashCode();
      if (V3 != 0) hash ^= V3.GetHashCode();
      if (V4 != 0) hash ^= V4.GetHashCode();
      if (V5 != 0) hash ^= V5.GetHashCode();
      if (V6 != 0) hash ^= V6.GetHashCode();
      if (V7 != 0) hash ^= V7.GetHashCode();
      if (V8 != 0) hash ^= V8.GetHashCode();
      if (V9 != 0) hash ^= V9.GetHashCode();
      if (V10 != 0) hash ^= V10.GetHashCode();
      if (V11 != 0) hash ^= V11.GetHashCode();
      if (V12 != 0) hash ^= V12.GetHashCode();
      if (V13 != 0) hash ^= V13.GetHashCode();
      if (V14 != 0) hash ^= V14.GetHashCode();
      if (V15 != 0) hash ^= V15.GetHashCode();
      if (V16 != 0) hash ^= V16.GetHashCode();
      if (V17 != 0) hash ^= V17.GetHashCode();
      if (V18 != 0) hash ^= V18.GetHashCode();
      if (V19 != 0) hash ^= V19.GetHashCode();
      if (V20 != 0) hash ^= V20.GetHashCode();
      if (V21 != 0) hash ^= V21.GetHashCode();
      if (V22 != 0) hash ^= V22.GetHashCode();
      if (V23 != 0) hash ^= V23.GetHashCode();
      if (V24 != 0) hash ^= V24.GetHashCode();
      if (V25 != 0) hash ^= V25.GetHashCode();
      if (V26 != 0) hash ^= V26.GetHashCode();
      if (V27 != 0) hash ^= V27.GetHashCode();
      if (V28 != 0) hash ^= V28.GetHashCode();
      if (V29 != 0) hash ^= V29.GetHashCode();
      if (V30 != 0) hash ^= V30.GetHashCode();
      if (V31 != 0) hash ^= V31.GetHashCode();
      if (V32 != 0) hash ^= V32.GetHashCode();
      if (V33 != 0) hash ^= V33.GetHashCode();
      if (V34 != 0) hash ^= V34.GetHashCode();
      if (V35 != 0) hash ^= V35.GetHashCode();
      if (V36 != 0) hash ^= V36.GetHashCode();
      if (V37 != 0) hash ^= V37.GetHashCode();
      if (V38 != 0) hash ^= V38.GetHashCode();
      if (V39 != 0) hash ^= V39.GetHashCode();
      if (V40 != 0) hash ^= V40.GetHashCode();
      if (V41 != 0) hash ^= V41.GetHashCode();
      if (V42 != 0) hash ^= V42.GetHashCode();
      if (V43 != 0) hash ^= V43.GetHashCode();
      if (V44 != 0) hash ^= V44.GetHashCode();
      if (V45 != 0) hash ^= V45.GetHashCode();
      if (V46 != 0) hash ^= V46.GetHashCode();
      if (V47 != 0) hash ^= V47.GetHashCode();
      if (V48 != 0) hash ^= V48.GetHashCode();
      if (V49 != 0) hash ^= V49.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Index);
      }
      if (Offset != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Offset);
      }
      if (Bitmask != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Bitmask);
      }
      if (V0 != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(V0);
      }
      if (V1 != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(V1);
      }
      if (V2 != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(V2);
      }
      if (V3 != 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(V3);
      }
      if (V4 != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(V4);
      }
      if (V5 != 0) {
        output.WriteRawTag(88);
        output.WriteSInt32(V5);
      }
      if (V6 != 0) {
        output.WriteRawTag(96);
        output.WriteSInt32(V6);
      }
      if (V7 != 0) {
        output.WriteRawTag(104);
        output.WriteSInt32(V7);
      }
      if (V8 != 0) {
        output.WriteRawTag(112);
        output.WriteSInt32(V8);
      }
      if (V9 != 0) {
        output.WriteRawTag(120);
        output.WriteSInt32(V9);
      }
      if (V10 != 0) {
        output.WriteRawTag(128, 1);
        output.WriteSInt32(V10);
      }
      if (V11 != 0) {
        output.WriteRawTag(136, 1);
        output.WriteSInt32(V11);
      }
      if (V12 != 0) {
        output.WriteRawTag(144, 1);
        output.WriteSInt32(V12);
      }
      if (V13 != 0) {
        output.WriteRawTag(152, 1);
        output.WriteSInt32(V13);
      }
      if (V14 != 0) {
        output.WriteRawTag(160, 1);
        output.WriteSInt32(V14);
      }
      if (V15 != 0) {
        output.WriteRawTag(168, 1);
        output.WriteSInt32(V15);
      }
      if (V16 != 0) {
        output.WriteRawTag(176, 1);
        output.WriteSInt32(V16);
      }
      if (V17 != 0) {
        output.WriteRawTag(184, 1);
        output.WriteSInt32(V17);
      }
      if (V18 != 0) {
        output.WriteRawTag(192, 1);
        output.WriteSInt32(V18);
      }
      if (V19 != 0) {
        output.WriteRawTag(200, 1);
        output.WriteSInt32(V19);
      }
      if (V20 != 0) {
        output.WriteRawTag(208, 1);
        output.WriteSInt32(V20);
      }
      if (V21 != 0) {
        output.WriteRawTag(216, 1);
        output.WriteSInt32(V21);
      }
      if (V22 != 0) {
        output.WriteRawTag(224, 1);
        output.WriteSInt32(V22);
      }
      if (V23 != 0) {
        output.WriteRawTag(232, 1);
        output.WriteSInt32(V23);
      }
      if (V24 != 0) {
        output.WriteRawTag(240, 1);
        output.WriteSInt32(V24);
      }
      if (V25 != 0) {
        output.WriteRawTag(248, 1);
        output.WriteSInt32(V25);
      }
      if (V26 != 0) {
        output.WriteRawTag(128, 2);
        output.WriteSInt32(V26);
      }
      if (V27 != 0) {
        output.WriteRawTag(136, 2);
        output.WriteSInt32(V27);
      }
      if (V28 != 0) {
        output.WriteRawTag(144, 2);
        output.WriteSInt32(V28);
      }
      if (V29 != 0) {
        output.WriteRawTag(152, 2);
        output.WriteSInt32(V29);
      }
      if (V30 != 0) {
        output.WriteRawTag(160, 2);
        output.WriteSInt32(V30);
      }
      if (V31 != 0) {
        output.WriteRawTag(168, 2);
        output.WriteSInt32(V31);
      }
      if (V32 != 0) {
        output.WriteRawTag(176, 2);
        output.WriteSInt32(V32);
      }
      if (V33 != 0) {
        output.WriteRawTag(184, 2);
        output.WriteSInt32(V33);
      }
      if (V34 != 0) {
        output.WriteRawTag(192, 2);
        output.WriteSInt32(V34);
      }
      if (V35 != 0) {
        output.WriteRawTag(200, 2);
        output.WriteSInt32(V35);
      }
      if (V36 != 0) {
        output.WriteRawTag(208, 2);
        output.WriteSInt32(V36);
      }
      if (V37 != 0) {
        output.WriteRawTag(216, 2);
        output.WriteSInt32(V37);
      }
      if (V38 != 0) {
        output.WriteRawTag(224, 2);
        output.WriteSInt32(V38);
      }
      if (V39 != 0) {
        output.WriteRawTag(232, 2);
        output.WriteSInt32(V39);
      }
      if (V40 != 0) {
        output.WriteRawTag(240, 2);
        output.WriteSInt32(V40);
      }
      if (V41 != 0) {
        output.WriteRawTag(248, 2);
        output.WriteSInt32(V41);
      }
      if (V42 != 0) {
        output.WriteRawTag(128, 3);
        output.WriteSInt32(V42);
      }
      if (V43 != 0) {
        output.WriteRawTag(136, 3);
        output.WriteSInt32(V43);
      }
      if (V44 != 0) {
        output.WriteRawTag(144, 3);
        output.WriteSInt32(V44);
      }
      if (V45 != 0) {
        output.WriteRawTag(152, 3);
        output.WriteSInt32(V45);
      }
      if (V46 != 0) {
        output.WriteRawTag(160, 3);
        output.WriteSInt32(V46);
      }
      if (V47 != 0) {
        output.WriteRawTag(168, 3);
        output.WriteSInt32(V47);
      }
      if (V48 != 0) {
        output.WriteRawTag(176, 3);
        output.WriteSInt32(V48);
      }
      if (V49 != 0) {
        output.WriteRawTag(184, 3);
        output.WriteSInt32(V49);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Index);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Offset);
      }
      if (Bitmask != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Bitmask);
      }
      if (V0 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(V0);
      }
      if (V1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(V1);
      }
      if (V2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(V2);
      }
      if (V3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(V3);
      }
      if (V4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(V4);
      }
      if (V5 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(V5);
      }
      if (V6 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(V6);
      }
      if (V7 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(V7);
      }
      if (V8 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(V8);
      }
      if (V9 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(V9);
      }
      if (V10 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V10);
      }
      if (V11 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V11);
      }
      if (V12 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V12);
      }
      if (V13 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V13);
      }
      if (V14 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V14);
      }
      if (V15 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V15);
      }
      if (V16 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V16);
      }
      if (V17 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V17);
      }
      if (V18 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V18);
      }
      if (V19 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V19);
      }
      if (V20 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V20);
      }
      if (V21 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V21);
      }
      if (V22 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V22);
      }
      if (V23 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V23);
      }
      if (V24 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V24);
      }
      if (V25 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V25);
      }
      if (V26 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V26);
      }
      if (V27 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V27);
      }
      if (V28 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V28);
      }
      if (V29 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V29);
      }
      if (V30 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V30);
      }
      if (V31 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V31);
      }
      if (V32 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V32);
      }
      if (V33 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V33);
      }
      if (V34 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V34);
      }
      if (V35 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V35);
      }
      if (V36 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V36);
      }
      if (V37 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V37);
      }
      if (V38 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V38);
      }
      if (V39 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V39);
      }
      if (V40 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V40);
      }
      if (V41 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V41);
      }
      if (V42 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V42);
      }
      if (V43 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V43);
      }
      if (V44 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V44);
      }
      if (V45 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V45);
      }
      if (V46 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V46);
      }
      if (V47 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V47);
      }
      if (V48 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V48);
      }
      if (V49 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(V49);
      }
      return size;
    }

    public void MergeFrom(AttackElementCorrectParam other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.Bitmask != 0) {
        Bitmask = other.Bitmask;
      }
      if (other.V0 != 0) {
        V0 = other.V0;
      }
      if (other.V1 != 0) {
        V1 = other.V1;
      }
      if (other.V2 != 0) {
        V2 = other.V2;
      }
      if (other.V3 != 0) {
        V3 = other.V3;
      }
      if (other.V4 != 0) {
        V4 = other.V4;
      }
      if (other.V5 != 0) {
        V5 = other.V5;
      }
      if (other.V6 != 0) {
        V6 = other.V6;
      }
      if (other.V7 != 0) {
        V7 = other.V7;
      }
      if (other.V8 != 0) {
        V8 = other.V8;
      }
      if (other.V9 != 0) {
        V9 = other.V9;
      }
      if (other.V10 != 0) {
        V10 = other.V10;
      }
      if (other.V11 != 0) {
        V11 = other.V11;
      }
      if (other.V12 != 0) {
        V12 = other.V12;
      }
      if (other.V13 != 0) {
        V13 = other.V13;
      }
      if (other.V14 != 0) {
        V14 = other.V14;
      }
      if (other.V15 != 0) {
        V15 = other.V15;
      }
      if (other.V16 != 0) {
        V16 = other.V16;
      }
      if (other.V17 != 0) {
        V17 = other.V17;
      }
      if (other.V18 != 0) {
        V18 = other.V18;
      }
      if (other.V19 != 0) {
        V19 = other.V19;
      }
      if (other.V20 != 0) {
        V20 = other.V20;
      }
      if (other.V21 != 0) {
        V21 = other.V21;
      }
      if (other.V22 != 0) {
        V22 = other.V22;
      }
      if (other.V23 != 0) {
        V23 = other.V23;
      }
      if (other.V24 != 0) {
        V24 = other.V24;
      }
      if (other.V25 != 0) {
        V25 = other.V25;
      }
      if (other.V26 != 0) {
        V26 = other.V26;
      }
      if (other.V27 != 0) {
        V27 = other.V27;
      }
      if (other.V28 != 0) {
        V28 = other.V28;
      }
      if (other.V29 != 0) {
        V29 = other.V29;
      }
      if (other.V30 != 0) {
        V30 = other.V30;
      }
      if (other.V31 != 0) {
        V31 = other.V31;
      }
      if (other.V32 != 0) {
        V32 = other.V32;
      }
      if (other.V33 != 0) {
        V33 = other.V33;
      }
      if (other.V34 != 0) {
        V34 = other.V34;
      }
      if (other.V35 != 0) {
        V35 = other.V35;
      }
      if (other.V36 != 0) {
        V36 = other.V36;
      }
      if (other.V37 != 0) {
        V37 = other.V37;
      }
      if (other.V38 != 0) {
        V38 = other.V38;
      }
      if (other.V39 != 0) {
        V39 = other.V39;
      }
      if (other.V40 != 0) {
        V40 = other.V40;
      }
      if (other.V41 != 0) {
        V41 = other.V41;
      }
      if (other.V42 != 0) {
        V42 = other.V42;
      }
      if (other.V43 != 0) {
        V43 = other.V43;
      }
      if (other.V44 != 0) {
        V44 = other.V44;
      }
      if (other.V45 != 0) {
        V45 = other.V45;
      }
      if (other.V46 != 0) {
        V46 = other.V46;
      }
      if (other.V47 != 0) {
        V47 = other.V47;
      }
      if (other.V48 != 0) {
        V48 = other.V48;
      }
      if (other.V49 != 0) {
        V49 = other.V49;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadSInt32();
            break;
          }
          case 32: {
            Offset = input.ReadSInt32();
            break;
          }
          case 40: {
            Bitmask = input.ReadSInt32();
            break;
          }
          case 48: {
            V0 = input.ReadSInt32();
            break;
          }
          case 56: {
            V1 = input.ReadSInt32();
            break;
          }
          case 64: {
            V2 = input.ReadSInt32();
            break;
          }
          case 72: {
            V3 = input.ReadSInt32();
            break;
          }
          case 80: {
            V4 = input.ReadSInt32();
            break;
          }
          case 88: {
            V5 = input.ReadSInt32();
            break;
          }
          case 96: {
            V6 = input.ReadSInt32();
            break;
          }
          case 104: {
            V7 = input.ReadSInt32();
            break;
          }
          case 112: {
            V8 = input.ReadSInt32();
            break;
          }
          case 120: {
            V9 = input.ReadSInt32();
            break;
          }
          case 128: {
            V10 = input.ReadSInt32();
            break;
          }
          case 136: {
            V11 = input.ReadSInt32();
            break;
          }
          case 144: {
            V12 = input.ReadSInt32();
            break;
          }
          case 152: {
            V13 = input.ReadSInt32();
            break;
          }
          case 160: {
            V14 = input.ReadSInt32();
            break;
          }
          case 168: {
            V15 = input.ReadSInt32();
            break;
          }
          case 176: {
            V16 = input.ReadSInt32();
            break;
          }
          case 184: {
            V17 = input.ReadSInt32();
            break;
          }
          case 192: {
            V18 = input.ReadSInt32();
            break;
          }
          case 200: {
            V19 = input.ReadSInt32();
            break;
          }
          case 208: {
            V20 = input.ReadSInt32();
            break;
          }
          case 216: {
            V21 = input.ReadSInt32();
            break;
          }
          case 224: {
            V22 = input.ReadSInt32();
            break;
          }
          case 232: {
            V23 = input.ReadSInt32();
            break;
          }
          case 240: {
            V24 = input.ReadSInt32();
            break;
          }
          case 248: {
            V25 = input.ReadSInt32();
            break;
          }
          case 256: {
            V26 = input.ReadSInt32();
            break;
          }
          case 264: {
            V27 = input.ReadSInt32();
            break;
          }
          case 272: {
            V28 = input.ReadSInt32();
            break;
          }
          case 280: {
            V29 = input.ReadSInt32();
            break;
          }
          case 288: {
            V30 = input.ReadSInt32();
            break;
          }
          case 296: {
            V31 = input.ReadSInt32();
            break;
          }
          case 304: {
            V32 = input.ReadSInt32();
            break;
          }
          case 312: {
            V33 = input.ReadSInt32();
            break;
          }
          case 320: {
            V34 = input.ReadSInt32();
            break;
          }
          case 328: {
            V35 = input.ReadSInt32();
            break;
          }
          case 336: {
            V36 = input.ReadSInt32();
            break;
          }
          case 344: {
            V37 = input.ReadSInt32();
            break;
          }
          case 352: {
            V38 = input.ReadSInt32();
            break;
          }
          case 360: {
            V39 = input.ReadSInt32();
            break;
          }
          case 368: {
            V40 = input.ReadSInt32();
            break;
          }
          case 376: {
            V41 = input.ReadSInt32();
            break;
          }
          case 384: {
            V42 = input.ReadSInt32();
            break;
          }
          case 392: {
            V43 = input.ReadSInt32();
            break;
          }
          case 400: {
            V44 = input.ReadSInt32();
            break;
          }
          case 408: {
            V45 = input.ReadSInt32();
            break;
          }
          case 416: {
            V46 = input.ReadSInt32();
            break;
          }
          case 424: {
            V47 = input.ReadSInt32();
            break;
          }
          case 432: {
            V48 = input.ReadSInt32();
            break;
          }
          case 440: {
            V49 = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CalcCorrectGraph : pb::IMessage<CalcCorrectGraph> {
    private static readonly pb::MessageParser<CalcCorrectGraph> _parser = new pb::MessageParser<CalcCorrectGraph>(() => new CalcCorrectGraph());
    public static pb::MessageParser<CalcCorrectGraph> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ds3Ext.Ds3ExtReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CalcCorrectGraph() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CalcCorrectGraph(CalcCorrectGraph other) : this() {
      id_ = other.id_;
      index_ = other.index_;
      offset_ = other.offset_;
      stageMaxVal0_ = other.stageMaxVal0_;
      stageMaxVal1_ = other.stageMaxVal1_;
      stageMaxVal2_ = other.stageMaxVal2_;
      stageMaxVal3_ = other.stageMaxVal3_;
      stageMaxVal4_ = other.stageMaxVal4_;
      stageMaxGrowVal0_ = other.stageMaxGrowVal0_;
      stageMaxGrowVal1_ = other.stageMaxGrowVal1_;
      stageMaxGrowVal2_ = other.stageMaxGrowVal2_;
      stageMaxGrowVal3_ = other.stageMaxGrowVal3_;
      stageMaxGrowVal4_ = other.stageMaxGrowVal4_;
      adjPtMaxGrowVal0_ = other.adjPtMaxGrowVal0_;
      adjPtMaxGrowVal1_ = other.adjPtMaxGrowVal1_;
      adjPtMaxGrowVal2_ = other.adjPtMaxGrowVal2_;
      adjPtMaxGrowVal3_ = other.adjPtMaxGrowVal3_;
      adjPtMaxGrowVal4_ = other.adjPtMaxGrowVal4_;
      initInclinationSoul_ = other.initInclinationSoul_;
      adjustmentValue_ = other.adjustmentValue_;
      boundryInclinationSoul_ = other.boundryInclinationSoul_;
      boundryValue_ = other.boundryValue_;
    }

    public CalcCorrectGraph Clone() {
      return new CalcCorrectGraph(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Offset" field.</summary>
    public const int OffsetFieldNumber = 4;
    private int offset_;
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "StageMaxVal0" field.</summary>
    public const int StageMaxVal0FieldNumber = 5;
    private float stageMaxVal0_;
    public float StageMaxVal0 {
      get { return stageMaxVal0_; }
      set {
        stageMaxVal0_ = value;
      }
    }

    /// <summary>Field number for the "StageMaxVal1" field.</summary>
    public const int StageMaxVal1FieldNumber = 6;
    private float stageMaxVal1_;
    public float StageMaxVal1 {
      get { return stageMaxVal1_; }
      set {
        stageMaxVal1_ = value;
      }
    }

    /// <summary>Field number for the "StageMaxVal2" field.</summary>
    public const int StageMaxVal2FieldNumber = 7;
    private float stageMaxVal2_;
    public float StageMaxVal2 {
      get { return stageMaxVal2_; }
      set {
        stageMaxVal2_ = value;
      }
    }

    /// <summary>Field number for the "StageMaxVal3" field.</summary>
    public const int StageMaxVal3FieldNumber = 8;
    private float stageMaxVal3_;
    public float StageMaxVal3 {
      get { return stageMaxVal3_; }
      set {
        stageMaxVal3_ = value;
      }
    }

    /// <summary>Field number for the "StageMaxVal4" field.</summary>
    public const int StageMaxVal4FieldNumber = 9;
    private float stageMaxVal4_;
    public float StageMaxVal4 {
      get { return stageMaxVal4_; }
      set {
        stageMaxVal4_ = value;
      }
    }

    /// <summary>Field number for the "StageMaxGrowVal0" field.</summary>
    public const int StageMaxGrowVal0FieldNumber = 10;
    private float stageMaxGrowVal0_;
    public float StageMaxGrowVal0 {
      get { return stageMaxGrowVal0_; }
      set {
        stageMaxGrowVal0_ = value;
      }
    }

    /// <summary>Field number for the "StageMaxGrowVal1" field.</summary>
    public const int StageMaxGrowVal1FieldNumber = 11;
    private float stageMaxGrowVal1_;
    public float StageMaxGrowVal1 {
      get { return stageMaxGrowVal1_; }
      set {
        stageMaxGrowVal1_ = value;
      }
    }

    /// <summary>Field number for the "StageMaxGrowVal2" field.</summary>
    public const int StageMaxGrowVal2FieldNumber = 12;
    private float stageMaxGrowVal2_;
    public float StageMaxGrowVal2 {
      get { return stageMaxGrowVal2_; }
      set {
        stageMaxGrowVal2_ = value;
      }
    }

    /// <summary>Field number for the "StageMaxGrowVal3" field.</summary>
    public const int StageMaxGrowVal3FieldNumber = 13;
    private float stageMaxGrowVal3_;
    public float StageMaxGrowVal3 {
      get { return stageMaxGrowVal3_; }
      set {
        stageMaxGrowVal3_ = value;
      }
    }

    /// <summary>Field number for the "StageMaxGrowVal4" field.</summary>
    public const int StageMaxGrowVal4FieldNumber = 14;
    private float stageMaxGrowVal4_;
    public float StageMaxGrowVal4 {
      get { return stageMaxGrowVal4_; }
      set {
        stageMaxGrowVal4_ = value;
      }
    }

    /// <summary>Field number for the "AdjPt_maxGrowVal0" field.</summary>
    public const int AdjPtMaxGrowVal0FieldNumber = 15;
    private float adjPtMaxGrowVal0_;
    public float AdjPtMaxGrowVal0 {
      get { return adjPtMaxGrowVal0_; }
      set {
        adjPtMaxGrowVal0_ = value;
      }
    }

    /// <summary>Field number for the "AdjPt_maxGrowVal1" field.</summary>
    public const int AdjPtMaxGrowVal1FieldNumber = 16;
    private float adjPtMaxGrowVal1_;
    public float AdjPtMaxGrowVal1 {
      get { return adjPtMaxGrowVal1_; }
      set {
        adjPtMaxGrowVal1_ = value;
      }
    }

    /// <summary>Field number for the "AdjPt_maxGrowVal2" field.</summary>
    public const int AdjPtMaxGrowVal2FieldNumber = 17;
    private float adjPtMaxGrowVal2_;
    public float AdjPtMaxGrowVal2 {
      get { return adjPtMaxGrowVal2_; }
      set {
        adjPtMaxGrowVal2_ = value;
      }
    }

    /// <summary>Field number for the "AdjPt_maxGrowVal3" field.</summary>
    public const int AdjPtMaxGrowVal3FieldNumber = 18;
    private float adjPtMaxGrowVal3_;
    public float AdjPtMaxGrowVal3 {
      get { return adjPtMaxGrowVal3_; }
      set {
        adjPtMaxGrowVal3_ = value;
      }
    }

    /// <summary>Field number for the "AdjPt_maxGrowVal4" field.</summary>
    public const int AdjPtMaxGrowVal4FieldNumber = 19;
    private float adjPtMaxGrowVal4_;
    public float AdjPtMaxGrowVal4 {
      get { return adjPtMaxGrowVal4_; }
      set {
        adjPtMaxGrowVal4_ = value;
      }
    }

    /// <summary>Field number for the "Init_inclination_soul" field.</summary>
    public const int InitInclinationSoulFieldNumber = 20;
    private float initInclinationSoul_;
    public float InitInclinationSoul {
      get { return initInclinationSoul_; }
      set {
        initInclinationSoul_ = value;
      }
    }

    /// <summary>Field number for the "Adjustment_value" field.</summary>
    public const int AdjustmentValueFieldNumber = 21;
    private float adjustmentValue_;
    public float AdjustmentValue {
      get { return adjustmentValue_; }
      set {
        adjustmentValue_ = value;
      }
    }

    /// <summary>Field number for the "Boundry_inclination_soul" field.</summary>
    public const int BoundryInclinationSoulFieldNumber = 22;
    private float boundryInclinationSoul_;
    public float BoundryInclinationSoul {
      get { return boundryInclinationSoul_; }
      set {
        boundryInclinationSoul_ = value;
      }
    }

    /// <summary>Field number for the "Boundry_value" field.</summary>
    public const int BoundryValueFieldNumber = 23;
    private float boundryValue_;
    public float BoundryValue {
      get { return boundryValue_; }
      set {
        boundryValue_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CalcCorrectGraph);
    }

    public bool Equals(CalcCorrectGraph other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Index != other.Index) return false;
      if (Offset != other.Offset) return false;
      if (StageMaxVal0 != other.StageMaxVal0) return false;
      if (StageMaxVal1 != other.StageMaxVal1) return false;
      if (StageMaxVal2 != other.StageMaxVal2) return false;
      if (StageMaxVal3 != other.StageMaxVal3) return false;
      if (StageMaxVal4 != other.StageMaxVal4) return false;
      if (StageMaxGrowVal0 != other.StageMaxGrowVal0) return false;
      if (StageMaxGrowVal1 != other.StageMaxGrowVal1) return false;
      if (StageMaxGrowVal2 != other.StageMaxGrowVal2) return false;
      if (StageMaxGrowVal3 != other.StageMaxGrowVal3) return false;
      if (StageMaxGrowVal4 != other.StageMaxGrowVal4) return false;
      if (AdjPtMaxGrowVal0 != other.AdjPtMaxGrowVal0) return false;
      if (AdjPtMaxGrowVal1 != other.AdjPtMaxGrowVal1) return false;
      if (AdjPtMaxGrowVal2 != other.AdjPtMaxGrowVal2) return false;
      if (AdjPtMaxGrowVal3 != other.AdjPtMaxGrowVal3) return false;
      if (AdjPtMaxGrowVal4 != other.AdjPtMaxGrowVal4) return false;
      if (InitInclinationSoul != other.InitInclinationSoul) return false;
      if (AdjustmentValue != other.AdjustmentValue) return false;
      if (BoundryInclinationSoul != other.BoundryInclinationSoul) return false;
      if (BoundryValue != other.BoundryValue) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (StageMaxVal0 != 0F) hash ^= StageMaxVal0.GetHashCode();
      if (StageMaxVal1 != 0F) hash ^= StageMaxVal1.GetHashCode();
      if (StageMaxVal2 != 0F) hash ^= StageMaxVal2.GetHashCode();
      if (StageMaxVal3 != 0F) hash ^= StageMaxVal3.GetHashCode();
      if (StageMaxVal4 != 0F) hash ^= StageMaxVal4.GetHashCode();
      if (StageMaxGrowVal0 != 0F) hash ^= StageMaxGrowVal0.GetHashCode();
      if (StageMaxGrowVal1 != 0F) hash ^= StageMaxGrowVal1.GetHashCode();
      if (StageMaxGrowVal2 != 0F) hash ^= StageMaxGrowVal2.GetHashCode();
      if (StageMaxGrowVal3 != 0F) hash ^= StageMaxGrowVal3.GetHashCode();
      if (StageMaxGrowVal4 != 0F) hash ^= StageMaxGrowVal4.GetHashCode();
      if (AdjPtMaxGrowVal0 != 0F) hash ^= AdjPtMaxGrowVal0.GetHashCode();
      if (AdjPtMaxGrowVal1 != 0F) hash ^= AdjPtMaxGrowVal1.GetHashCode();
      if (AdjPtMaxGrowVal2 != 0F) hash ^= AdjPtMaxGrowVal2.GetHashCode();
      if (AdjPtMaxGrowVal3 != 0F) hash ^= AdjPtMaxGrowVal3.GetHashCode();
      if (AdjPtMaxGrowVal4 != 0F) hash ^= AdjPtMaxGrowVal4.GetHashCode();
      if (InitInclinationSoul != 0F) hash ^= InitInclinationSoul.GetHashCode();
      if (AdjustmentValue != 0F) hash ^= AdjustmentValue.GetHashCode();
      if (BoundryInclinationSoul != 0F) hash ^= BoundryInclinationSoul.GetHashCode();
      if (BoundryValue != 0F) hash ^= BoundryValue.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Index);
      }
      if (Offset != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Offset);
      }
      if (StageMaxVal0 != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(StageMaxVal0);
      }
      if (StageMaxVal1 != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(StageMaxVal1);
      }
      if (StageMaxVal2 != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(StageMaxVal2);
      }
      if (StageMaxVal3 != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(StageMaxVal3);
      }
      if (StageMaxVal4 != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(StageMaxVal4);
      }
      if (StageMaxGrowVal0 != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(StageMaxGrowVal0);
      }
      if (StageMaxGrowVal1 != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(StageMaxGrowVal1);
      }
      if (StageMaxGrowVal2 != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(StageMaxGrowVal2);
      }
      if (StageMaxGrowVal3 != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(StageMaxGrowVal3);
      }
      if (StageMaxGrowVal4 != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(StageMaxGrowVal4);
      }
      if (AdjPtMaxGrowVal0 != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(AdjPtMaxGrowVal0);
      }
      if (AdjPtMaxGrowVal1 != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(AdjPtMaxGrowVal1);
      }
      if (AdjPtMaxGrowVal2 != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(AdjPtMaxGrowVal2);
      }
      if (AdjPtMaxGrowVal3 != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(AdjPtMaxGrowVal3);
      }
      if (AdjPtMaxGrowVal4 != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(AdjPtMaxGrowVal4);
      }
      if (InitInclinationSoul != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(InitInclinationSoul);
      }
      if (AdjustmentValue != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(AdjustmentValue);
      }
      if (BoundryInclinationSoul != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(BoundryInclinationSoul);
      }
      if (BoundryValue != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(BoundryValue);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Index);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Offset);
      }
      if (StageMaxVal0 != 0F) {
        size += 1 + 4;
      }
      if (StageMaxVal1 != 0F) {
        size += 1 + 4;
      }
      if (StageMaxVal2 != 0F) {
        size += 1 + 4;
      }
      if (StageMaxVal3 != 0F) {
        size += 1 + 4;
      }
      if (StageMaxVal4 != 0F) {
        size += 1 + 4;
      }
      if (StageMaxGrowVal0 != 0F) {
        size += 1 + 4;
      }
      if (StageMaxGrowVal1 != 0F) {
        size += 1 + 4;
      }
      if (StageMaxGrowVal2 != 0F) {
        size += 1 + 4;
      }
      if (StageMaxGrowVal3 != 0F) {
        size += 1 + 4;
      }
      if (StageMaxGrowVal4 != 0F) {
        size += 1 + 4;
      }
      if (AdjPtMaxGrowVal0 != 0F) {
        size += 1 + 4;
      }
      if (AdjPtMaxGrowVal1 != 0F) {
        size += 2 + 4;
      }
      if (AdjPtMaxGrowVal2 != 0F) {
        size += 2 + 4;
      }
      if (AdjPtMaxGrowVal3 != 0F) {
        size += 2 + 4;
      }
      if (AdjPtMaxGrowVal4 != 0F) {
        size += 2 + 4;
      }
      if (InitInclinationSoul != 0F) {
        size += 2 + 4;
      }
      if (AdjustmentValue != 0F) {
        size += 2 + 4;
      }
      if (BoundryInclinationSoul != 0F) {
        size += 2 + 4;
      }
      if (BoundryValue != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    public void MergeFrom(CalcCorrectGraph other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.StageMaxVal0 != 0F) {
        StageMaxVal0 = other.StageMaxVal0;
      }
      if (other.StageMaxVal1 != 0F) {
        StageMaxVal1 = other.StageMaxVal1;
      }
      if (other.StageMaxVal2 != 0F) {
        StageMaxVal2 = other.StageMaxVal2;
      }
      if (other.StageMaxVal3 != 0F) {
        StageMaxVal3 = other.StageMaxVal3;
      }
      if (other.StageMaxVal4 != 0F) {
        StageMaxVal4 = other.StageMaxVal4;
      }
      if (other.StageMaxGrowVal0 != 0F) {
        StageMaxGrowVal0 = other.StageMaxGrowVal0;
      }
      if (other.StageMaxGrowVal1 != 0F) {
        StageMaxGrowVal1 = other.StageMaxGrowVal1;
      }
      if (other.StageMaxGrowVal2 != 0F) {
        StageMaxGrowVal2 = other.StageMaxGrowVal2;
      }
      if (other.StageMaxGrowVal3 != 0F) {
        StageMaxGrowVal3 = other.StageMaxGrowVal3;
      }
      if (other.StageMaxGrowVal4 != 0F) {
        StageMaxGrowVal4 = other.StageMaxGrowVal4;
      }
      if (other.AdjPtMaxGrowVal0 != 0F) {
        AdjPtMaxGrowVal0 = other.AdjPtMaxGrowVal0;
      }
      if (other.AdjPtMaxGrowVal1 != 0F) {
        AdjPtMaxGrowVal1 = other.AdjPtMaxGrowVal1;
      }
      if (other.AdjPtMaxGrowVal2 != 0F) {
        AdjPtMaxGrowVal2 = other.AdjPtMaxGrowVal2;
      }
      if (other.AdjPtMaxGrowVal3 != 0F) {
        AdjPtMaxGrowVal3 = other.AdjPtMaxGrowVal3;
      }
      if (other.AdjPtMaxGrowVal4 != 0F) {
        AdjPtMaxGrowVal4 = other.AdjPtMaxGrowVal4;
      }
      if (other.InitInclinationSoul != 0F) {
        InitInclinationSoul = other.InitInclinationSoul;
      }
      if (other.AdjustmentValue != 0F) {
        AdjustmentValue = other.AdjustmentValue;
      }
      if (other.BoundryInclinationSoul != 0F) {
        BoundryInclinationSoul = other.BoundryInclinationSoul;
      }
      if (other.BoundryValue != 0F) {
        BoundryValue = other.BoundryValue;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadSInt32();
            break;
          }
          case 32: {
            Offset = input.ReadSInt32();
            break;
          }
          case 45: {
            StageMaxVal0 = input.ReadFloat();
            break;
          }
          case 53: {
            StageMaxVal1 = input.ReadFloat();
            break;
          }
          case 61: {
            StageMaxVal2 = input.ReadFloat();
            break;
          }
          case 69: {
            StageMaxVal3 = input.ReadFloat();
            break;
          }
          case 77: {
            StageMaxVal4 = input.ReadFloat();
            break;
          }
          case 85: {
            StageMaxGrowVal0 = input.ReadFloat();
            break;
          }
          case 93: {
            StageMaxGrowVal1 = input.ReadFloat();
            break;
          }
          case 101: {
            StageMaxGrowVal2 = input.ReadFloat();
            break;
          }
          case 109: {
            StageMaxGrowVal3 = input.ReadFloat();
            break;
          }
          case 117: {
            StageMaxGrowVal4 = input.ReadFloat();
            break;
          }
          case 125: {
            AdjPtMaxGrowVal0 = input.ReadFloat();
            break;
          }
          case 133: {
            AdjPtMaxGrowVal1 = input.ReadFloat();
            break;
          }
          case 141: {
            AdjPtMaxGrowVal2 = input.ReadFloat();
            break;
          }
          case 149: {
            AdjPtMaxGrowVal3 = input.ReadFloat();
            break;
          }
          case 157: {
            AdjPtMaxGrowVal4 = input.ReadFloat();
            break;
          }
          case 165: {
            InitInclinationSoul = input.ReadFloat();
            break;
          }
          case 173: {
            AdjustmentValue = input.ReadFloat();
            break;
          }
          case 181: {
            BoundryInclinationSoul = input.ReadFloat();
            break;
          }
          case 189: {
            BoundryValue = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Magic : pb::IMessage<Magic> {
    private static readonly pb::MessageParser<Magic> _parser = new pb::MessageParser<Magic>(() => new Magic());
    public static pb::MessageParser<Magic> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ds3Ext.Ds3ExtReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Magic() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Magic(Magic other) : this() {
      id_ = other.id_;
      index_ = other.index_;
      offset_ = other.offset_;
      yesNoDialogMessageId_ = other.yesNoDialogMessageId_;
      limitCancelSpEffectId_ = other.limitCancelSpEffectId_;
      sortId_ = other.sortId_;
      refId_ = other.refId_;
      mp_ = other.mp_;
      stamina_ = other.stamina_;
      icon_ = other.icon_;
      behaviorId_ = other.behaviorId_;
      mtrlItemId_ = other.mtrlItemId_;
      replaceMagicId_ = other.replaceMagicId_;
      maxQuantity_ = other.maxQuantity_;
      humanity_ = other.humanity_;
      overDexterity_ = other.overDexterity_;
      sfxVariationid_ = other.sfxVariationid_;
      slotLength_ = other.slotLength_;
      requirementIntellect_ = other.requirementIntellect_;
      requirementFaith_ = other.requirementFaith_;
      analogDexterityMin_ = other.analogDexterityMin_;
      analogDexterityMax_ = other.analogDexterityMax_;
      ezStateBehaviorType_ = other.ezStateBehaviorType_;
      refCategory_ = other.refCategory_;
      spEffectCategory_ = other.spEffectCategory_;
      refType_ = other.refType_;
      opmeMenuType_ = other.opmeMenuType_;
      hasSpEffectType_ = other.hasSpEffectType_;
      replaceCategory_ = other.replaceCategory_;
      useLimitCategory_ = other.useLimitCategory_;
    }

    public Magic Clone() {
      return new Magic(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Offset" field.</summary>
    public const int OffsetFieldNumber = 4;
    private int offset_;
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "YesNoDialogMessageId" field.</summary>
    public const int YesNoDialogMessageIdFieldNumber = 5;
    private int yesNoDialogMessageId_;
    public int YesNoDialogMessageId {
      get { return yesNoDialogMessageId_; }
      set {
        yesNoDialogMessageId_ = value;
      }
    }

    /// <summary>Field number for the "LimitCancelSpEffectId" field.</summary>
    public const int LimitCancelSpEffectIdFieldNumber = 6;
    private int limitCancelSpEffectId_;
    public int LimitCancelSpEffectId {
      get { return limitCancelSpEffectId_; }
      set {
        limitCancelSpEffectId_ = value;
      }
    }

    /// <summary>Field number for the "SortId" field.</summary>
    public const int SortIdFieldNumber = 7;
    private int sortId_;
    public int SortId {
      get { return sortId_; }
      set {
        sortId_ = value;
      }
    }

    /// <summary>Field number for the "RefId" field.</summary>
    public const int RefIdFieldNumber = 8;
    private int refId_;
    public int RefId {
      get { return refId_; }
      set {
        refId_ = value;
      }
    }

    /// <summary>Field number for the "Mp" field.</summary>
    public const int MpFieldNumber = 9;
    private int mp_;
    public int Mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    /// <summary>Field number for the "Stamina" field.</summary>
    public const int StaminaFieldNumber = 10;
    private int stamina_;
    public int Stamina {
      get { return stamina_; }
      set {
        stamina_ = value;
      }
    }

    /// <summary>Field number for the "Icon" field.</summary>
    public const int IconFieldNumber = 11;
    private int icon_;
    public int Icon {
      get { return icon_; }
      set {
        icon_ = value;
      }
    }

    /// <summary>Field number for the "BehaviorId" field.</summary>
    public const int BehaviorIdFieldNumber = 12;
    private int behaviorId_;
    public int BehaviorId {
      get { return behaviorId_; }
      set {
        behaviorId_ = value;
      }
    }

    /// <summary>Field number for the "MtrlItemId" field.</summary>
    public const int MtrlItemIdFieldNumber = 13;
    private int mtrlItemId_;
    public int MtrlItemId {
      get { return mtrlItemId_; }
      set {
        mtrlItemId_ = value;
      }
    }

    /// <summary>Field number for the "ReplaceMagicId" field.</summary>
    public const int ReplaceMagicIdFieldNumber = 14;
    private int replaceMagicId_;
    public int ReplaceMagicId {
      get { return replaceMagicId_; }
      set {
        replaceMagicId_ = value;
      }
    }

    /// <summary>Field number for the "MaxQuantity" field.</summary>
    public const int MaxQuantityFieldNumber = 15;
    private int maxQuantity_;
    public int MaxQuantity {
      get { return maxQuantity_; }
      set {
        maxQuantity_ = value;
      }
    }

    /// <summary>Field number for the "Humanity" field.</summary>
    public const int HumanityFieldNumber = 16;
    private uint humanity_;
    public uint Humanity {
      get { return humanity_; }
      set {
        humanity_ = value;
      }
    }

    /// <summary>Field number for the "OverDexterity" field.</summary>
    public const int OverDexterityFieldNumber = 17;
    private uint overDexterity_;
    public uint OverDexterity {
      get { return overDexterity_; }
      set {
        overDexterity_ = value;
      }
    }

    /// <summary>Field number for the "SfxVariationid" field.</summary>
    public const int SfxVariationidFieldNumber = 18;
    private uint sfxVariationid_;
    public uint SfxVariationid {
      get { return sfxVariationid_; }
      set {
        sfxVariationid_ = value;
      }
    }

    /// <summary>Field number for the "SlotLength" field.</summary>
    public const int SlotLengthFieldNumber = 19;
    private uint slotLength_;
    public uint SlotLength {
      get { return slotLength_; }
      set {
        slotLength_ = value;
      }
    }

    /// <summary>Field number for the "RequirementIntellect" field.</summary>
    public const int RequirementIntellectFieldNumber = 20;
    private uint requirementIntellect_;
    public uint RequirementIntellect {
      get { return requirementIntellect_; }
      set {
        requirementIntellect_ = value;
      }
    }

    /// <summary>Field number for the "RequirementFaith" field.</summary>
    public const int RequirementFaithFieldNumber = 21;
    private uint requirementFaith_;
    public uint RequirementFaith {
      get { return requirementFaith_; }
      set {
        requirementFaith_ = value;
      }
    }

    /// <summary>Field number for the "AnalogDexterityMin" field.</summary>
    public const int AnalogDexterityMinFieldNumber = 22;
    private uint analogDexterityMin_;
    public uint AnalogDexterityMin {
      get { return analogDexterityMin_; }
      set {
        analogDexterityMin_ = value;
      }
    }

    /// <summary>Field number for the "AnalogDexterityMax" field.</summary>
    public const int AnalogDexterityMaxFieldNumber = 23;
    private uint analogDexterityMax_;
    public uint AnalogDexterityMax {
      get { return analogDexterityMax_; }
      set {
        analogDexterityMax_ = value;
      }
    }

    /// <summary>Field number for the "EzStateBehaviorType" field.</summary>
    public const int EzStateBehaviorTypeFieldNumber = 24;
    private uint ezStateBehaviorType_;
    public uint EzStateBehaviorType {
      get { return ezStateBehaviorType_; }
      set {
        ezStateBehaviorType_ = value;
      }
    }

    /// <summary>Field number for the "RefCategory" field.</summary>
    public const int RefCategoryFieldNumber = 25;
    private uint refCategory_;
    public uint RefCategory {
      get { return refCategory_; }
      set {
        refCategory_ = value;
      }
    }

    /// <summary>Field number for the "SpEffectCategory" field.</summary>
    public const int SpEffectCategoryFieldNumber = 26;
    private uint spEffectCategory_;
    public uint SpEffectCategory {
      get { return spEffectCategory_; }
      set {
        spEffectCategory_ = value;
      }
    }

    /// <summary>Field number for the "RefType" field.</summary>
    public const int RefTypeFieldNumber = 27;
    private uint refType_;
    public uint RefType {
      get { return refType_; }
      set {
        refType_ = value;
      }
    }

    /// <summary>Field number for the "OpmeMenuType" field.</summary>
    public const int OpmeMenuTypeFieldNumber = 28;
    private uint opmeMenuType_;
    public uint OpmeMenuType {
      get { return opmeMenuType_; }
      set {
        opmeMenuType_ = value;
      }
    }

    /// <summary>Field number for the "HasSpEffectType" field.</summary>
    public const int HasSpEffectTypeFieldNumber = 29;
    private uint hasSpEffectType_;
    public uint HasSpEffectType {
      get { return hasSpEffectType_; }
      set {
        hasSpEffectType_ = value;
      }
    }

    /// <summary>Field number for the "ReplaceCategory" field.</summary>
    public const int ReplaceCategoryFieldNumber = 30;
    private uint replaceCategory_;
    public uint ReplaceCategory {
      get { return replaceCategory_; }
      set {
        replaceCategory_ = value;
      }
    }

    /// <summary>Field number for the "UseLimitCategory" field.</summary>
    public const int UseLimitCategoryFieldNumber = 31;
    private uint useLimitCategory_;
    public uint UseLimitCategory {
      get { return useLimitCategory_; }
      set {
        useLimitCategory_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Magic);
    }

    public bool Equals(Magic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Index != other.Index) return false;
      if (Offset != other.Offset) return false;
      if (YesNoDialogMessageId != other.YesNoDialogMessageId) return false;
      if (LimitCancelSpEffectId != other.LimitCancelSpEffectId) return false;
      if (SortId != other.SortId) return false;
      if (RefId != other.RefId) return false;
      if (Mp != other.Mp) return false;
      if (Stamina != other.Stamina) return false;
      if (Icon != other.Icon) return false;
      if (BehaviorId != other.BehaviorId) return false;
      if (MtrlItemId != other.MtrlItemId) return false;
      if (ReplaceMagicId != other.ReplaceMagicId) return false;
      if (MaxQuantity != other.MaxQuantity) return false;
      if (Humanity != other.Humanity) return false;
      if (OverDexterity != other.OverDexterity) return false;
      if (SfxVariationid != other.SfxVariationid) return false;
      if (SlotLength != other.SlotLength) return false;
      if (RequirementIntellect != other.RequirementIntellect) return false;
      if (RequirementFaith != other.RequirementFaith) return false;
      if (AnalogDexterityMin != other.AnalogDexterityMin) return false;
      if (AnalogDexterityMax != other.AnalogDexterityMax) return false;
      if (EzStateBehaviorType != other.EzStateBehaviorType) return false;
      if (RefCategory != other.RefCategory) return false;
      if (SpEffectCategory != other.SpEffectCategory) return false;
      if (RefType != other.RefType) return false;
      if (OpmeMenuType != other.OpmeMenuType) return false;
      if (HasSpEffectType != other.HasSpEffectType) return false;
      if (ReplaceCategory != other.ReplaceCategory) return false;
      if (UseLimitCategory != other.UseLimitCategory) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (YesNoDialogMessageId != 0) hash ^= YesNoDialogMessageId.GetHashCode();
      if (LimitCancelSpEffectId != 0) hash ^= LimitCancelSpEffectId.GetHashCode();
      if (SortId != 0) hash ^= SortId.GetHashCode();
      if (RefId != 0) hash ^= RefId.GetHashCode();
      if (Mp != 0) hash ^= Mp.GetHashCode();
      if (Stamina != 0) hash ^= Stamina.GetHashCode();
      if (Icon != 0) hash ^= Icon.GetHashCode();
      if (BehaviorId != 0) hash ^= BehaviorId.GetHashCode();
      if (MtrlItemId != 0) hash ^= MtrlItemId.GetHashCode();
      if (ReplaceMagicId != 0) hash ^= ReplaceMagicId.GetHashCode();
      if (MaxQuantity != 0) hash ^= MaxQuantity.GetHashCode();
      if (Humanity != 0) hash ^= Humanity.GetHashCode();
      if (OverDexterity != 0) hash ^= OverDexterity.GetHashCode();
      if (SfxVariationid != 0) hash ^= SfxVariationid.GetHashCode();
      if (SlotLength != 0) hash ^= SlotLength.GetHashCode();
      if (RequirementIntellect != 0) hash ^= RequirementIntellect.GetHashCode();
      if (RequirementFaith != 0) hash ^= RequirementFaith.GetHashCode();
      if (AnalogDexterityMin != 0) hash ^= AnalogDexterityMin.GetHashCode();
      if (AnalogDexterityMax != 0) hash ^= AnalogDexterityMax.GetHashCode();
      if (EzStateBehaviorType != 0) hash ^= EzStateBehaviorType.GetHashCode();
      if (RefCategory != 0) hash ^= RefCategory.GetHashCode();
      if (SpEffectCategory != 0) hash ^= SpEffectCategory.GetHashCode();
      if (RefType != 0) hash ^= RefType.GetHashCode();
      if (OpmeMenuType != 0) hash ^= OpmeMenuType.GetHashCode();
      if (HasSpEffectType != 0) hash ^= HasSpEffectType.GetHashCode();
      if (ReplaceCategory != 0) hash ^= ReplaceCategory.GetHashCode();
      if (UseLimitCategory != 0) hash ^= UseLimitCategory.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Index);
      }
      if (Offset != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Offset);
      }
      if (YesNoDialogMessageId != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(YesNoDialogMessageId);
      }
      if (LimitCancelSpEffectId != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(LimitCancelSpEffectId);
      }
      if (SortId != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(SortId);
      }
      if (RefId != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(RefId);
      }
      if (Mp != 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(Mp);
      }
      if (Stamina != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(Stamina);
      }
      if (Icon != 0) {
        output.WriteRawTag(88);
        output.WriteSInt32(Icon);
      }
      if (BehaviorId != 0) {
        output.WriteRawTag(96);
        output.WriteSInt32(BehaviorId);
      }
      if (MtrlItemId != 0) {
        output.WriteRawTag(104);
        output.WriteSInt32(MtrlItemId);
      }
      if (ReplaceMagicId != 0) {
        output.WriteRawTag(112);
        output.WriteSInt32(ReplaceMagicId);
      }
      if (MaxQuantity != 0) {
        output.WriteRawTag(120);
        output.WriteSInt32(MaxQuantity);
      }
      if (Humanity != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(Humanity);
      }
      if (OverDexterity != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(OverDexterity);
      }
      if (SfxVariationid != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(SfxVariationid);
      }
      if (SlotLength != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(SlotLength);
      }
      if (RequirementIntellect != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(RequirementIntellect);
      }
      if (RequirementFaith != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(RequirementFaith);
      }
      if (AnalogDexterityMin != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(AnalogDexterityMin);
      }
      if (AnalogDexterityMax != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(AnalogDexterityMax);
      }
      if (EzStateBehaviorType != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(EzStateBehaviorType);
      }
      if (RefCategory != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(RefCategory);
      }
      if (SpEffectCategory != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(SpEffectCategory);
      }
      if (RefType != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(RefType);
      }
      if (OpmeMenuType != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(OpmeMenuType);
      }
      if (HasSpEffectType != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(HasSpEffectType);
      }
      if (ReplaceCategory != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(ReplaceCategory);
      }
      if (UseLimitCategory != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(UseLimitCategory);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Index);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Offset);
      }
      if (YesNoDialogMessageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(YesNoDialogMessageId);
      }
      if (LimitCancelSpEffectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LimitCancelSpEffectId);
      }
      if (SortId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SortId);
      }
      if (RefId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(RefId);
      }
      if (Mp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Mp);
      }
      if (Stamina != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Stamina);
      }
      if (Icon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Icon);
      }
      if (BehaviorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BehaviorId);
      }
      if (MtrlItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MtrlItemId);
      }
      if (ReplaceMagicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ReplaceMagicId);
      }
      if (MaxQuantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MaxQuantity);
      }
      if (Humanity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Humanity);
      }
      if (OverDexterity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OverDexterity);
      }
      if (SfxVariationid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SfxVariationid);
      }
      if (SlotLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SlotLength);
      }
      if (RequirementIntellect != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RequirementIntellect);
      }
      if (RequirementFaith != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RequirementFaith);
      }
      if (AnalogDexterityMin != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AnalogDexterityMin);
      }
      if (AnalogDexterityMax != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AnalogDexterityMax);
      }
      if (EzStateBehaviorType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EzStateBehaviorType);
      }
      if (RefCategory != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RefCategory);
      }
      if (SpEffectCategory != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpEffectCategory);
      }
      if (RefType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RefType);
      }
      if (OpmeMenuType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OpmeMenuType);
      }
      if (HasSpEffectType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HasSpEffectType);
      }
      if (ReplaceCategory != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ReplaceCategory);
      }
      if (UseLimitCategory != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UseLimitCategory);
      }
      return size;
    }

    public void MergeFrom(Magic other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.YesNoDialogMessageId != 0) {
        YesNoDialogMessageId = other.YesNoDialogMessageId;
      }
      if (other.LimitCancelSpEffectId != 0) {
        LimitCancelSpEffectId = other.LimitCancelSpEffectId;
      }
      if (other.SortId != 0) {
        SortId = other.SortId;
      }
      if (other.RefId != 0) {
        RefId = other.RefId;
      }
      if (other.Mp != 0) {
        Mp = other.Mp;
      }
      if (other.Stamina != 0) {
        Stamina = other.Stamina;
      }
      if (other.Icon != 0) {
        Icon = other.Icon;
      }
      if (other.BehaviorId != 0) {
        BehaviorId = other.BehaviorId;
      }
      if (other.MtrlItemId != 0) {
        MtrlItemId = other.MtrlItemId;
      }
      if (other.ReplaceMagicId != 0) {
        ReplaceMagicId = other.ReplaceMagicId;
      }
      if (other.MaxQuantity != 0) {
        MaxQuantity = other.MaxQuantity;
      }
      if (other.Humanity != 0) {
        Humanity = other.Humanity;
      }
      if (other.OverDexterity != 0) {
        OverDexterity = other.OverDexterity;
      }
      if (other.SfxVariationid != 0) {
        SfxVariationid = other.SfxVariationid;
      }
      if (other.SlotLength != 0) {
        SlotLength = other.SlotLength;
      }
      if (other.RequirementIntellect != 0) {
        RequirementIntellect = other.RequirementIntellect;
      }
      if (other.RequirementFaith != 0) {
        RequirementFaith = other.RequirementFaith;
      }
      if (other.AnalogDexterityMin != 0) {
        AnalogDexterityMin = other.AnalogDexterityMin;
      }
      if (other.AnalogDexterityMax != 0) {
        AnalogDexterityMax = other.AnalogDexterityMax;
      }
      if (other.EzStateBehaviorType != 0) {
        EzStateBehaviorType = other.EzStateBehaviorType;
      }
      if (other.RefCategory != 0) {
        RefCategory = other.RefCategory;
      }
      if (other.SpEffectCategory != 0) {
        SpEffectCategory = other.SpEffectCategory;
      }
      if (other.RefType != 0) {
        RefType = other.RefType;
      }
      if (other.OpmeMenuType != 0) {
        OpmeMenuType = other.OpmeMenuType;
      }
      if (other.HasSpEffectType != 0) {
        HasSpEffectType = other.HasSpEffectType;
      }
      if (other.ReplaceCategory != 0) {
        ReplaceCategory = other.ReplaceCategory;
      }
      if (other.UseLimitCategory != 0) {
        UseLimitCategory = other.UseLimitCategory;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadSInt32();
            break;
          }
          case 32: {
            Offset = input.ReadSInt32();
            break;
          }
          case 40: {
            YesNoDialogMessageId = input.ReadSInt32();
            break;
          }
          case 48: {
            LimitCancelSpEffectId = input.ReadSInt32();
            break;
          }
          case 56: {
            SortId = input.ReadSInt32();
            break;
          }
          case 64: {
            RefId = input.ReadSInt32();
            break;
          }
          case 72: {
            Mp = input.ReadSInt32();
            break;
          }
          case 80: {
            Stamina = input.ReadSInt32();
            break;
          }
          case 88: {
            Icon = input.ReadSInt32();
            break;
          }
          case 96: {
            BehaviorId = input.ReadSInt32();
            break;
          }
          case 104: {
            MtrlItemId = input.ReadSInt32();
            break;
          }
          case 112: {
            ReplaceMagicId = input.ReadSInt32();
            break;
          }
          case 120: {
            MaxQuantity = input.ReadSInt32();
            break;
          }
          case 128: {
            Humanity = input.ReadUInt32();
            break;
          }
          case 136: {
            OverDexterity = input.ReadUInt32();
            break;
          }
          case 144: {
            SfxVariationid = input.ReadUInt32();
            break;
          }
          case 152: {
            SlotLength = input.ReadUInt32();
            break;
          }
          case 160: {
            RequirementIntellect = input.ReadUInt32();
            break;
          }
          case 168: {
            RequirementFaith = input.ReadUInt32();
            break;
          }
          case 176: {
            AnalogDexterityMin = input.ReadUInt32();
            break;
          }
          case 184: {
            AnalogDexterityMax = input.ReadUInt32();
            break;
          }
          case 192: {
            EzStateBehaviorType = input.ReadUInt32();
            break;
          }
          case 200: {
            RefCategory = input.ReadUInt32();
            break;
          }
          case 208: {
            SpEffectCategory = input.ReadUInt32();
            break;
          }
          case 216: {
            RefType = input.ReadUInt32();
            break;
          }
          case 224: {
            OpmeMenuType = input.ReadUInt32();
            break;
          }
          case 232: {
            HasSpEffectType = input.ReadUInt32();
            break;
          }
          case 240: {
            ReplaceCategory = input.ReadUInt32();
            break;
          }
          case 248: {
            UseLimitCategory = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SpEffectParam : pb::IMessage<SpEffectParam> {
    private static readonly pb::MessageParser<SpEffectParam> _parser = new pb::MessageParser<SpEffectParam>(() => new SpEffectParam());
    public static pb::MessageParser<SpEffectParam> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ds3Ext.Ds3ExtReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SpEffectParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SpEffectParam(SpEffectParam other) : this() {
      id_ = other.id_;
      index_ = other.index_;
      offset_ = other.offset_;
      iconId_ = other.iconId_;
      conditionHp_ = other.conditionHp_;
      effectEndurance_ = other.effectEndurance_;
      motionInterval_ = other.motionInterval_;
      maxHpRate_ = other.maxHpRate_;
      maxMpRate_ = other.maxMpRate_;
      maxStaminaRate_ = other.maxStaminaRate_;
      slashDamageCutRate_ = other.slashDamageCutRate_;
      blowDamageCutRate_ = other.blowDamageCutRate_;
      thrustDamageCutRate_ = other.thrustDamageCutRate_;
      neutralDamageCutRate_ = other.neutralDamageCutRate_;
      magicDamageCutRate_ = other.magicDamageCutRate_;
      fireDamageCutRate_ = other.fireDamageCutRate_;
      thunderDamageCutRate_ = other.thunderDamageCutRate_;
      physicsAttackRate_ = other.physicsAttackRate_;
      magicAttackRate_ = other.magicAttackRate_;
      fireAttackRate_ = other.fireAttackRate_;
      thunderAttackRate_ = other.thunderAttackRate_;
      physicsAttackPowerRate_ = other.physicsAttackPowerRate_;
      magicAttackPowerRate_ = other.magicAttackPowerRate_;
      fireAttackPowerRate_ = other.fireAttackPowerRate_;
      thunderAttackPowerRate_ = other.thunderAttackPowerRate_;
      physicsAttackPower_ = other.physicsAttackPower_;
      magicAttackPower_ = other.magicAttackPower_;
      fireAttackPower_ = other.fireAttackPower_;
      thunderAttackPower_ = other.thunderAttackPower_;
      physicsDifferenceRate_ = other.physicsDifferenceRate_;
      magicDifferenceRate_ = other.magicDifferenceRate_;
      fireDifferenceRate_ = other.fireDifferenceRate_;
      thunderDifferenceRate_ = other.thunderDifferenceRate_;
      physicsDifference_ = other.physicsDifference_;
      magicDifference_ = other.magicDifference_;
      fireDifference_ = other.fireDifference_;
      thunderDifference_ = other.thunderDifference_;
      noGuardDamageRate_ = other.noGuardDamageRate_;
      vitalSpotChangeRate_ = other.vitalSpotChangeRate_;
      normalSpotChangeRate_ = other.normalSpotChangeRate_;
      maxHpChangeRate_ = other.maxHpChangeRate_;
      behaviorId_ = other.behaviorId_;
      changeHpRate_ = other.changeHpRate_;
      changeHpPoint_ = other.changeHpPoint_;
      changeMpRate_ = other.changeMpRate_;
      changeMpPoint_ = other.changeMpPoint_;
      mpRecoverChangeSpeed_ = other.mpRecoverChangeSpeed_;
      changeStaminaRate_ = other.changeStaminaRate_;
      changeStaminaPoint_ = other.changeStaminaPoint_;
      staminaRecoverChangeSpeed_ = other.staminaRecoverChangeSpeed_;
      magicEffectTimeChange_ = other.magicEffectTimeChange_;
      insideDurability_ = other.insideDurability_;
      maxDurability_ = other.maxDurability_;
      poisonAttackPower_ = other.poisonAttackPower_;
      registIllness_ = other.registIllness_;
      bloodAttackPower_ = other.bloodAttackPower_;
      registCurse_ = other.registCurse_;
      fallDamageRate_ = other.fallDamageRate_;
      soulRate_ = other.soulRate_;
      equipWeightChangeRate_ = other.equipWeightChangeRate_;
      allItemWeightChangeRate_ = other.allItemWeightChangeRate_;
      soul_ = other.soul_;
      animidOffset_ = other.animidOffset_;
      haveSoulRate_ = other.haveSoulRate_;
      targetPriority_ = other.targetPriority_;
      sightSearchEnemyCut_ = other.sightSearchEnemyCut_;
      hearingSearchEnemyCut_ = other.hearingSearchEnemyCut_;
      grabityRate_ = other.grabityRate_;
      registPoisonChangeRate_ = other.registPoisonChangeRate_;
      registToxicChangeRate_ = other.registToxicChangeRate_;
      registBloodChangeRate_ = other.registBloodChangeRate_;
      registCurseChangeRate_ = other.registCurseChangeRate_;
      soulStealRate_ = other.soulStealRate_;
      lifeReductionRate_ = other.lifeReductionRate_;
      hpRecoverRate_ = other.hpRecoverRate_;
      replaceSpEffectId_ = other.replaceSpEffectId_;
      cycleOccurrenceSpEffectId_ = other.cycleOccurrenceSpEffectId_;
      atkOccurrenceSpEffectId_ = other.atkOccurrenceSpEffectId_;
      guardDefFlickPowerRate_ = other.guardDefFlickPowerRate_;
      guardStaminaCutRate_ = other.guardStaminaCutRate_;
      rayCastPassedTime_ = other.rayCastPassedTime_;
      changeSuperArmorPoint_ = other.changeSuperArmorPoint_;
      bowDistRate_ = other.bowDistRate_;
      spCategory_ = other.spCategory_;
      categoryPriority_ = other.categoryPriority_;
      saveCategory_ = other.saveCategory_;
      changeMagicSlot_ = other.changeMagicSlot_;
      changeMiracleSlot_ = other.changeMiracleSlot_;
      heroPointDamage_ = other.heroPointDamage_;
      defFlickPower_ = other.defFlickPower_;
      flickDamageCutRate_ = other.flickDamageCutRate_;
      bloodDamageRate_ = other.bloodDamageRate_;
      dmgLvNone_ = other.dmgLvNone_;
      dmgLvS_ = other.dmgLvS_;
      dmgLvM_ = other.dmgLvM_;
      dmgLvL_ = other.dmgLvL_;
      dmgLvBlowM_ = other.dmgLvBlowM_;
      dmgLvPush_ = other.dmgLvPush_;
      dmgLvStrike_ = other.dmgLvStrike_;
      dmgLvBlowS_ = other.dmgLvBlowS_;
      dmgLvMin_ = other.dmgLvMin_;
      dmgLvUppercut_ = other.dmgLvUppercut_;
      dmgLvBlowLL_ = other.dmgLvBlowLL_;
      dmgLvBreath_ = other.dmgLvBreath_;
      atkAttribute_ = other.atkAttribute_;
      spAttribute_ = other.spAttribute_;
      stateInfo_ = other.stateInfo_;
      wepParamChange_ = other.wepParamChange_;
      moveType_ = other.moveType_;
      lifeReductionType_ = other.lifeReductionType_;
      throwCondition_ = other.throwCondition_;
      addBehaviorJudgeIdCondition_ = other.addBehaviorJudgeIdCondition_;
      addBehaviorJudgeIdAdd_ = other.addBehaviorJudgeIdAdd_;
      effectTargetSelf_ = other.effectTargetSelf_;
      effectTargetFriend_ = other.effectTargetFriend_;
      effectTargetEnemy_ = other.effectTargetEnemy_;
      effectTargetPlayer_ = other.effectTargetPlayer_;
      effectTargetAI_ = other.effectTargetAI_;
      effectTargetLive_ = other.effectTargetLive_;
      effectTargetGhost_ = other.effectTargetGhost_;
      effectTargetWhiteGhost_ = other.effectTargetWhiteGhost_;
      strangeEnum_ = other.strangeEnum_;
      frostAttackPower_ = other.frostAttackPower_;
      darkDifferenceRate_ = other.darkDifferenceRate_;
    }

    public SpEffectParam Clone() {
      return new SpEffectParam(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Offset" field.</summary>
    public const int OffsetFieldNumber = 4;
    private int offset_;
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "IconId" field.</summary>
    public const int IconIdFieldNumber = 5;
    private int iconId_;
    public int IconId {
      get { return iconId_; }
      set {
        iconId_ = value;
      }
    }

    /// <summary>Field number for the "ConditionHp" field.</summary>
    public const int ConditionHpFieldNumber = 6;
    private float conditionHp_;
    public float ConditionHp {
      get { return conditionHp_; }
      set {
        conditionHp_ = value;
      }
    }

    /// <summary>Field number for the "EffectEndurance" field.</summary>
    public const int EffectEnduranceFieldNumber = 7;
    private float effectEndurance_;
    public float EffectEndurance {
      get { return effectEndurance_; }
      set {
        effectEndurance_ = value;
      }
    }

    /// <summary>Field number for the "MotionInterval" field.</summary>
    public const int MotionIntervalFieldNumber = 8;
    private int motionInterval_;
    public int MotionInterval {
      get { return motionInterval_; }
      set {
        motionInterval_ = value;
      }
    }

    /// <summary>Field number for the "MaxHpRate" field.</summary>
    public const int MaxHpRateFieldNumber = 9;
    private float maxHpRate_;
    public float MaxHpRate {
      get { return maxHpRate_; }
      set {
        maxHpRate_ = value;
      }
    }

    /// <summary>Field number for the "MaxMpRate" field.</summary>
    public const int MaxMpRateFieldNumber = 10;
    private float maxMpRate_;
    public float MaxMpRate {
      get { return maxMpRate_; }
      set {
        maxMpRate_ = value;
      }
    }

    /// <summary>Field number for the "MaxStaminaRate" field.</summary>
    public const int MaxStaminaRateFieldNumber = 11;
    private float maxStaminaRate_;
    public float MaxStaminaRate {
      get { return maxStaminaRate_; }
      set {
        maxStaminaRate_ = value;
      }
    }

    /// <summary>Field number for the "SlashDamageCutRate" field.</summary>
    public const int SlashDamageCutRateFieldNumber = 12;
    private float slashDamageCutRate_;
    public float SlashDamageCutRate {
      get { return slashDamageCutRate_; }
      set {
        slashDamageCutRate_ = value;
      }
    }

    /// <summary>Field number for the "BlowDamageCutRate" field.</summary>
    public const int BlowDamageCutRateFieldNumber = 13;
    private float blowDamageCutRate_;
    public float BlowDamageCutRate {
      get { return blowDamageCutRate_; }
      set {
        blowDamageCutRate_ = value;
      }
    }

    /// <summary>Field number for the "ThrustDamageCutRate" field.</summary>
    public const int ThrustDamageCutRateFieldNumber = 14;
    private float thrustDamageCutRate_;
    public float ThrustDamageCutRate {
      get { return thrustDamageCutRate_; }
      set {
        thrustDamageCutRate_ = value;
      }
    }

    /// <summary>Field number for the "NeutralDamageCutRate" field.</summary>
    public const int NeutralDamageCutRateFieldNumber = 15;
    private float neutralDamageCutRate_;
    public float NeutralDamageCutRate {
      get { return neutralDamageCutRate_; }
      set {
        neutralDamageCutRate_ = value;
      }
    }

    /// <summary>Field number for the "MagicDamageCutRate" field.</summary>
    public const int MagicDamageCutRateFieldNumber = 16;
    private float magicDamageCutRate_;
    public float MagicDamageCutRate {
      get { return magicDamageCutRate_; }
      set {
        magicDamageCutRate_ = value;
      }
    }

    /// <summary>Field number for the "FireDamageCutRate" field.</summary>
    public const int FireDamageCutRateFieldNumber = 17;
    private float fireDamageCutRate_;
    public float FireDamageCutRate {
      get { return fireDamageCutRate_; }
      set {
        fireDamageCutRate_ = value;
      }
    }

    /// <summary>Field number for the "ThunderDamageCutRate" field.</summary>
    public const int ThunderDamageCutRateFieldNumber = 18;
    private float thunderDamageCutRate_;
    public float ThunderDamageCutRate {
      get { return thunderDamageCutRate_; }
      set {
        thunderDamageCutRate_ = value;
      }
    }

    /// <summary>Field number for the "PhysicsAttackRate" field.</summary>
    public const int PhysicsAttackRateFieldNumber = 19;
    private float physicsAttackRate_;
    public float PhysicsAttackRate {
      get { return physicsAttackRate_; }
      set {
        physicsAttackRate_ = value;
      }
    }

    /// <summary>Field number for the "MagicAttackRate" field.</summary>
    public const int MagicAttackRateFieldNumber = 20;
    private float magicAttackRate_;
    public float MagicAttackRate {
      get { return magicAttackRate_; }
      set {
        magicAttackRate_ = value;
      }
    }

    /// <summary>Field number for the "FireAttackRate" field.</summary>
    public const int FireAttackRateFieldNumber = 21;
    private float fireAttackRate_;
    public float FireAttackRate {
      get { return fireAttackRate_; }
      set {
        fireAttackRate_ = value;
      }
    }

    /// <summary>Field number for the "ThunderAttackRate" field.</summary>
    public const int ThunderAttackRateFieldNumber = 22;
    private float thunderAttackRate_;
    public float ThunderAttackRate {
      get { return thunderAttackRate_; }
      set {
        thunderAttackRate_ = value;
      }
    }

    /// <summary>Field number for the "PhysicsAttackPowerRate" field.</summary>
    public const int PhysicsAttackPowerRateFieldNumber = 23;
    private float physicsAttackPowerRate_;
    public float PhysicsAttackPowerRate {
      get { return physicsAttackPowerRate_; }
      set {
        physicsAttackPowerRate_ = value;
      }
    }

    /// <summary>Field number for the "MagicAttackPowerRate" field.</summary>
    public const int MagicAttackPowerRateFieldNumber = 24;
    private float magicAttackPowerRate_;
    public float MagicAttackPowerRate {
      get { return magicAttackPowerRate_; }
      set {
        magicAttackPowerRate_ = value;
      }
    }

    /// <summary>Field number for the "FireAttackPowerRate" field.</summary>
    public const int FireAttackPowerRateFieldNumber = 25;
    private float fireAttackPowerRate_;
    public float FireAttackPowerRate {
      get { return fireAttackPowerRate_; }
      set {
        fireAttackPowerRate_ = value;
      }
    }

    /// <summary>Field number for the "ThunderAttackPowerRate" field.</summary>
    public const int ThunderAttackPowerRateFieldNumber = 26;
    private float thunderAttackPowerRate_;
    public float ThunderAttackPowerRate {
      get { return thunderAttackPowerRate_; }
      set {
        thunderAttackPowerRate_ = value;
      }
    }

    /// <summary>Field number for the "PhysicsAttackPower" field.</summary>
    public const int PhysicsAttackPowerFieldNumber = 27;
    private int physicsAttackPower_;
    public int PhysicsAttackPower {
      get { return physicsAttackPower_; }
      set {
        physicsAttackPower_ = value;
      }
    }

    /// <summary>Field number for the "MagicAttackPower" field.</summary>
    public const int MagicAttackPowerFieldNumber = 28;
    private int magicAttackPower_;
    public int MagicAttackPower {
      get { return magicAttackPower_; }
      set {
        magicAttackPower_ = value;
      }
    }

    /// <summary>Field number for the "FireAttackPower" field.</summary>
    public const int FireAttackPowerFieldNumber = 29;
    private int fireAttackPower_;
    public int FireAttackPower {
      get { return fireAttackPower_; }
      set {
        fireAttackPower_ = value;
      }
    }

    /// <summary>Field number for the "ThunderAttackPower" field.</summary>
    public const int ThunderAttackPowerFieldNumber = 30;
    private int thunderAttackPower_;
    public int ThunderAttackPower {
      get { return thunderAttackPower_; }
      set {
        thunderAttackPower_ = value;
      }
    }

    /// <summary>Field number for the "PhysicsDifferenceRate" field.</summary>
    public const int PhysicsDifferenceRateFieldNumber = 31;
    private float physicsDifferenceRate_;
    public float PhysicsDifferenceRate {
      get { return physicsDifferenceRate_; }
      set {
        physicsDifferenceRate_ = value;
      }
    }

    /// <summary>Field number for the "MagicDifferenceRate" field.</summary>
    public const int MagicDifferenceRateFieldNumber = 32;
    private float magicDifferenceRate_;
    public float MagicDifferenceRate {
      get { return magicDifferenceRate_; }
      set {
        magicDifferenceRate_ = value;
      }
    }

    /// <summary>Field number for the "FireDifferenceRate" field.</summary>
    public const int FireDifferenceRateFieldNumber = 33;
    private float fireDifferenceRate_;
    public float FireDifferenceRate {
      get { return fireDifferenceRate_; }
      set {
        fireDifferenceRate_ = value;
      }
    }

    /// <summary>Field number for the "ThunderDifferenceRate" field.</summary>
    public const int ThunderDifferenceRateFieldNumber = 34;
    private float thunderDifferenceRate_;
    public float ThunderDifferenceRate {
      get { return thunderDifferenceRate_; }
      set {
        thunderDifferenceRate_ = value;
      }
    }

    /// <summary>Field number for the "PhysicsDifference" field.</summary>
    public const int PhysicsDifferenceFieldNumber = 35;
    private int physicsDifference_;
    public int PhysicsDifference {
      get { return physicsDifference_; }
      set {
        physicsDifference_ = value;
      }
    }

    /// <summary>Field number for the "MagicDifference" field.</summary>
    public const int MagicDifferenceFieldNumber = 36;
    private int magicDifference_;
    public int MagicDifference {
      get { return magicDifference_; }
      set {
        magicDifference_ = value;
      }
    }

    /// <summary>Field number for the "FireDifference" field.</summary>
    public const int FireDifferenceFieldNumber = 37;
    private int fireDifference_;
    public int FireDifference {
      get { return fireDifference_; }
      set {
        fireDifference_ = value;
      }
    }

    /// <summary>Field number for the "ThunderDifference" field.</summary>
    public const int ThunderDifferenceFieldNumber = 38;
    private int thunderDifference_;
    public int ThunderDifference {
      get { return thunderDifference_; }
      set {
        thunderDifference_ = value;
      }
    }

    /// <summary>Field number for the "NoGuardDamageRate" field.</summary>
    public const int NoGuardDamageRateFieldNumber = 39;
    private float noGuardDamageRate_;
    public float NoGuardDamageRate {
      get { return noGuardDamageRate_; }
      set {
        noGuardDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "VitalSpotChangeRate" field.</summary>
    public const int VitalSpotChangeRateFieldNumber = 40;
    private float vitalSpotChangeRate_;
    public float VitalSpotChangeRate {
      get { return vitalSpotChangeRate_; }
      set {
        vitalSpotChangeRate_ = value;
      }
    }

    /// <summary>Field number for the "NormalSpotChangeRate" field.</summary>
    public const int NormalSpotChangeRateFieldNumber = 41;
    private float normalSpotChangeRate_;
    public float NormalSpotChangeRate {
      get { return normalSpotChangeRate_; }
      set {
        normalSpotChangeRate_ = value;
      }
    }

    /// <summary>Field number for the "MaxHpChangeRate" field.</summary>
    public const int MaxHpChangeRateFieldNumber = 42;
    private float maxHpChangeRate_;
    public float MaxHpChangeRate {
      get { return maxHpChangeRate_; }
      set {
        maxHpChangeRate_ = value;
      }
    }

    /// <summary>Field number for the "BehaviorId" field.</summary>
    public const int BehaviorIdFieldNumber = 43;
    private int behaviorId_;
    public int BehaviorId {
      get { return behaviorId_; }
      set {
        behaviorId_ = value;
      }
    }

    /// <summary>Field number for the "ChangeHpRate" field.</summary>
    public const int ChangeHpRateFieldNumber = 44;
    private float changeHpRate_;
    public float ChangeHpRate {
      get { return changeHpRate_; }
      set {
        changeHpRate_ = value;
      }
    }

    /// <summary>Field number for the "ChangeHpPoint" field.</summary>
    public const int ChangeHpPointFieldNumber = 45;
    private int changeHpPoint_;
    public int ChangeHpPoint {
      get { return changeHpPoint_; }
      set {
        changeHpPoint_ = value;
      }
    }

    /// <summary>Field number for the "ChangeMpRate" field.</summary>
    public const int ChangeMpRateFieldNumber = 46;
    private float changeMpRate_;
    public float ChangeMpRate {
      get { return changeMpRate_; }
      set {
        changeMpRate_ = value;
      }
    }

    /// <summary>Field number for the "ChangeMpPoint" field.</summary>
    public const int ChangeMpPointFieldNumber = 47;
    private int changeMpPoint_;
    public int ChangeMpPoint {
      get { return changeMpPoint_; }
      set {
        changeMpPoint_ = value;
      }
    }

    /// <summary>Field number for the "MpRecoverChangeSpeed" field.</summary>
    public const int MpRecoverChangeSpeedFieldNumber = 48;
    private int mpRecoverChangeSpeed_;
    public int MpRecoverChangeSpeed {
      get { return mpRecoverChangeSpeed_; }
      set {
        mpRecoverChangeSpeed_ = value;
      }
    }

    /// <summary>Field number for the "ChangeStaminaRate" field.</summary>
    public const int ChangeStaminaRateFieldNumber = 49;
    private float changeStaminaRate_;
    public float ChangeStaminaRate {
      get { return changeStaminaRate_; }
      set {
        changeStaminaRate_ = value;
      }
    }

    /// <summary>Field number for the "ChangeStaminaPoint" field.</summary>
    public const int ChangeStaminaPointFieldNumber = 50;
    private int changeStaminaPoint_;
    public int ChangeStaminaPoint {
      get { return changeStaminaPoint_; }
      set {
        changeStaminaPoint_ = value;
      }
    }

    /// <summary>Field number for the "StaminaRecoverChangeSpeed" field.</summary>
    public const int StaminaRecoverChangeSpeedFieldNumber = 51;
    private int staminaRecoverChangeSpeed_;
    public int StaminaRecoverChangeSpeed {
      get { return staminaRecoverChangeSpeed_; }
      set {
        staminaRecoverChangeSpeed_ = value;
      }
    }

    /// <summary>Field number for the "MagicEffectTimeChange" field.</summary>
    public const int MagicEffectTimeChangeFieldNumber = 52;
    private float magicEffectTimeChange_;
    public float MagicEffectTimeChange {
      get { return magicEffectTimeChange_; }
      set {
        magicEffectTimeChange_ = value;
      }
    }

    /// <summary>Field number for the "InsideDurability" field.</summary>
    public const int InsideDurabilityFieldNumber = 53;
    private int insideDurability_;
    public int InsideDurability {
      get { return insideDurability_; }
      set {
        insideDurability_ = value;
      }
    }

    /// <summary>Field number for the "MaxDurability" field.</summary>
    public const int MaxDurabilityFieldNumber = 54;
    private int maxDurability_;
    public int MaxDurability {
      get { return maxDurability_; }
      set {
        maxDurability_ = value;
      }
    }

    /// <summary>Field number for the "PoisonAttackPower" field.</summary>
    public const int PoisonAttackPowerFieldNumber = 55;
    private int poisonAttackPower_;
    public int PoisonAttackPower {
      get { return poisonAttackPower_; }
      set {
        poisonAttackPower_ = value;
      }
    }

    /// <summary>Field number for the "RegistIllness" field.</summary>
    public const int RegistIllnessFieldNumber = 56;
    private int registIllness_;
    public int RegistIllness {
      get { return registIllness_; }
      set {
        registIllness_ = value;
      }
    }

    /// <summary>Field number for the "BloodAttackPower" field.</summary>
    public const int BloodAttackPowerFieldNumber = 57;
    private int bloodAttackPower_;
    public int BloodAttackPower {
      get { return bloodAttackPower_; }
      set {
        bloodAttackPower_ = value;
      }
    }

    /// <summary>Field number for the "RegistCurse" field.</summary>
    public const int RegistCurseFieldNumber = 58;
    private int registCurse_;
    public int RegistCurse {
      get { return registCurse_; }
      set {
        registCurse_ = value;
      }
    }

    /// <summary>Field number for the "FallDamageRate" field.</summary>
    public const int FallDamageRateFieldNumber = 59;
    private float fallDamageRate_;
    public float FallDamageRate {
      get { return fallDamageRate_; }
      set {
        fallDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "SoulRate" field.</summary>
    public const int SoulRateFieldNumber = 60;
    private float soulRate_;
    public float SoulRate {
      get { return soulRate_; }
      set {
        soulRate_ = value;
      }
    }

    /// <summary>Field number for the "EquipWeightChangeRate" field.</summary>
    public const int EquipWeightChangeRateFieldNumber = 61;
    private float equipWeightChangeRate_;
    public float EquipWeightChangeRate {
      get { return equipWeightChangeRate_; }
      set {
        equipWeightChangeRate_ = value;
      }
    }

    /// <summary>Field number for the "AllItemWeightChangeRate" field.</summary>
    public const int AllItemWeightChangeRateFieldNumber = 62;
    private float allItemWeightChangeRate_;
    public float AllItemWeightChangeRate {
      get { return allItemWeightChangeRate_; }
      set {
        allItemWeightChangeRate_ = value;
      }
    }

    /// <summary>Field number for the "Soul" field.</summary>
    public const int SoulFieldNumber = 63;
    private int soul_;
    public int Soul {
      get { return soul_; }
      set {
        soul_ = value;
      }
    }

    /// <summary>Field number for the "AnimidOffset" field.</summary>
    public const int AnimidOffsetFieldNumber = 64;
    private int animidOffset_;
    public int AnimidOffset {
      get { return animidOffset_; }
      set {
        animidOffset_ = value;
      }
    }

    /// <summary>Field number for the "HaveSoulRate" field.</summary>
    public const int HaveSoulRateFieldNumber = 65;
    private float haveSoulRate_;
    public float HaveSoulRate {
      get { return haveSoulRate_; }
      set {
        haveSoulRate_ = value;
      }
    }

    /// <summary>Field number for the "TargetPriority" field.</summary>
    public const int TargetPriorityFieldNumber = 66;
    private float targetPriority_;
    public float TargetPriority {
      get { return targetPriority_; }
      set {
        targetPriority_ = value;
      }
    }

    /// <summary>Field number for the "SightSearchEnemyCut" field.</summary>
    public const int SightSearchEnemyCutFieldNumber = 67;
    private int sightSearchEnemyCut_;
    public int SightSearchEnemyCut {
      get { return sightSearchEnemyCut_; }
      set {
        sightSearchEnemyCut_ = value;
      }
    }

    /// <summary>Field number for the "HearingSearchEnemyCut" field.</summary>
    public const int HearingSearchEnemyCutFieldNumber = 68;
    private float hearingSearchEnemyCut_;
    public float HearingSearchEnemyCut {
      get { return hearingSearchEnemyCut_; }
      set {
        hearingSearchEnemyCut_ = value;
      }
    }

    /// <summary>Field number for the "GrabityRate" field.</summary>
    public const int GrabityRateFieldNumber = 69;
    private float grabityRate_;
    public float GrabityRate {
      get { return grabityRate_; }
      set {
        grabityRate_ = value;
      }
    }

    /// <summary>Field number for the "RegistPoisonChangeRate" field.</summary>
    public const int RegistPoisonChangeRateFieldNumber = 70;
    private float registPoisonChangeRate_;
    public float RegistPoisonChangeRate {
      get { return registPoisonChangeRate_; }
      set {
        registPoisonChangeRate_ = value;
      }
    }

    /// <summary>Field number for the "RegistToxicChangeRate" field.</summary>
    public const int RegistToxicChangeRateFieldNumber = 71;
    private float registToxicChangeRate_;
    public float RegistToxicChangeRate {
      get { return registToxicChangeRate_; }
      set {
        registToxicChangeRate_ = value;
      }
    }

    /// <summary>Field number for the "RegistBloodChangeRate" field.</summary>
    public const int RegistBloodChangeRateFieldNumber = 72;
    private float registBloodChangeRate_;
    public float RegistBloodChangeRate {
      get { return registBloodChangeRate_; }
      set {
        registBloodChangeRate_ = value;
      }
    }

    /// <summary>Field number for the "RegistCurseChangeRate" field.</summary>
    public const int RegistCurseChangeRateFieldNumber = 73;
    private float registCurseChangeRate_;
    public float RegistCurseChangeRate {
      get { return registCurseChangeRate_; }
      set {
        registCurseChangeRate_ = value;
      }
    }

    /// <summary>Field number for the "SoulStealRate" field.</summary>
    public const int SoulStealRateFieldNumber = 74;
    private float soulStealRate_;
    public float SoulStealRate {
      get { return soulStealRate_; }
      set {
        soulStealRate_ = value;
      }
    }

    /// <summary>Field number for the "LifeReductionRate" field.</summary>
    public const int LifeReductionRateFieldNumber = 75;
    private float lifeReductionRate_;
    public float LifeReductionRate {
      get { return lifeReductionRate_; }
      set {
        lifeReductionRate_ = value;
      }
    }

    /// <summary>Field number for the "HpRecoverRate" field.</summary>
    public const int HpRecoverRateFieldNumber = 76;
    private float hpRecoverRate_;
    public float HpRecoverRate {
      get { return hpRecoverRate_; }
      set {
        hpRecoverRate_ = value;
      }
    }

    /// <summary>Field number for the "ReplaceSpEffectId" field.</summary>
    public const int ReplaceSpEffectIdFieldNumber = 77;
    private int replaceSpEffectId_;
    public int ReplaceSpEffectId {
      get { return replaceSpEffectId_; }
      set {
        replaceSpEffectId_ = value;
      }
    }

    /// <summary>Field number for the "CycleOccurrenceSpEffectId" field.</summary>
    public const int CycleOccurrenceSpEffectIdFieldNumber = 78;
    private int cycleOccurrenceSpEffectId_;
    public int CycleOccurrenceSpEffectId {
      get { return cycleOccurrenceSpEffectId_; }
      set {
        cycleOccurrenceSpEffectId_ = value;
      }
    }

    /// <summary>Field number for the "AtkOccurrenceSpEffectId" field.</summary>
    public const int AtkOccurrenceSpEffectIdFieldNumber = 79;
    private int atkOccurrenceSpEffectId_;
    public int AtkOccurrenceSpEffectId {
      get { return atkOccurrenceSpEffectId_; }
      set {
        atkOccurrenceSpEffectId_ = value;
      }
    }

    /// <summary>Field number for the "GuardDefFlickPowerRate" field.</summary>
    public const int GuardDefFlickPowerRateFieldNumber = 80;
    private float guardDefFlickPowerRate_;
    public float GuardDefFlickPowerRate {
      get { return guardDefFlickPowerRate_; }
      set {
        guardDefFlickPowerRate_ = value;
      }
    }

    /// <summary>Field number for the "GuardStaminaCutRate" field.</summary>
    public const int GuardStaminaCutRateFieldNumber = 81;
    private float guardStaminaCutRate_;
    public float GuardStaminaCutRate {
      get { return guardStaminaCutRate_; }
      set {
        guardStaminaCutRate_ = value;
      }
    }

    /// <summary>Field number for the "RayCastPassedTime" field.</summary>
    public const int RayCastPassedTimeFieldNumber = 82;
    private int rayCastPassedTime_;
    public int RayCastPassedTime {
      get { return rayCastPassedTime_; }
      set {
        rayCastPassedTime_ = value;
      }
    }

    /// <summary>Field number for the "ChangeSuperArmorPoint" field.</summary>
    public const int ChangeSuperArmorPointFieldNumber = 83;
    private int changeSuperArmorPoint_;
    public int ChangeSuperArmorPoint {
      get { return changeSuperArmorPoint_; }
      set {
        changeSuperArmorPoint_ = value;
      }
    }

    /// <summary>Field number for the "BowDistRate" field.</summary>
    public const int BowDistRateFieldNumber = 84;
    private int bowDistRate_;
    public int BowDistRate {
      get { return bowDistRate_; }
      set {
        bowDistRate_ = value;
      }
    }

    /// <summary>Field number for the "SpCategory" field.</summary>
    public const int SpCategoryFieldNumber = 85;
    private uint spCategory_;
    public uint SpCategory {
      get { return spCategory_; }
      set {
        spCategory_ = value;
      }
    }

    /// <summary>Field number for the "CategoryPriority" field.</summary>
    public const int CategoryPriorityFieldNumber = 86;
    private uint categoryPriority_;
    public uint CategoryPriority {
      get { return categoryPriority_; }
      set {
        categoryPriority_ = value;
      }
    }

    /// <summary>Field number for the "SaveCategory" field.</summary>
    public const int SaveCategoryFieldNumber = 87;
    private int saveCategory_;
    public int SaveCategory {
      get { return saveCategory_; }
      set {
        saveCategory_ = value;
      }
    }

    /// <summary>Field number for the "ChangeMagicSlot" field.</summary>
    public const int ChangeMagicSlotFieldNumber = 88;
    private uint changeMagicSlot_;
    public uint ChangeMagicSlot {
      get { return changeMagicSlot_; }
      set {
        changeMagicSlot_ = value;
      }
    }

    /// <summary>Field number for the "ChangeMiracleSlot" field.</summary>
    public const int ChangeMiracleSlotFieldNumber = 89;
    private uint changeMiracleSlot_;
    public uint ChangeMiracleSlot {
      get { return changeMiracleSlot_; }
      set {
        changeMiracleSlot_ = value;
      }
    }

    /// <summary>Field number for the "HeroPointDamage" field.</summary>
    public const int HeroPointDamageFieldNumber = 90;
    private int heroPointDamage_;
    public int HeroPointDamage {
      get { return heroPointDamage_; }
      set {
        heroPointDamage_ = value;
      }
    }

    /// <summary>Field number for the "DefFlickPower" field.</summary>
    public const int DefFlickPowerFieldNumber = 91;
    private uint defFlickPower_;
    public uint DefFlickPower {
      get { return defFlickPower_; }
      set {
        defFlickPower_ = value;
      }
    }

    /// <summary>Field number for the "FlickDamageCutRate" field.</summary>
    public const int FlickDamageCutRateFieldNumber = 92;
    private uint flickDamageCutRate_;
    public uint FlickDamageCutRate {
      get { return flickDamageCutRate_; }
      set {
        flickDamageCutRate_ = value;
      }
    }

    /// <summary>Field number for the "BloodDamageRate" field.</summary>
    public const int BloodDamageRateFieldNumber = 93;
    private uint bloodDamageRate_;
    public uint BloodDamageRate {
      get { return bloodDamageRate_; }
      set {
        bloodDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "DmgLv_None" field.</summary>
    public const int DmgLvNoneFieldNumber = 94;
    private int dmgLvNone_;
    public int DmgLvNone {
      get { return dmgLvNone_; }
      set {
        dmgLvNone_ = value;
      }
    }

    /// <summary>Field number for the "DmgLv_S" field.</summary>
    public const int DmgLvSFieldNumber = 95;
    private int dmgLvS_;
    public int DmgLvS {
      get { return dmgLvS_; }
      set {
        dmgLvS_ = value;
      }
    }

    /// <summary>Field number for the "DmgLv_M" field.</summary>
    public const int DmgLvMFieldNumber = 96;
    private int dmgLvM_;
    public int DmgLvM {
      get { return dmgLvM_; }
      set {
        dmgLvM_ = value;
      }
    }

    /// <summary>Field number for the "DmgLv_L" field.</summary>
    public const int DmgLvLFieldNumber = 97;
    private int dmgLvL_;
    public int DmgLvL {
      get { return dmgLvL_; }
      set {
        dmgLvL_ = value;
      }
    }

    /// <summary>Field number for the "DmgLv_BlowM" field.</summary>
    public const int DmgLvBlowMFieldNumber = 98;
    private int dmgLvBlowM_;
    public int DmgLvBlowM {
      get { return dmgLvBlowM_; }
      set {
        dmgLvBlowM_ = value;
      }
    }

    /// <summary>Field number for the "DmgLv_Push" field.</summary>
    public const int DmgLvPushFieldNumber = 99;
    private int dmgLvPush_;
    public int DmgLvPush {
      get { return dmgLvPush_; }
      set {
        dmgLvPush_ = value;
      }
    }

    /// <summary>Field number for the "DmgLv_Strike" field.</summary>
    public const int DmgLvStrikeFieldNumber = 100;
    private int dmgLvStrike_;
    public int DmgLvStrike {
      get { return dmgLvStrike_; }
      set {
        dmgLvStrike_ = value;
      }
    }

    /// <summary>Field number for the "DmgLv_BlowS" field.</summary>
    public const int DmgLvBlowSFieldNumber = 101;
    private int dmgLvBlowS_;
    public int DmgLvBlowS {
      get { return dmgLvBlowS_; }
      set {
        dmgLvBlowS_ = value;
      }
    }

    /// <summary>Field number for the "DmgLv_Min" field.</summary>
    public const int DmgLvMinFieldNumber = 102;
    private int dmgLvMin_;
    public int DmgLvMin {
      get { return dmgLvMin_; }
      set {
        dmgLvMin_ = value;
      }
    }

    /// <summary>Field number for the "DmgLv_Uppercut" field.</summary>
    public const int DmgLvUppercutFieldNumber = 103;
    private int dmgLvUppercut_;
    public int DmgLvUppercut {
      get { return dmgLvUppercut_; }
      set {
        dmgLvUppercut_ = value;
      }
    }

    /// <summary>Field number for the "DmgLv_BlowLL" field.</summary>
    public const int DmgLvBlowLLFieldNumber = 104;
    private int dmgLvBlowLL_;
    public int DmgLvBlowLL {
      get { return dmgLvBlowLL_; }
      set {
        dmgLvBlowLL_ = value;
      }
    }

    /// <summary>Field number for the "DmgLv_Breath" field.</summary>
    public const int DmgLvBreathFieldNumber = 105;
    private int dmgLvBreath_;
    public int DmgLvBreath {
      get { return dmgLvBreath_; }
      set {
        dmgLvBreath_ = value;
      }
    }

    /// <summary>Field number for the "AtkAttribute" field.</summary>
    public const int AtkAttributeFieldNumber = 106;
    private uint atkAttribute_;
    public uint AtkAttribute {
      get { return atkAttribute_; }
      set {
        atkAttribute_ = value;
      }
    }

    /// <summary>Field number for the "SpAttribute" field.</summary>
    public const int SpAttributeFieldNumber = 107;
    private uint spAttribute_;
    public uint SpAttribute {
      get { return spAttribute_; }
      set {
        spAttribute_ = value;
      }
    }

    /// <summary>Field number for the "StateInfo" field.</summary>
    public const int StateInfoFieldNumber = 108;
    private uint stateInfo_;
    public uint StateInfo {
      get { return stateInfo_; }
      set {
        stateInfo_ = value;
      }
    }

    /// <summary>Field number for the "WepParamChange" field.</summary>
    public const int WepParamChangeFieldNumber = 109;
    private uint wepParamChange_;
    public uint WepParamChange {
      get { return wepParamChange_; }
      set {
        wepParamChange_ = value;
      }
    }

    /// <summary>Field number for the "MoveType" field.</summary>
    public const int MoveTypeFieldNumber = 110;
    private uint moveType_;
    public uint MoveType {
      get { return moveType_; }
      set {
        moveType_ = value;
      }
    }

    /// <summary>Field number for the "LifeReductionType" field.</summary>
    public const int LifeReductionTypeFieldNumber = 111;
    private uint lifeReductionType_;
    public uint LifeReductionType {
      get { return lifeReductionType_; }
      set {
        lifeReductionType_ = value;
      }
    }

    /// <summary>Field number for the "ThrowCondition" field.</summary>
    public const int ThrowConditionFieldNumber = 112;
    private uint throwCondition_;
    public uint ThrowCondition {
      get { return throwCondition_; }
      set {
        throwCondition_ = value;
      }
    }

    /// <summary>Field number for the "AddBehaviorJudgeId_condition" field.</summary>
    public const int AddBehaviorJudgeIdConditionFieldNumber = 113;
    private int addBehaviorJudgeIdCondition_;
    public int AddBehaviorJudgeIdCondition {
      get { return addBehaviorJudgeIdCondition_; }
      set {
        addBehaviorJudgeIdCondition_ = value;
      }
    }

    /// <summary>Field number for the "AddBehaviorJudgeId_add" field.</summary>
    public const int AddBehaviorJudgeIdAddFieldNumber = 114;
    private uint addBehaviorJudgeIdAdd_;
    public uint AddBehaviorJudgeIdAdd {
      get { return addBehaviorJudgeIdAdd_; }
      set {
        addBehaviorJudgeIdAdd_ = value;
      }
    }

    /// <summary>Field number for the "EffectTargetSelf" field.</summary>
    public const int EffectTargetSelfFieldNumber = 115;
    private bool effectTargetSelf_;
    public bool EffectTargetSelf {
      get { return effectTargetSelf_; }
      set {
        effectTargetSelf_ = value;
      }
    }

    /// <summary>Field number for the "EffectTargetFriend" field.</summary>
    public const int EffectTargetFriendFieldNumber = 116;
    private bool effectTargetFriend_;
    public bool EffectTargetFriend {
      get { return effectTargetFriend_; }
      set {
        effectTargetFriend_ = value;
      }
    }

    /// <summary>Field number for the "EffectTargetEnemy" field.</summary>
    public const int EffectTargetEnemyFieldNumber = 117;
    private bool effectTargetEnemy_;
    public bool EffectTargetEnemy {
      get { return effectTargetEnemy_; }
      set {
        effectTargetEnemy_ = value;
      }
    }

    /// <summary>Field number for the "EffectTargetPlayer" field.</summary>
    public const int EffectTargetPlayerFieldNumber = 118;
    private bool effectTargetPlayer_;
    public bool EffectTargetPlayer {
      get { return effectTargetPlayer_; }
      set {
        effectTargetPlayer_ = value;
      }
    }

    /// <summary>Field number for the "EffectTargetAI" field.</summary>
    public const int EffectTargetAIFieldNumber = 119;
    private bool effectTargetAI_;
    public bool EffectTargetAI {
      get { return effectTargetAI_; }
      set {
        effectTargetAI_ = value;
      }
    }

    /// <summary>Field number for the "EffectTargetLive" field.</summary>
    public const int EffectTargetLiveFieldNumber = 120;
    private bool effectTargetLive_;
    public bool EffectTargetLive {
      get { return effectTargetLive_; }
      set {
        effectTargetLive_ = value;
      }
    }

    /// <summary>Field number for the "EffectTargetGhost" field.</summary>
    public const int EffectTargetGhostFieldNumber = 121;
    private bool effectTargetGhost_;
    public bool EffectTargetGhost {
      get { return effectTargetGhost_; }
      set {
        effectTargetGhost_ = value;
      }
    }

    /// <summary>Field number for the "EffectTargetWhiteGhost" field.</summary>
    public const int EffectTargetWhiteGhostFieldNumber = 122;
    private bool effectTargetWhiteGhost_;
    public bool EffectTargetWhiteGhost {
      get { return effectTargetWhiteGhost_; }
      set {
        effectTargetWhiteGhost_ = value;
      }
    }

    /// <summary>Field number for the "StrangeEnum" field.</summary>
    public const int StrangeEnumFieldNumber = 123;
    private bool strangeEnum_;
    public bool StrangeEnum {
      get { return strangeEnum_; }
      set {
        strangeEnum_ = value;
      }
    }

    /// <summary>Field number for the "FrostAttackPower" field.</summary>
    public const int FrostAttackPowerFieldNumber = 124;
    private int frostAttackPower_;
    public int FrostAttackPower {
      get { return frostAttackPower_; }
      set {
        frostAttackPower_ = value;
      }
    }

    /// <summary>Field number for the "DarkDifferenceRate" field.</summary>
    public const int DarkDifferenceRateFieldNumber = 125;
    private float darkDifferenceRate_;
    public float DarkDifferenceRate {
      get { return darkDifferenceRate_; }
      set {
        darkDifferenceRate_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SpEffectParam);
    }

    public bool Equals(SpEffectParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Index != other.Index) return false;
      if (Offset != other.Offset) return false;
      if (IconId != other.IconId) return false;
      if (ConditionHp != other.ConditionHp) return false;
      if (EffectEndurance != other.EffectEndurance) return false;
      if (MotionInterval != other.MotionInterval) return false;
      if (MaxHpRate != other.MaxHpRate) return false;
      if (MaxMpRate != other.MaxMpRate) return false;
      if (MaxStaminaRate != other.MaxStaminaRate) return false;
      if (SlashDamageCutRate != other.SlashDamageCutRate) return false;
      if (BlowDamageCutRate != other.BlowDamageCutRate) return false;
      if (ThrustDamageCutRate != other.ThrustDamageCutRate) return false;
      if (NeutralDamageCutRate != other.NeutralDamageCutRate) return false;
      if (MagicDamageCutRate != other.MagicDamageCutRate) return false;
      if (FireDamageCutRate != other.FireDamageCutRate) return false;
      if (ThunderDamageCutRate != other.ThunderDamageCutRate) return false;
      if (PhysicsAttackRate != other.PhysicsAttackRate) return false;
      if (MagicAttackRate != other.MagicAttackRate) return false;
      if (FireAttackRate != other.FireAttackRate) return false;
      if (ThunderAttackRate != other.ThunderAttackRate) return false;
      if (PhysicsAttackPowerRate != other.PhysicsAttackPowerRate) return false;
      if (MagicAttackPowerRate != other.MagicAttackPowerRate) return false;
      if (FireAttackPowerRate != other.FireAttackPowerRate) return false;
      if (ThunderAttackPowerRate != other.ThunderAttackPowerRate) return false;
      if (PhysicsAttackPower != other.PhysicsAttackPower) return false;
      if (MagicAttackPower != other.MagicAttackPower) return false;
      if (FireAttackPower != other.FireAttackPower) return false;
      if (ThunderAttackPower != other.ThunderAttackPower) return false;
      if (PhysicsDifferenceRate != other.PhysicsDifferenceRate) return false;
      if (MagicDifferenceRate != other.MagicDifferenceRate) return false;
      if (FireDifferenceRate != other.FireDifferenceRate) return false;
      if (ThunderDifferenceRate != other.ThunderDifferenceRate) return false;
      if (PhysicsDifference != other.PhysicsDifference) return false;
      if (MagicDifference != other.MagicDifference) return false;
      if (FireDifference != other.FireDifference) return false;
      if (ThunderDifference != other.ThunderDifference) return false;
      if (NoGuardDamageRate != other.NoGuardDamageRate) return false;
      if (VitalSpotChangeRate != other.VitalSpotChangeRate) return false;
      if (NormalSpotChangeRate != other.NormalSpotChangeRate) return false;
      if (MaxHpChangeRate != other.MaxHpChangeRate) return false;
      if (BehaviorId != other.BehaviorId) return false;
      if (ChangeHpRate != other.ChangeHpRate) return false;
      if (ChangeHpPoint != other.ChangeHpPoint) return false;
      if (ChangeMpRate != other.ChangeMpRate) return false;
      if (ChangeMpPoint != other.ChangeMpPoint) return false;
      if (MpRecoverChangeSpeed != other.MpRecoverChangeSpeed) return false;
      if (ChangeStaminaRate != other.ChangeStaminaRate) return false;
      if (ChangeStaminaPoint != other.ChangeStaminaPoint) return false;
      if (StaminaRecoverChangeSpeed != other.StaminaRecoverChangeSpeed) return false;
      if (MagicEffectTimeChange != other.MagicEffectTimeChange) return false;
      if (InsideDurability != other.InsideDurability) return false;
      if (MaxDurability != other.MaxDurability) return false;
      if (PoisonAttackPower != other.PoisonAttackPower) return false;
      if (RegistIllness != other.RegistIllness) return false;
      if (BloodAttackPower != other.BloodAttackPower) return false;
      if (RegistCurse != other.RegistCurse) return false;
      if (FallDamageRate != other.FallDamageRate) return false;
      if (SoulRate != other.SoulRate) return false;
      if (EquipWeightChangeRate != other.EquipWeightChangeRate) return false;
      if (AllItemWeightChangeRate != other.AllItemWeightChangeRate) return false;
      if (Soul != other.Soul) return false;
      if (AnimidOffset != other.AnimidOffset) return false;
      if (HaveSoulRate != other.HaveSoulRate) return false;
      if (TargetPriority != other.TargetPriority) return false;
      if (SightSearchEnemyCut != other.SightSearchEnemyCut) return false;
      if (HearingSearchEnemyCut != other.HearingSearchEnemyCut) return false;
      if (GrabityRate != other.GrabityRate) return false;
      if (RegistPoisonChangeRate != other.RegistPoisonChangeRate) return false;
      if (RegistToxicChangeRate != other.RegistToxicChangeRate) return false;
      if (RegistBloodChangeRate != other.RegistBloodChangeRate) return false;
      if (RegistCurseChangeRate != other.RegistCurseChangeRate) return false;
      if (SoulStealRate != other.SoulStealRate) return false;
      if (LifeReductionRate != other.LifeReductionRate) return false;
      if (HpRecoverRate != other.HpRecoverRate) return false;
      if (ReplaceSpEffectId != other.ReplaceSpEffectId) return false;
      if (CycleOccurrenceSpEffectId != other.CycleOccurrenceSpEffectId) return false;
      if (AtkOccurrenceSpEffectId != other.AtkOccurrenceSpEffectId) return false;
      if (GuardDefFlickPowerRate != other.GuardDefFlickPowerRate) return false;
      if (GuardStaminaCutRate != other.GuardStaminaCutRate) return false;
      if (RayCastPassedTime != other.RayCastPassedTime) return false;
      if (ChangeSuperArmorPoint != other.ChangeSuperArmorPoint) return false;
      if (BowDistRate != other.BowDistRate) return false;
      if (SpCategory != other.SpCategory) return false;
      if (CategoryPriority != other.CategoryPriority) return false;
      if (SaveCategory != other.SaveCategory) return false;
      if (ChangeMagicSlot != other.ChangeMagicSlot) return false;
      if (ChangeMiracleSlot != other.ChangeMiracleSlot) return false;
      if (HeroPointDamage != other.HeroPointDamage) return false;
      if (DefFlickPower != other.DefFlickPower) return false;
      if (FlickDamageCutRate != other.FlickDamageCutRate) return false;
      if (BloodDamageRate != other.BloodDamageRate) return false;
      if (DmgLvNone != other.DmgLvNone) return false;
      if (DmgLvS != other.DmgLvS) return false;
      if (DmgLvM != other.DmgLvM) return false;
      if (DmgLvL != other.DmgLvL) return false;
      if (DmgLvBlowM != other.DmgLvBlowM) return false;
      if (DmgLvPush != other.DmgLvPush) return false;
      if (DmgLvStrike != other.DmgLvStrike) return false;
      if (DmgLvBlowS != other.DmgLvBlowS) return false;
      if (DmgLvMin != other.DmgLvMin) return false;
      if (DmgLvUppercut != other.DmgLvUppercut) return false;
      if (DmgLvBlowLL != other.DmgLvBlowLL) return false;
      if (DmgLvBreath != other.DmgLvBreath) return false;
      if (AtkAttribute != other.AtkAttribute) return false;
      if (SpAttribute != other.SpAttribute) return false;
      if (StateInfo != other.StateInfo) return false;
      if (WepParamChange != other.WepParamChange) return false;
      if (MoveType != other.MoveType) return false;
      if (LifeReductionType != other.LifeReductionType) return false;
      if (ThrowCondition != other.ThrowCondition) return false;
      if (AddBehaviorJudgeIdCondition != other.AddBehaviorJudgeIdCondition) return false;
      if (AddBehaviorJudgeIdAdd != other.AddBehaviorJudgeIdAdd) return false;
      if (EffectTargetSelf != other.EffectTargetSelf) return false;
      if (EffectTargetFriend != other.EffectTargetFriend) return false;
      if (EffectTargetEnemy != other.EffectTargetEnemy) return false;
      if (EffectTargetPlayer != other.EffectTargetPlayer) return false;
      if (EffectTargetAI != other.EffectTargetAI) return false;
      if (EffectTargetLive != other.EffectTargetLive) return false;
      if (EffectTargetGhost != other.EffectTargetGhost) return false;
      if (EffectTargetWhiteGhost != other.EffectTargetWhiteGhost) return false;
      if (StrangeEnum != other.StrangeEnum) return false;
      if (FrostAttackPower != other.FrostAttackPower) return false;
      if (DarkDifferenceRate != other.DarkDifferenceRate) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (IconId != 0) hash ^= IconId.GetHashCode();
      if (ConditionHp != 0F) hash ^= ConditionHp.GetHashCode();
      if (EffectEndurance != 0F) hash ^= EffectEndurance.GetHashCode();
      if (MotionInterval != 0) hash ^= MotionInterval.GetHashCode();
      if (MaxHpRate != 0F) hash ^= MaxHpRate.GetHashCode();
      if (MaxMpRate != 0F) hash ^= MaxMpRate.GetHashCode();
      if (MaxStaminaRate != 0F) hash ^= MaxStaminaRate.GetHashCode();
      if (SlashDamageCutRate != 0F) hash ^= SlashDamageCutRate.GetHashCode();
      if (BlowDamageCutRate != 0F) hash ^= BlowDamageCutRate.GetHashCode();
      if (ThrustDamageCutRate != 0F) hash ^= ThrustDamageCutRate.GetHashCode();
      if (NeutralDamageCutRate != 0F) hash ^= NeutralDamageCutRate.GetHashCode();
      if (MagicDamageCutRate != 0F) hash ^= MagicDamageCutRate.GetHashCode();
      if (FireDamageCutRate != 0F) hash ^= FireDamageCutRate.GetHashCode();
      if (ThunderDamageCutRate != 0F) hash ^= ThunderDamageCutRate.GetHashCode();
      if (PhysicsAttackRate != 0F) hash ^= PhysicsAttackRate.GetHashCode();
      if (MagicAttackRate != 0F) hash ^= MagicAttackRate.GetHashCode();
      if (FireAttackRate != 0F) hash ^= FireAttackRate.GetHashCode();
      if (ThunderAttackRate != 0F) hash ^= ThunderAttackRate.GetHashCode();
      if (PhysicsAttackPowerRate != 0F) hash ^= PhysicsAttackPowerRate.GetHashCode();
      if (MagicAttackPowerRate != 0F) hash ^= MagicAttackPowerRate.GetHashCode();
      if (FireAttackPowerRate != 0F) hash ^= FireAttackPowerRate.GetHashCode();
      if (ThunderAttackPowerRate != 0F) hash ^= ThunderAttackPowerRate.GetHashCode();
      if (PhysicsAttackPower != 0) hash ^= PhysicsAttackPower.GetHashCode();
      if (MagicAttackPower != 0) hash ^= MagicAttackPower.GetHashCode();
      if (FireAttackPower != 0) hash ^= FireAttackPower.GetHashCode();
      if (ThunderAttackPower != 0) hash ^= ThunderAttackPower.GetHashCode();
      if (PhysicsDifferenceRate != 0F) hash ^= PhysicsDifferenceRate.GetHashCode();
      if (MagicDifferenceRate != 0F) hash ^= MagicDifferenceRate.GetHashCode();
      if (FireDifferenceRate != 0F) hash ^= FireDifferenceRate.GetHashCode();
      if (ThunderDifferenceRate != 0F) hash ^= ThunderDifferenceRate.GetHashCode();
      if (PhysicsDifference != 0) hash ^= PhysicsDifference.GetHashCode();
      if (MagicDifference != 0) hash ^= MagicDifference.GetHashCode();
      if (FireDifference != 0) hash ^= FireDifference.GetHashCode();
      if (ThunderDifference != 0) hash ^= ThunderDifference.GetHashCode();
      if (NoGuardDamageRate != 0F) hash ^= NoGuardDamageRate.GetHashCode();
      if (VitalSpotChangeRate != 0F) hash ^= VitalSpotChangeRate.GetHashCode();
      if (NormalSpotChangeRate != 0F) hash ^= NormalSpotChangeRate.GetHashCode();
      if (MaxHpChangeRate != 0F) hash ^= MaxHpChangeRate.GetHashCode();
      if (BehaviorId != 0) hash ^= BehaviorId.GetHashCode();
      if (ChangeHpRate != 0F) hash ^= ChangeHpRate.GetHashCode();
      if (ChangeHpPoint != 0) hash ^= ChangeHpPoint.GetHashCode();
      if (ChangeMpRate != 0F) hash ^= ChangeMpRate.GetHashCode();
      if (ChangeMpPoint != 0) hash ^= ChangeMpPoint.GetHashCode();
      if (MpRecoverChangeSpeed != 0) hash ^= MpRecoverChangeSpeed.GetHashCode();
      if (ChangeStaminaRate != 0F) hash ^= ChangeStaminaRate.GetHashCode();
      if (ChangeStaminaPoint != 0) hash ^= ChangeStaminaPoint.GetHashCode();
      if (StaminaRecoverChangeSpeed != 0) hash ^= StaminaRecoverChangeSpeed.GetHashCode();
      if (MagicEffectTimeChange != 0F) hash ^= MagicEffectTimeChange.GetHashCode();
      if (InsideDurability != 0) hash ^= InsideDurability.GetHashCode();
      if (MaxDurability != 0) hash ^= MaxDurability.GetHashCode();
      if (PoisonAttackPower != 0) hash ^= PoisonAttackPower.GetHashCode();
      if (RegistIllness != 0) hash ^= RegistIllness.GetHashCode();
      if (BloodAttackPower != 0) hash ^= BloodAttackPower.GetHashCode();
      if (RegistCurse != 0) hash ^= RegistCurse.GetHashCode();
      if (FallDamageRate != 0F) hash ^= FallDamageRate.GetHashCode();
      if (SoulRate != 0F) hash ^= SoulRate.GetHashCode();
      if (EquipWeightChangeRate != 0F) hash ^= EquipWeightChangeRate.GetHashCode();
      if (AllItemWeightChangeRate != 0F) hash ^= AllItemWeightChangeRate.GetHashCode();
      if (Soul != 0) hash ^= Soul.GetHashCode();
      if (AnimidOffset != 0) hash ^= AnimidOffset.GetHashCode();
      if (HaveSoulRate != 0F) hash ^= HaveSoulRate.GetHashCode();
      if (TargetPriority != 0F) hash ^= TargetPriority.GetHashCode();
      if (SightSearchEnemyCut != 0) hash ^= SightSearchEnemyCut.GetHashCode();
      if (HearingSearchEnemyCut != 0F) hash ^= HearingSearchEnemyCut.GetHashCode();
      if (GrabityRate != 0F) hash ^= GrabityRate.GetHashCode();
      if (RegistPoisonChangeRate != 0F) hash ^= RegistPoisonChangeRate.GetHashCode();
      if (RegistToxicChangeRate != 0F) hash ^= RegistToxicChangeRate.GetHashCode();
      if (RegistBloodChangeRate != 0F) hash ^= RegistBloodChangeRate.GetHashCode();
      if (RegistCurseChangeRate != 0F) hash ^= RegistCurseChangeRate.GetHashCode();
      if (SoulStealRate != 0F) hash ^= SoulStealRate.GetHashCode();
      if (LifeReductionRate != 0F) hash ^= LifeReductionRate.GetHashCode();
      if (HpRecoverRate != 0F) hash ^= HpRecoverRate.GetHashCode();
      if (ReplaceSpEffectId != 0) hash ^= ReplaceSpEffectId.GetHashCode();
      if (CycleOccurrenceSpEffectId != 0) hash ^= CycleOccurrenceSpEffectId.GetHashCode();
      if (AtkOccurrenceSpEffectId != 0) hash ^= AtkOccurrenceSpEffectId.GetHashCode();
      if (GuardDefFlickPowerRate != 0F) hash ^= GuardDefFlickPowerRate.GetHashCode();
      if (GuardStaminaCutRate != 0F) hash ^= GuardStaminaCutRate.GetHashCode();
      if (RayCastPassedTime != 0) hash ^= RayCastPassedTime.GetHashCode();
      if (ChangeSuperArmorPoint != 0) hash ^= ChangeSuperArmorPoint.GetHashCode();
      if (BowDistRate != 0) hash ^= BowDistRate.GetHashCode();
      if (SpCategory != 0) hash ^= SpCategory.GetHashCode();
      if (CategoryPriority != 0) hash ^= CategoryPriority.GetHashCode();
      if (SaveCategory != 0) hash ^= SaveCategory.GetHashCode();
      if (ChangeMagicSlot != 0) hash ^= ChangeMagicSlot.GetHashCode();
      if (ChangeMiracleSlot != 0) hash ^= ChangeMiracleSlot.GetHashCode();
      if (HeroPointDamage != 0) hash ^= HeroPointDamage.GetHashCode();
      if (DefFlickPower != 0) hash ^= DefFlickPower.GetHashCode();
      if (FlickDamageCutRate != 0) hash ^= FlickDamageCutRate.GetHashCode();
      if (BloodDamageRate != 0) hash ^= BloodDamageRate.GetHashCode();
      if (DmgLvNone != 0) hash ^= DmgLvNone.GetHashCode();
      if (DmgLvS != 0) hash ^= DmgLvS.GetHashCode();
      if (DmgLvM != 0) hash ^= DmgLvM.GetHashCode();
      if (DmgLvL != 0) hash ^= DmgLvL.GetHashCode();
      if (DmgLvBlowM != 0) hash ^= DmgLvBlowM.GetHashCode();
      if (DmgLvPush != 0) hash ^= DmgLvPush.GetHashCode();
      if (DmgLvStrike != 0) hash ^= DmgLvStrike.GetHashCode();
      if (DmgLvBlowS != 0) hash ^= DmgLvBlowS.GetHashCode();
      if (DmgLvMin != 0) hash ^= DmgLvMin.GetHashCode();
      if (DmgLvUppercut != 0) hash ^= DmgLvUppercut.GetHashCode();
      if (DmgLvBlowLL != 0) hash ^= DmgLvBlowLL.GetHashCode();
      if (DmgLvBreath != 0) hash ^= DmgLvBreath.GetHashCode();
      if (AtkAttribute != 0) hash ^= AtkAttribute.GetHashCode();
      if (SpAttribute != 0) hash ^= SpAttribute.GetHashCode();
      if (StateInfo != 0) hash ^= StateInfo.GetHashCode();
      if (WepParamChange != 0) hash ^= WepParamChange.GetHashCode();
      if (MoveType != 0) hash ^= MoveType.GetHashCode();
      if (LifeReductionType != 0) hash ^= LifeReductionType.GetHashCode();
      if (ThrowCondition != 0) hash ^= ThrowCondition.GetHashCode();
      if (AddBehaviorJudgeIdCondition != 0) hash ^= AddBehaviorJudgeIdCondition.GetHashCode();
      if (AddBehaviorJudgeIdAdd != 0) hash ^= AddBehaviorJudgeIdAdd.GetHashCode();
      if (EffectTargetSelf != false) hash ^= EffectTargetSelf.GetHashCode();
      if (EffectTargetFriend != false) hash ^= EffectTargetFriend.GetHashCode();
      if (EffectTargetEnemy != false) hash ^= EffectTargetEnemy.GetHashCode();
      if (EffectTargetPlayer != false) hash ^= EffectTargetPlayer.GetHashCode();
      if (EffectTargetAI != false) hash ^= EffectTargetAI.GetHashCode();
      if (EffectTargetLive != false) hash ^= EffectTargetLive.GetHashCode();
      if (EffectTargetGhost != false) hash ^= EffectTargetGhost.GetHashCode();
      if (EffectTargetWhiteGhost != false) hash ^= EffectTargetWhiteGhost.GetHashCode();
      if (StrangeEnum != false) hash ^= StrangeEnum.GetHashCode();
      if (FrostAttackPower != 0) hash ^= FrostAttackPower.GetHashCode();
      if (DarkDifferenceRate != 0F) hash ^= DarkDifferenceRate.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Index);
      }
      if (Offset != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Offset);
      }
      if (IconId != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(IconId);
      }
      if (ConditionHp != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(ConditionHp);
      }
      if (EffectEndurance != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(EffectEndurance);
      }
      if (MotionInterval != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(MotionInterval);
      }
      if (MaxHpRate != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(MaxHpRate);
      }
      if (MaxMpRate != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(MaxMpRate);
      }
      if (MaxStaminaRate != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(MaxStaminaRate);
      }
      if (SlashDamageCutRate != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(SlashDamageCutRate);
      }
      if (BlowDamageCutRate != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(BlowDamageCutRate);
      }
      if (ThrustDamageCutRate != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(ThrustDamageCutRate);
      }
      if (NeutralDamageCutRate != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(NeutralDamageCutRate);
      }
      if (MagicDamageCutRate != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(MagicDamageCutRate);
      }
      if (FireDamageCutRate != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(FireDamageCutRate);
      }
      if (ThunderDamageCutRate != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(ThunderDamageCutRate);
      }
      if (PhysicsAttackRate != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(PhysicsAttackRate);
      }
      if (MagicAttackRate != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(MagicAttackRate);
      }
      if (FireAttackRate != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(FireAttackRate);
      }
      if (ThunderAttackRate != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(ThunderAttackRate);
      }
      if (PhysicsAttackPowerRate != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(PhysicsAttackPowerRate);
      }
      if (MagicAttackPowerRate != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(MagicAttackPowerRate);
      }
      if (FireAttackPowerRate != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(FireAttackPowerRate);
      }
      if (ThunderAttackPowerRate != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(ThunderAttackPowerRate);
      }
      if (PhysicsAttackPower != 0) {
        output.WriteRawTag(216, 1);
        output.WriteSInt32(PhysicsAttackPower);
      }
      if (MagicAttackPower != 0) {
        output.WriteRawTag(224, 1);
        output.WriteSInt32(MagicAttackPower);
      }
      if (FireAttackPower != 0) {
        output.WriteRawTag(232, 1);
        output.WriteSInt32(FireAttackPower);
      }
      if (ThunderAttackPower != 0) {
        output.WriteRawTag(240, 1);
        output.WriteSInt32(ThunderAttackPower);
      }
      if (PhysicsDifferenceRate != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(PhysicsDifferenceRate);
      }
      if (MagicDifferenceRate != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(MagicDifferenceRate);
      }
      if (FireDifferenceRate != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(FireDifferenceRate);
      }
      if (ThunderDifferenceRate != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(ThunderDifferenceRate);
      }
      if (PhysicsDifference != 0) {
        output.WriteRawTag(152, 2);
        output.WriteSInt32(PhysicsDifference);
      }
      if (MagicDifference != 0) {
        output.WriteRawTag(160, 2);
        output.WriteSInt32(MagicDifference);
      }
      if (FireDifference != 0) {
        output.WriteRawTag(168, 2);
        output.WriteSInt32(FireDifference);
      }
      if (ThunderDifference != 0) {
        output.WriteRawTag(176, 2);
        output.WriteSInt32(ThunderDifference);
      }
      if (NoGuardDamageRate != 0F) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(NoGuardDamageRate);
      }
      if (VitalSpotChangeRate != 0F) {
        output.WriteRawTag(197, 2);
        output.WriteFloat(VitalSpotChangeRate);
      }
      if (NormalSpotChangeRate != 0F) {
        output.WriteRawTag(205, 2);
        output.WriteFloat(NormalSpotChangeRate);
      }
      if (MaxHpChangeRate != 0F) {
        output.WriteRawTag(213, 2);
        output.WriteFloat(MaxHpChangeRate);
      }
      if (BehaviorId != 0) {
        output.WriteRawTag(216, 2);
        output.WriteSInt32(BehaviorId);
      }
      if (ChangeHpRate != 0F) {
        output.WriteRawTag(229, 2);
        output.WriteFloat(ChangeHpRate);
      }
      if (ChangeHpPoint != 0) {
        output.WriteRawTag(232, 2);
        output.WriteSInt32(ChangeHpPoint);
      }
      if (ChangeMpRate != 0F) {
        output.WriteRawTag(245, 2);
        output.WriteFloat(ChangeMpRate);
      }
      if (ChangeMpPoint != 0) {
        output.WriteRawTag(248, 2);
        output.WriteSInt32(ChangeMpPoint);
      }
      if (MpRecoverChangeSpeed != 0) {
        output.WriteRawTag(128, 3);
        output.WriteSInt32(MpRecoverChangeSpeed);
      }
      if (ChangeStaminaRate != 0F) {
        output.WriteRawTag(141, 3);
        output.WriteFloat(ChangeStaminaRate);
      }
      if (ChangeStaminaPoint != 0) {
        output.WriteRawTag(144, 3);
        output.WriteSInt32(ChangeStaminaPoint);
      }
      if (StaminaRecoverChangeSpeed != 0) {
        output.WriteRawTag(152, 3);
        output.WriteSInt32(StaminaRecoverChangeSpeed);
      }
      if (MagicEffectTimeChange != 0F) {
        output.WriteRawTag(165, 3);
        output.WriteFloat(MagicEffectTimeChange);
      }
      if (InsideDurability != 0) {
        output.WriteRawTag(168, 3);
        output.WriteSInt32(InsideDurability);
      }
      if (MaxDurability != 0) {
        output.WriteRawTag(176, 3);
        output.WriteSInt32(MaxDurability);
      }
      if (PoisonAttackPower != 0) {
        output.WriteRawTag(184, 3);
        output.WriteSInt32(PoisonAttackPower);
      }
      if (RegistIllness != 0) {
        output.WriteRawTag(192, 3);
        output.WriteSInt32(RegistIllness);
      }
      if (BloodAttackPower != 0) {
        output.WriteRawTag(200, 3);
        output.WriteSInt32(BloodAttackPower);
      }
      if (RegistCurse != 0) {
        output.WriteRawTag(208, 3);
        output.WriteSInt32(RegistCurse);
      }
      if (FallDamageRate != 0F) {
        output.WriteRawTag(221, 3);
        output.WriteFloat(FallDamageRate);
      }
      if (SoulRate != 0F) {
        output.WriteRawTag(229, 3);
        output.WriteFloat(SoulRate);
      }
      if (EquipWeightChangeRate != 0F) {
        output.WriteRawTag(237, 3);
        output.WriteFloat(EquipWeightChangeRate);
      }
      if (AllItemWeightChangeRate != 0F) {
        output.WriteRawTag(245, 3);
        output.WriteFloat(AllItemWeightChangeRate);
      }
      if (Soul != 0) {
        output.WriteRawTag(248, 3);
        output.WriteSInt32(Soul);
      }
      if (AnimidOffset != 0) {
        output.WriteRawTag(128, 4);
        output.WriteSInt32(AnimidOffset);
      }
      if (HaveSoulRate != 0F) {
        output.WriteRawTag(141, 4);
        output.WriteFloat(HaveSoulRate);
      }
      if (TargetPriority != 0F) {
        output.WriteRawTag(149, 4);
        output.WriteFloat(TargetPriority);
      }
      if (SightSearchEnemyCut != 0) {
        output.WriteRawTag(152, 4);
        output.WriteSInt32(SightSearchEnemyCut);
      }
      if (HearingSearchEnemyCut != 0F) {
        output.WriteRawTag(165, 4);
        output.WriteFloat(HearingSearchEnemyCut);
      }
      if (GrabityRate != 0F) {
        output.WriteRawTag(173, 4);
        output.WriteFloat(GrabityRate);
      }
      if (RegistPoisonChangeRate != 0F) {
        output.WriteRawTag(181, 4);
        output.WriteFloat(RegistPoisonChangeRate);
      }
      if (RegistToxicChangeRate != 0F) {
        output.WriteRawTag(189, 4);
        output.WriteFloat(RegistToxicChangeRate);
      }
      if (RegistBloodChangeRate != 0F) {
        output.WriteRawTag(197, 4);
        output.WriteFloat(RegistBloodChangeRate);
      }
      if (RegistCurseChangeRate != 0F) {
        output.WriteRawTag(205, 4);
        output.WriteFloat(RegistCurseChangeRate);
      }
      if (SoulStealRate != 0F) {
        output.WriteRawTag(213, 4);
        output.WriteFloat(SoulStealRate);
      }
      if (LifeReductionRate != 0F) {
        output.WriteRawTag(221, 4);
        output.WriteFloat(LifeReductionRate);
      }
      if (HpRecoverRate != 0F) {
        output.WriteRawTag(229, 4);
        output.WriteFloat(HpRecoverRate);
      }
      if (ReplaceSpEffectId != 0) {
        output.WriteRawTag(232, 4);
        output.WriteSInt32(ReplaceSpEffectId);
      }
      if (CycleOccurrenceSpEffectId != 0) {
        output.WriteRawTag(240, 4);
        output.WriteSInt32(CycleOccurrenceSpEffectId);
      }
      if (AtkOccurrenceSpEffectId != 0) {
        output.WriteRawTag(248, 4);
        output.WriteSInt32(AtkOccurrenceSpEffectId);
      }
      if (GuardDefFlickPowerRate != 0F) {
        output.WriteRawTag(133, 5);
        output.WriteFloat(GuardDefFlickPowerRate);
      }
      if (GuardStaminaCutRate != 0F) {
        output.WriteRawTag(141, 5);
        output.WriteFloat(GuardStaminaCutRate);
      }
      if (RayCastPassedTime != 0) {
        output.WriteRawTag(144, 5);
        output.WriteSInt32(RayCastPassedTime);
      }
      if (ChangeSuperArmorPoint != 0) {
        output.WriteRawTag(152, 5);
        output.WriteSInt32(ChangeSuperArmorPoint);
      }
      if (BowDistRate != 0) {
        output.WriteRawTag(160, 5);
        output.WriteSInt32(BowDistRate);
      }
      if (SpCategory != 0) {
        output.WriteRawTag(168, 5);
        output.WriteUInt32(SpCategory);
      }
      if (CategoryPriority != 0) {
        output.WriteRawTag(176, 5);
        output.WriteUInt32(CategoryPriority);
      }
      if (SaveCategory != 0) {
        output.WriteRawTag(184, 5);
        output.WriteSInt32(SaveCategory);
      }
      if (ChangeMagicSlot != 0) {
        output.WriteRawTag(192, 5);
        output.WriteUInt32(ChangeMagicSlot);
      }
      if (ChangeMiracleSlot != 0) {
        output.WriteRawTag(200, 5);
        output.WriteUInt32(ChangeMiracleSlot);
      }
      if (HeroPointDamage != 0) {
        output.WriteRawTag(208, 5);
        output.WriteSInt32(HeroPointDamage);
      }
      if (DefFlickPower != 0) {
        output.WriteRawTag(216, 5);
        output.WriteUInt32(DefFlickPower);
      }
      if (FlickDamageCutRate != 0) {
        output.WriteRawTag(224, 5);
        output.WriteUInt32(FlickDamageCutRate);
      }
      if (BloodDamageRate != 0) {
        output.WriteRawTag(232, 5);
        output.WriteUInt32(BloodDamageRate);
      }
      if (DmgLvNone != 0) {
        output.WriteRawTag(240, 5);
        output.WriteSInt32(DmgLvNone);
      }
      if (DmgLvS != 0) {
        output.WriteRawTag(248, 5);
        output.WriteSInt32(DmgLvS);
      }
      if (DmgLvM != 0) {
        output.WriteRawTag(128, 6);
        output.WriteSInt32(DmgLvM);
      }
      if (DmgLvL != 0) {
        output.WriteRawTag(136, 6);
        output.WriteSInt32(DmgLvL);
      }
      if (DmgLvBlowM != 0) {
        output.WriteRawTag(144, 6);
        output.WriteSInt32(DmgLvBlowM);
      }
      if (DmgLvPush != 0) {
        output.WriteRawTag(152, 6);
        output.WriteSInt32(DmgLvPush);
      }
      if (DmgLvStrike != 0) {
        output.WriteRawTag(160, 6);
        output.WriteSInt32(DmgLvStrike);
      }
      if (DmgLvBlowS != 0) {
        output.WriteRawTag(168, 6);
        output.WriteSInt32(DmgLvBlowS);
      }
      if (DmgLvMin != 0) {
        output.WriteRawTag(176, 6);
        output.WriteSInt32(DmgLvMin);
      }
      if (DmgLvUppercut != 0) {
        output.WriteRawTag(184, 6);
        output.WriteSInt32(DmgLvUppercut);
      }
      if (DmgLvBlowLL != 0) {
        output.WriteRawTag(192, 6);
        output.WriteSInt32(DmgLvBlowLL);
      }
      if (DmgLvBreath != 0) {
        output.WriteRawTag(200, 6);
        output.WriteSInt32(DmgLvBreath);
      }
      if (AtkAttribute != 0) {
        output.WriteRawTag(208, 6);
        output.WriteUInt32(AtkAttribute);
      }
      if (SpAttribute != 0) {
        output.WriteRawTag(216, 6);
        output.WriteUInt32(SpAttribute);
      }
      if (StateInfo != 0) {
        output.WriteRawTag(224, 6);
        output.WriteUInt32(StateInfo);
      }
      if (WepParamChange != 0) {
        output.WriteRawTag(232, 6);
        output.WriteUInt32(WepParamChange);
      }
      if (MoveType != 0) {
        output.WriteRawTag(240, 6);
        output.WriteUInt32(MoveType);
      }
      if (LifeReductionType != 0) {
        output.WriteRawTag(248, 6);
        output.WriteUInt32(LifeReductionType);
      }
      if (ThrowCondition != 0) {
        output.WriteRawTag(128, 7);
        output.WriteUInt32(ThrowCondition);
      }
      if (AddBehaviorJudgeIdCondition != 0) {
        output.WriteRawTag(136, 7);
        output.WriteSInt32(AddBehaviorJudgeIdCondition);
      }
      if (AddBehaviorJudgeIdAdd != 0) {
        output.WriteRawTag(144, 7);
        output.WriteUInt32(AddBehaviorJudgeIdAdd);
      }
      if (EffectTargetSelf != false) {
        output.WriteRawTag(152, 7);
        output.WriteBool(EffectTargetSelf);
      }
      if (EffectTargetFriend != false) {
        output.WriteRawTag(160, 7);
        output.WriteBool(EffectTargetFriend);
      }
      if (EffectTargetEnemy != false) {
        output.WriteRawTag(168, 7);
        output.WriteBool(EffectTargetEnemy);
      }
      if (EffectTargetPlayer != false) {
        output.WriteRawTag(176, 7);
        output.WriteBool(EffectTargetPlayer);
      }
      if (EffectTargetAI != false) {
        output.WriteRawTag(184, 7);
        output.WriteBool(EffectTargetAI);
      }
      if (EffectTargetLive != false) {
        output.WriteRawTag(192, 7);
        output.WriteBool(EffectTargetLive);
      }
      if (EffectTargetGhost != false) {
        output.WriteRawTag(200, 7);
        output.WriteBool(EffectTargetGhost);
      }
      if (EffectTargetWhiteGhost != false) {
        output.WriteRawTag(208, 7);
        output.WriteBool(EffectTargetWhiteGhost);
      }
      if (StrangeEnum != false) {
        output.WriteRawTag(216, 7);
        output.WriteBool(StrangeEnum);
      }
      if (FrostAttackPower != 0) {
        output.WriteRawTag(224, 7);
        output.WriteSInt32(FrostAttackPower);
      }
      if (DarkDifferenceRate != 0F) {
        output.WriteRawTag(237, 7);
        output.WriteFloat(DarkDifferenceRate);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Index);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Offset);
      }
      if (IconId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IconId);
      }
      if (ConditionHp != 0F) {
        size += 1 + 4;
      }
      if (EffectEndurance != 0F) {
        size += 1 + 4;
      }
      if (MotionInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MotionInterval);
      }
      if (MaxHpRate != 0F) {
        size += 1 + 4;
      }
      if (MaxMpRate != 0F) {
        size += 1 + 4;
      }
      if (MaxStaminaRate != 0F) {
        size += 1 + 4;
      }
      if (SlashDamageCutRate != 0F) {
        size += 1 + 4;
      }
      if (BlowDamageCutRate != 0F) {
        size += 1 + 4;
      }
      if (ThrustDamageCutRate != 0F) {
        size += 1 + 4;
      }
      if (NeutralDamageCutRate != 0F) {
        size += 1 + 4;
      }
      if (MagicDamageCutRate != 0F) {
        size += 2 + 4;
      }
      if (FireDamageCutRate != 0F) {
        size += 2 + 4;
      }
      if (ThunderDamageCutRate != 0F) {
        size += 2 + 4;
      }
      if (PhysicsAttackRate != 0F) {
        size += 2 + 4;
      }
      if (MagicAttackRate != 0F) {
        size += 2 + 4;
      }
      if (FireAttackRate != 0F) {
        size += 2 + 4;
      }
      if (ThunderAttackRate != 0F) {
        size += 2 + 4;
      }
      if (PhysicsAttackPowerRate != 0F) {
        size += 2 + 4;
      }
      if (MagicAttackPowerRate != 0F) {
        size += 2 + 4;
      }
      if (FireAttackPowerRate != 0F) {
        size += 2 + 4;
      }
      if (ThunderAttackPowerRate != 0F) {
        size += 2 + 4;
      }
      if (PhysicsAttackPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(PhysicsAttackPower);
      }
      if (MagicAttackPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(MagicAttackPower);
      }
      if (FireAttackPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(FireAttackPower);
      }
      if (ThunderAttackPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ThunderAttackPower);
      }
      if (PhysicsDifferenceRate != 0F) {
        size += 2 + 4;
      }
      if (MagicDifferenceRate != 0F) {
        size += 2 + 4;
      }
      if (FireDifferenceRate != 0F) {
        size += 2 + 4;
      }
      if (ThunderDifferenceRate != 0F) {
        size += 2 + 4;
      }
      if (PhysicsDifference != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(PhysicsDifference);
      }
      if (MagicDifference != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(MagicDifference);
      }
      if (FireDifference != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(FireDifference);
      }
      if (ThunderDifference != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ThunderDifference);
      }
      if (NoGuardDamageRate != 0F) {
        size += 2 + 4;
      }
      if (VitalSpotChangeRate != 0F) {
        size += 2 + 4;
      }
      if (NormalSpotChangeRate != 0F) {
        size += 2 + 4;
      }
      if (MaxHpChangeRate != 0F) {
        size += 2 + 4;
      }
      if (BehaviorId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(BehaviorId);
      }
      if (ChangeHpRate != 0F) {
        size += 2 + 4;
      }
      if (ChangeHpPoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ChangeHpPoint);
      }
      if (ChangeMpRate != 0F) {
        size += 2 + 4;
      }
      if (ChangeMpPoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ChangeMpPoint);
      }
      if (MpRecoverChangeSpeed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(MpRecoverChangeSpeed);
      }
      if (ChangeStaminaRate != 0F) {
        size += 2 + 4;
      }
      if (ChangeStaminaPoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ChangeStaminaPoint);
      }
      if (StaminaRecoverChangeSpeed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(StaminaRecoverChangeSpeed);
      }
      if (MagicEffectTimeChange != 0F) {
        size += 2 + 4;
      }
      if (InsideDurability != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(InsideDurability);
      }
      if (MaxDurability != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(MaxDurability);
      }
      if (PoisonAttackPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(PoisonAttackPower);
      }
      if (RegistIllness != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RegistIllness);
      }
      if (BloodAttackPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(BloodAttackPower);
      }
      if (RegistCurse != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RegistCurse);
      }
      if (FallDamageRate != 0F) {
        size += 2 + 4;
      }
      if (SoulRate != 0F) {
        size += 2 + 4;
      }
      if (EquipWeightChangeRate != 0F) {
        size += 2 + 4;
      }
      if (AllItemWeightChangeRate != 0F) {
        size += 2 + 4;
      }
      if (Soul != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Soul);
      }
      if (AnimidOffset != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(AnimidOffset);
      }
      if (HaveSoulRate != 0F) {
        size += 2 + 4;
      }
      if (TargetPriority != 0F) {
        size += 2 + 4;
      }
      if (SightSearchEnemyCut != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SightSearchEnemyCut);
      }
      if (HearingSearchEnemyCut != 0F) {
        size += 2 + 4;
      }
      if (GrabityRate != 0F) {
        size += 2 + 4;
      }
      if (RegistPoisonChangeRate != 0F) {
        size += 2 + 4;
      }
      if (RegistToxicChangeRate != 0F) {
        size += 2 + 4;
      }
      if (RegistBloodChangeRate != 0F) {
        size += 2 + 4;
      }
      if (RegistCurseChangeRate != 0F) {
        size += 2 + 4;
      }
      if (SoulStealRate != 0F) {
        size += 2 + 4;
      }
      if (LifeReductionRate != 0F) {
        size += 2 + 4;
      }
      if (HpRecoverRate != 0F) {
        size += 2 + 4;
      }
      if (ReplaceSpEffectId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ReplaceSpEffectId);
      }
      if (CycleOccurrenceSpEffectId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(CycleOccurrenceSpEffectId);
      }
      if (AtkOccurrenceSpEffectId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(AtkOccurrenceSpEffectId);
      }
      if (GuardDefFlickPowerRate != 0F) {
        size += 2 + 4;
      }
      if (GuardStaminaCutRate != 0F) {
        size += 2 + 4;
      }
      if (RayCastPassedTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(RayCastPassedTime);
      }
      if (ChangeSuperArmorPoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ChangeSuperArmorPoint);
      }
      if (BowDistRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(BowDistRate);
      }
      if (SpCategory != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpCategory);
      }
      if (CategoryPriority != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CategoryPriority);
      }
      if (SaveCategory != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SaveCategory);
      }
      if (ChangeMagicSlot != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ChangeMagicSlot);
      }
      if (ChangeMiracleSlot != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ChangeMiracleSlot);
      }
      if (HeroPointDamage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(HeroPointDamage);
      }
      if (DefFlickPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DefFlickPower);
      }
      if (FlickDamageCutRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FlickDamageCutRate);
      }
      if (BloodDamageRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BloodDamageRate);
      }
      if (DmgLvNone != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DmgLvNone);
      }
      if (DmgLvS != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DmgLvS);
      }
      if (DmgLvM != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DmgLvM);
      }
      if (DmgLvL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DmgLvL);
      }
      if (DmgLvBlowM != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DmgLvBlowM);
      }
      if (DmgLvPush != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DmgLvPush);
      }
      if (DmgLvStrike != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DmgLvStrike);
      }
      if (DmgLvBlowS != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DmgLvBlowS);
      }
      if (DmgLvMin != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DmgLvMin);
      }
      if (DmgLvUppercut != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DmgLvUppercut);
      }
      if (DmgLvBlowLL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DmgLvBlowLL);
      }
      if (DmgLvBreath != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DmgLvBreath);
      }
      if (AtkAttribute != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtkAttribute);
      }
      if (SpAttribute != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpAttribute);
      }
      if (StateInfo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(StateInfo);
      }
      if (WepParamChange != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WepParamChange);
      }
      if (MoveType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MoveType);
      }
      if (LifeReductionType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LifeReductionType);
      }
      if (ThrowCondition != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ThrowCondition);
      }
      if (AddBehaviorJudgeIdCondition != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(AddBehaviorJudgeIdCondition);
      }
      if (AddBehaviorJudgeIdAdd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AddBehaviorJudgeIdAdd);
      }
      if (EffectTargetSelf != false) {
        size += 2 + 1;
      }
      if (EffectTargetFriend != false) {
        size += 2 + 1;
      }
      if (EffectTargetEnemy != false) {
        size += 2 + 1;
      }
      if (EffectTargetPlayer != false) {
        size += 2 + 1;
      }
      if (EffectTargetAI != false) {
        size += 2 + 1;
      }
      if (EffectTargetLive != false) {
        size += 2 + 1;
      }
      if (EffectTargetGhost != false) {
        size += 2 + 1;
      }
      if (EffectTargetWhiteGhost != false) {
        size += 2 + 1;
      }
      if (StrangeEnum != false) {
        size += 2 + 1;
      }
      if (FrostAttackPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(FrostAttackPower);
      }
      if (DarkDifferenceRate != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    public void MergeFrom(SpEffectParam other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.IconId != 0) {
        IconId = other.IconId;
      }
      if (other.ConditionHp != 0F) {
        ConditionHp = other.ConditionHp;
      }
      if (other.EffectEndurance != 0F) {
        EffectEndurance = other.EffectEndurance;
      }
      if (other.MotionInterval != 0) {
        MotionInterval = other.MotionInterval;
      }
      if (other.MaxHpRate != 0F) {
        MaxHpRate = other.MaxHpRate;
      }
      if (other.MaxMpRate != 0F) {
        MaxMpRate = other.MaxMpRate;
      }
      if (other.MaxStaminaRate != 0F) {
        MaxStaminaRate = other.MaxStaminaRate;
      }
      if (other.SlashDamageCutRate != 0F) {
        SlashDamageCutRate = other.SlashDamageCutRate;
      }
      if (other.BlowDamageCutRate != 0F) {
        BlowDamageCutRate = other.BlowDamageCutRate;
      }
      if (other.ThrustDamageCutRate != 0F) {
        ThrustDamageCutRate = other.ThrustDamageCutRate;
      }
      if (other.NeutralDamageCutRate != 0F) {
        NeutralDamageCutRate = other.NeutralDamageCutRate;
      }
      if (other.MagicDamageCutRate != 0F) {
        MagicDamageCutRate = other.MagicDamageCutRate;
      }
      if (other.FireDamageCutRate != 0F) {
        FireDamageCutRate = other.FireDamageCutRate;
      }
      if (other.ThunderDamageCutRate != 0F) {
        ThunderDamageCutRate = other.ThunderDamageCutRate;
      }
      if (other.PhysicsAttackRate != 0F) {
        PhysicsAttackRate = other.PhysicsAttackRate;
      }
      if (other.MagicAttackRate != 0F) {
        MagicAttackRate = other.MagicAttackRate;
      }
      if (other.FireAttackRate != 0F) {
        FireAttackRate = other.FireAttackRate;
      }
      if (other.ThunderAttackRate != 0F) {
        ThunderAttackRate = other.ThunderAttackRate;
      }
      if (other.PhysicsAttackPowerRate != 0F) {
        PhysicsAttackPowerRate = other.PhysicsAttackPowerRate;
      }
      if (other.MagicAttackPowerRate != 0F) {
        MagicAttackPowerRate = other.MagicAttackPowerRate;
      }
      if (other.FireAttackPowerRate != 0F) {
        FireAttackPowerRate = other.FireAttackPowerRate;
      }
      if (other.ThunderAttackPowerRate != 0F) {
        ThunderAttackPowerRate = other.ThunderAttackPowerRate;
      }
      if (other.PhysicsAttackPower != 0) {
        PhysicsAttackPower = other.PhysicsAttackPower;
      }
      if (other.MagicAttackPower != 0) {
        MagicAttackPower = other.MagicAttackPower;
      }
      if (other.FireAttackPower != 0) {
        FireAttackPower = other.FireAttackPower;
      }
      if (other.ThunderAttackPower != 0) {
        ThunderAttackPower = other.ThunderAttackPower;
      }
      if (other.PhysicsDifferenceRate != 0F) {
        PhysicsDifferenceRate = other.PhysicsDifferenceRate;
      }
      if (other.MagicDifferenceRate != 0F) {
        MagicDifferenceRate = other.MagicDifferenceRate;
      }
      if (other.FireDifferenceRate != 0F) {
        FireDifferenceRate = other.FireDifferenceRate;
      }
      if (other.ThunderDifferenceRate != 0F) {
        ThunderDifferenceRate = other.ThunderDifferenceRate;
      }
      if (other.PhysicsDifference != 0) {
        PhysicsDifference = other.PhysicsDifference;
      }
      if (other.MagicDifference != 0) {
        MagicDifference = other.MagicDifference;
      }
      if (other.FireDifference != 0) {
        FireDifference = other.FireDifference;
      }
      if (other.ThunderDifference != 0) {
        ThunderDifference = other.ThunderDifference;
      }
      if (other.NoGuardDamageRate != 0F) {
        NoGuardDamageRate = other.NoGuardDamageRate;
      }
      if (other.VitalSpotChangeRate != 0F) {
        VitalSpotChangeRate = other.VitalSpotChangeRate;
      }
      if (other.NormalSpotChangeRate != 0F) {
        NormalSpotChangeRate = other.NormalSpotChangeRate;
      }
      if (other.MaxHpChangeRate != 0F) {
        MaxHpChangeRate = other.MaxHpChangeRate;
      }
      if (other.BehaviorId != 0) {
        BehaviorId = other.BehaviorId;
      }
      if (other.ChangeHpRate != 0F) {
        ChangeHpRate = other.ChangeHpRate;
      }
      if (other.ChangeHpPoint != 0) {
        ChangeHpPoint = other.ChangeHpPoint;
      }
      if (other.ChangeMpRate != 0F) {
        ChangeMpRate = other.ChangeMpRate;
      }
      if (other.ChangeMpPoint != 0) {
        ChangeMpPoint = other.ChangeMpPoint;
      }
      if (other.MpRecoverChangeSpeed != 0) {
        MpRecoverChangeSpeed = other.MpRecoverChangeSpeed;
      }
      if (other.ChangeStaminaRate != 0F) {
        ChangeStaminaRate = other.ChangeStaminaRate;
      }
      if (other.ChangeStaminaPoint != 0) {
        ChangeStaminaPoint = other.ChangeStaminaPoint;
      }
      if (other.StaminaRecoverChangeSpeed != 0) {
        StaminaRecoverChangeSpeed = other.StaminaRecoverChangeSpeed;
      }
      if (other.MagicEffectTimeChange != 0F) {
        MagicEffectTimeChange = other.MagicEffectTimeChange;
      }
      if (other.InsideDurability != 0) {
        InsideDurability = other.InsideDurability;
      }
      if (other.MaxDurability != 0) {
        MaxDurability = other.MaxDurability;
      }
      if (other.PoisonAttackPower != 0) {
        PoisonAttackPower = other.PoisonAttackPower;
      }
      if (other.RegistIllness != 0) {
        RegistIllness = other.RegistIllness;
      }
      if (other.BloodAttackPower != 0) {
        BloodAttackPower = other.BloodAttackPower;
      }
      if (other.RegistCurse != 0) {
        RegistCurse = other.RegistCurse;
      }
      if (other.FallDamageRate != 0F) {
        FallDamageRate = other.FallDamageRate;
      }
      if (other.SoulRate != 0F) {
        SoulRate = other.SoulRate;
      }
      if (other.EquipWeightChangeRate != 0F) {
        EquipWeightChangeRate = other.EquipWeightChangeRate;
      }
      if (other.AllItemWeightChangeRate != 0F) {
        AllItemWeightChangeRate = other.AllItemWeightChangeRate;
      }
      if (other.Soul != 0) {
        Soul = other.Soul;
      }
      if (other.AnimidOffset != 0) {
        AnimidOffset = other.AnimidOffset;
      }
      if (other.HaveSoulRate != 0F) {
        HaveSoulRate = other.HaveSoulRate;
      }
      if (other.TargetPriority != 0F) {
        TargetPriority = other.TargetPriority;
      }
      if (other.SightSearchEnemyCut != 0) {
        SightSearchEnemyCut = other.SightSearchEnemyCut;
      }
      if (other.HearingSearchEnemyCut != 0F) {
        HearingSearchEnemyCut = other.HearingSearchEnemyCut;
      }
      if (other.GrabityRate != 0F) {
        GrabityRate = other.GrabityRate;
      }
      if (other.RegistPoisonChangeRate != 0F) {
        RegistPoisonChangeRate = other.RegistPoisonChangeRate;
      }
      if (other.RegistToxicChangeRate != 0F) {
        RegistToxicChangeRate = other.RegistToxicChangeRate;
      }
      if (other.RegistBloodChangeRate != 0F) {
        RegistBloodChangeRate = other.RegistBloodChangeRate;
      }
      if (other.RegistCurseChangeRate != 0F) {
        RegistCurseChangeRate = other.RegistCurseChangeRate;
      }
      if (other.SoulStealRate != 0F) {
        SoulStealRate = other.SoulStealRate;
      }
      if (other.LifeReductionRate != 0F) {
        LifeReductionRate = other.LifeReductionRate;
      }
      if (other.HpRecoverRate != 0F) {
        HpRecoverRate = other.HpRecoverRate;
      }
      if (other.ReplaceSpEffectId != 0) {
        ReplaceSpEffectId = other.ReplaceSpEffectId;
      }
      if (other.CycleOccurrenceSpEffectId != 0) {
        CycleOccurrenceSpEffectId = other.CycleOccurrenceSpEffectId;
      }
      if (other.AtkOccurrenceSpEffectId != 0) {
        AtkOccurrenceSpEffectId = other.AtkOccurrenceSpEffectId;
      }
      if (other.GuardDefFlickPowerRate != 0F) {
        GuardDefFlickPowerRate = other.GuardDefFlickPowerRate;
      }
      if (other.GuardStaminaCutRate != 0F) {
        GuardStaminaCutRate = other.GuardStaminaCutRate;
      }
      if (other.RayCastPassedTime != 0) {
        RayCastPassedTime = other.RayCastPassedTime;
      }
      if (other.ChangeSuperArmorPoint != 0) {
        ChangeSuperArmorPoint = other.ChangeSuperArmorPoint;
      }
      if (other.BowDistRate != 0) {
        BowDistRate = other.BowDistRate;
      }
      if (other.SpCategory != 0) {
        SpCategory = other.SpCategory;
      }
      if (other.CategoryPriority != 0) {
        CategoryPriority = other.CategoryPriority;
      }
      if (other.SaveCategory != 0) {
        SaveCategory = other.SaveCategory;
      }
      if (other.ChangeMagicSlot != 0) {
        ChangeMagicSlot = other.ChangeMagicSlot;
      }
      if (other.ChangeMiracleSlot != 0) {
        ChangeMiracleSlot = other.ChangeMiracleSlot;
      }
      if (other.HeroPointDamage != 0) {
        HeroPointDamage = other.HeroPointDamage;
      }
      if (other.DefFlickPower != 0) {
        DefFlickPower = other.DefFlickPower;
      }
      if (other.FlickDamageCutRate != 0) {
        FlickDamageCutRate = other.FlickDamageCutRate;
      }
      if (other.BloodDamageRate != 0) {
        BloodDamageRate = other.BloodDamageRate;
      }
      if (other.DmgLvNone != 0) {
        DmgLvNone = other.DmgLvNone;
      }
      if (other.DmgLvS != 0) {
        DmgLvS = other.DmgLvS;
      }
      if (other.DmgLvM != 0) {
        DmgLvM = other.DmgLvM;
      }
      if (other.DmgLvL != 0) {
        DmgLvL = other.DmgLvL;
      }
      if (other.DmgLvBlowM != 0) {
        DmgLvBlowM = other.DmgLvBlowM;
      }
      if (other.DmgLvPush != 0) {
        DmgLvPush = other.DmgLvPush;
      }
      if (other.DmgLvStrike != 0) {
        DmgLvStrike = other.DmgLvStrike;
      }
      if (other.DmgLvBlowS != 0) {
        DmgLvBlowS = other.DmgLvBlowS;
      }
      if (other.DmgLvMin != 0) {
        DmgLvMin = other.DmgLvMin;
      }
      if (other.DmgLvUppercut != 0) {
        DmgLvUppercut = other.DmgLvUppercut;
      }
      if (other.DmgLvBlowLL != 0) {
        DmgLvBlowLL = other.DmgLvBlowLL;
      }
      if (other.DmgLvBreath != 0) {
        DmgLvBreath = other.DmgLvBreath;
      }
      if (other.AtkAttribute != 0) {
        AtkAttribute = other.AtkAttribute;
      }
      if (other.SpAttribute != 0) {
        SpAttribute = other.SpAttribute;
      }
      if (other.StateInfo != 0) {
        StateInfo = other.StateInfo;
      }
      if (other.WepParamChange != 0) {
        WepParamChange = other.WepParamChange;
      }
      if (other.MoveType != 0) {
        MoveType = other.MoveType;
      }
      if (other.LifeReductionType != 0) {
        LifeReductionType = other.LifeReductionType;
      }
      if (other.ThrowCondition != 0) {
        ThrowCondition = other.ThrowCondition;
      }
      if (other.AddBehaviorJudgeIdCondition != 0) {
        AddBehaviorJudgeIdCondition = other.AddBehaviorJudgeIdCondition;
      }
      if (other.AddBehaviorJudgeIdAdd != 0) {
        AddBehaviorJudgeIdAdd = other.AddBehaviorJudgeIdAdd;
      }
      if (other.EffectTargetSelf != false) {
        EffectTargetSelf = other.EffectTargetSelf;
      }
      if (other.EffectTargetFriend != false) {
        EffectTargetFriend = other.EffectTargetFriend;
      }
      if (other.EffectTargetEnemy != false) {
        EffectTargetEnemy = other.EffectTargetEnemy;
      }
      if (other.EffectTargetPlayer != false) {
        EffectTargetPlayer = other.EffectTargetPlayer;
      }
      if (other.EffectTargetAI != false) {
        EffectTargetAI = other.EffectTargetAI;
      }
      if (other.EffectTargetLive != false) {
        EffectTargetLive = other.EffectTargetLive;
      }
      if (other.EffectTargetGhost != false) {
        EffectTargetGhost = other.EffectTargetGhost;
      }
      if (other.EffectTargetWhiteGhost != false) {
        EffectTargetWhiteGhost = other.EffectTargetWhiteGhost;
      }
      if (other.StrangeEnum != false) {
        StrangeEnum = other.StrangeEnum;
      }
      if (other.FrostAttackPower != 0) {
        FrostAttackPower = other.FrostAttackPower;
      }
      if (other.DarkDifferenceRate != 0F) {
        DarkDifferenceRate = other.DarkDifferenceRate;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadSInt32();
            break;
          }
          case 32: {
            Offset = input.ReadSInt32();
            break;
          }
          case 40: {
            IconId = input.ReadSInt32();
            break;
          }
          case 53: {
            ConditionHp = input.ReadFloat();
            break;
          }
          case 61: {
            EffectEndurance = input.ReadFloat();
            break;
          }
          case 64: {
            MotionInterval = input.ReadSInt32();
            break;
          }
          case 77: {
            MaxHpRate = input.ReadFloat();
            break;
          }
          case 85: {
            MaxMpRate = input.ReadFloat();
            break;
          }
          case 93: {
            MaxStaminaRate = input.ReadFloat();
            break;
          }
          case 101: {
            SlashDamageCutRate = input.ReadFloat();
            break;
          }
          case 109: {
            BlowDamageCutRate = input.ReadFloat();
            break;
          }
          case 117: {
            ThrustDamageCutRate = input.ReadFloat();
            break;
          }
          case 125: {
            NeutralDamageCutRate = input.ReadFloat();
            break;
          }
          case 133: {
            MagicDamageCutRate = input.ReadFloat();
            break;
          }
          case 141: {
            FireDamageCutRate = input.ReadFloat();
            break;
          }
          case 149: {
            ThunderDamageCutRate = input.ReadFloat();
            break;
          }
          case 157: {
            PhysicsAttackRate = input.ReadFloat();
            break;
          }
          case 165: {
            MagicAttackRate = input.ReadFloat();
            break;
          }
          case 173: {
            FireAttackRate = input.ReadFloat();
            break;
          }
          case 181: {
            ThunderAttackRate = input.ReadFloat();
            break;
          }
          case 189: {
            PhysicsAttackPowerRate = input.ReadFloat();
            break;
          }
          case 197: {
            MagicAttackPowerRate = input.ReadFloat();
            break;
          }
          case 205: {
            FireAttackPowerRate = input.ReadFloat();
            break;
          }
          case 213: {
            ThunderAttackPowerRate = input.ReadFloat();
            break;
          }
          case 216: {
            PhysicsAttackPower = input.ReadSInt32();
            break;
          }
          case 224: {
            MagicAttackPower = input.ReadSInt32();
            break;
          }
          case 232: {
            FireAttackPower = input.ReadSInt32();
            break;
          }
          case 240: {
            ThunderAttackPower = input.ReadSInt32();
            break;
          }
          case 253: {
            PhysicsDifferenceRate = input.ReadFloat();
            break;
          }
          case 261: {
            MagicDifferenceRate = input.ReadFloat();
            break;
          }
          case 269: {
            FireDifferenceRate = input.ReadFloat();
            break;
          }
          case 277: {
            ThunderDifferenceRate = input.ReadFloat();
            break;
          }
          case 280: {
            PhysicsDifference = input.ReadSInt32();
            break;
          }
          case 288: {
            MagicDifference = input.ReadSInt32();
            break;
          }
          case 296: {
            FireDifference = input.ReadSInt32();
            break;
          }
          case 304: {
            ThunderDifference = input.ReadSInt32();
            break;
          }
          case 317: {
            NoGuardDamageRate = input.ReadFloat();
            break;
          }
          case 325: {
            VitalSpotChangeRate = input.ReadFloat();
            break;
          }
          case 333: {
            NormalSpotChangeRate = input.ReadFloat();
            break;
          }
          case 341: {
            MaxHpChangeRate = input.ReadFloat();
            break;
          }
          case 344: {
            BehaviorId = input.ReadSInt32();
            break;
          }
          case 357: {
            ChangeHpRate = input.ReadFloat();
            break;
          }
          case 360: {
            ChangeHpPoint = input.ReadSInt32();
            break;
          }
          case 373: {
            ChangeMpRate = input.ReadFloat();
            break;
          }
          case 376: {
            ChangeMpPoint = input.ReadSInt32();
            break;
          }
          case 384: {
            MpRecoverChangeSpeed = input.ReadSInt32();
            break;
          }
          case 397: {
            ChangeStaminaRate = input.ReadFloat();
            break;
          }
          case 400: {
            ChangeStaminaPoint = input.ReadSInt32();
            break;
          }
          case 408: {
            StaminaRecoverChangeSpeed = input.ReadSInt32();
            break;
          }
          case 421: {
            MagicEffectTimeChange = input.ReadFloat();
            break;
          }
          case 424: {
            InsideDurability = input.ReadSInt32();
            break;
          }
          case 432: {
            MaxDurability = input.ReadSInt32();
            break;
          }
          case 440: {
            PoisonAttackPower = input.ReadSInt32();
            break;
          }
          case 448: {
            RegistIllness = input.ReadSInt32();
            break;
          }
          case 456: {
            BloodAttackPower = input.ReadSInt32();
            break;
          }
          case 464: {
            RegistCurse = input.ReadSInt32();
            break;
          }
          case 477: {
            FallDamageRate = input.ReadFloat();
            break;
          }
          case 485: {
            SoulRate = input.ReadFloat();
            break;
          }
          case 493: {
            EquipWeightChangeRate = input.ReadFloat();
            break;
          }
          case 501: {
            AllItemWeightChangeRate = input.ReadFloat();
            break;
          }
          case 504: {
            Soul = input.ReadSInt32();
            break;
          }
          case 512: {
            AnimidOffset = input.ReadSInt32();
            break;
          }
          case 525: {
            HaveSoulRate = input.ReadFloat();
            break;
          }
          case 533: {
            TargetPriority = input.ReadFloat();
            break;
          }
          case 536: {
            SightSearchEnemyCut = input.ReadSInt32();
            break;
          }
          case 549: {
            HearingSearchEnemyCut = input.ReadFloat();
            break;
          }
          case 557: {
            GrabityRate = input.ReadFloat();
            break;
          }
          case 565: {
            RegistPoisonChangeRate = input.ReadFloat();
            break;
          }
          case 573: {
            RegistToxicChangeRate = input.ReadFloat();
            break;
          }
          case 581: {
            RegistBloodChangeRate = input.ReadFloat();
            break;
          }
          case 589: {
            RegistCurseChangeRate = input.ReadFloat();
            break;
          }
          case 597: {
            SoulStealRate = input.ReadFloat();
            break;
          }
          case 605: {
            LifeReductionRate = input.ReadFloat();
            break;
          }
          case 613: {
            HpRecoverRate = input.ReadFloat();
            break;
          }
          case 616: {
            ReplaceSpEffectId = input.ReadSInt32();
            break;
          }
          case 624: {
            CycleOccurrenceSpEffectId = input.ReadSInt32();
            break;
          }
          case 632: {
            AtkOccurrenceSpEffectId = input.ReadSInt32();
            break;
          }
          case 645: {
            GuardDefFlickPowerRate = input.ReadFloat();
            break;
          }
          case 653: {
            GuardStaminaCutRate = input.ReadFloat();
            break;
          }
          case 656: {
            RayCastPassedTime = input.ReadSInt32();
            break;
          }
          case 664: {
            ChangeSuperArmorPoint = input.ReadSInt32();
            break;
          }
          case 672: {
            BowDistRate = input.ReadSInt32();
            break;
          }
          case 680: {
            SpCategory = input.ReadUInt32();
            break;
          }
          case 688: {
            CategoryPriority = input.ReadUInt32();
            break;
          }
          case 696: {
            SaveCategory = input.ReadSInt32();
            break;
          }
          case 704: {
            ChangeMagicSlot = input.ReadUInt32();
            break;
          }
          case 712: {
            ChangeMiracleSlot = input.ReadUInt32();
            break;
          }
          case 720: {
            HeroPointDamage = input.ReadSInt32();
            break;
          }
          case 728: {
            DefFlickPower = input.ReadUInt32();
            break;
          }
          case 736: {
            FlickDamageCutRate = input.ReadUInt32();
            break;
          }
          case 744: {
            BloodDamageRate = input.ReadUInt32();
            break;
          }
          case 752: {
            DmgLvNone = input.ReadSInt32();
            break;
          }
          case 760: {
            DmgLvS = input.ReadSInt32();
            break;
          }
          case 768: {
            DmgLvM = input.ReadSInt32();
            break;
          }
          case 776: {
            DmgLvL = input.ReadSInt32();
            break;
          }
          case 784: {
            DmgLvBlowM = input.ReadSInt32();
            break;
          }
          case 792: {
            DmgLvPush = input.ReadSInt32();
            break;
          }
          case 800: {
            DmgLvStrike = input.ReadSInt32();
            break;
          }
          case 808: {
            DmgLvBlowS = input.ReadSInt32();
            break;
          }
          case 816: {
            DmgLvMin = input.ReadSInt32();
            break;
          }
          case 824: {
            DmgLvUppercut = input.ReadSInt32();
            break;
          }
          case 832: {
            DmgLvBlowLL = input.ReadSInt32();
            break;
          }
          case 840: {
            DmgLvBreath = input.ReadSInt32();
            break;
          }
          case 848: {
            AtkAttribute = input.ReadUInt32();
            break;
          }
          case 856: {
            SpAttribute = input.ReadUInt32();
            break;
          }
          case 864: {
            StateInfo = input.ReadUInt32();
            break;
          }
          case 872: {
            WepParamChange = input.ReadUInt32();
            break;
          }
          case 880: {
            MoveType = input.ReadUInt32();
            break;
          }
          case 888: {
            LifeReductionType = input.ReadUInt32();
            break;
          }
          case 896: {
            ThrowCondition = input.ReadUInt32();
            break;
          }
          case 904: {
            AddBehaviorJudgeIdCondition = input.ReadSInt32();
            break;
          }
          case 912: {
            AddBehaviorJudgeIdAdd = input.ReadUInt32();
            break;
          }
          case 920: {
            EffectTargetSelf = input.ReadBool();
            break;
          }
          case 928: {
            EffectTargetFriend = input.ReadBool();
            break;
          }
          case 936: {
            EffectTargetEnemy = input.ReadBool();
            break;
          }
          case 944: {
            EffectTargetPlayer = input.ReadBool();
            break;
          }
          case 952: {
            EffectTargetAI = input.ReadBool();
            break;
          }
          case 960: {
            EffectTargetLive = input.ReadBool();
            break;
          }
          case 968: {
            EffectTargetGhost = input.ReadBool();
            break;
          }
          case 976: {
            EffectTargetWhiteGhost = input.ReadBool();
            break;
          }
          case 984: {
            StrangeEnum = input.ReadBool();
            break;
          }
          case 992: {
            FrostAttackPower = input.ReadSInt32();
            break;
          }
          case 1005: {
            DarkDifferenceRate = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NpcParam : pb::IMessage<NpcParam> {
    private static readonly pb::MessageParser<NpcParam> _parser = new pb::MessageParser<NpcParam>(() => new NpcParam());
    public static pb::MessageParser<NpcParam> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ds3Ext.Ds3ExtReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public NpcParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    public NpcParam(NpcParam other) : this() {
      id_ = other.id_;
      index_ = other.index_;
      offset_ = other.offset_;
      behaviorVariationId_ = other.behaviorVariationId_;
      aiThinkId_ = other.aiThinkId_;
      nameId_ = other.nameId_;
      turnVelocity_ = other.turnVelocity_;
      hitHeight_ = other.hitHeight_;
      hitRadius_ = other.hitRadius_;
      weight_ = other.weight_;
      hitYOffset_ = other.hitYOffset_;
      hp_ = other.hp_;
      mp_ = other.mp_;
      getSoul_ = other.getSoul_;
      itemLotId1_ = other.itemLotId1_;
      itemLotId2_ = other.itemLotId2_;
      itemLotId3_ = other.itemLotId3_;
      itemLotId4_ = other.itemLotId4_;
      itemLotId5_ = other.itemLotId5_;
      itemLotId6_ = other.itemLotId6_;
      humanityLotId_ = other.humanityLotId_;
      spEffectID0_ = other.spEffectID0_;
      spEffectID1_ = other.spEffectID1_;
      spEffectID2_ = other.spEffectID2_;
      spEffectID3_ = other.spEffectID3_;
      spEffectID4_ = other.spEffectID4_;
      spEffectID5_ = other.spEffectID5_;
      spEffectID6_ = other.spEffectID6_;
      spEffectID7_ = other.spEffectID7_;
      gameClearSpEffectID_ = other.gameClearSpEffectID_;
      physGuardCutRate_ = other.physGuardCutRate_;
      magGuardCutRate_ = other.magGuardCutRate_;
      fireGuardCutRate_ = other.fireGuardCutRate_;
      thunGuardCutRate_ = other.thunGuardCutRate_;
      animIdOffset_ = other.animIdOffset_;
      moveAnimId_ = other.moveAnimId_;
      spMoveAnimId1_ = other.spMoveAnimId1_;
      spMoveAnimId2_ = other.spMoveAnimId2_;
      networkWarpDist_ = other.networkWarpDist_;
      dbgBehaviorR1_ = other.dbgBehaviorR1_;
      dbgBehaviorL1_ = other.dbgBehaviorL1_;
      dbgBehaviorR2_ = other.dbgBehaviorR2_;
      dbgBehaviorL2_ = other.dbgBehaviorL2_;
      dbgBehaviorRL_ = other.dbgBehaviorRL_;
      dbgBehaviorRR_ = other.dbgBehaviorRR_;
      dbgBehaviorRD_ = other.dbgBehaviorRD_;
      dbgBehaviorRU_ = other.dbgBehaviorRU_;
      dbgBehaviorLL_ = other.dbgBehaviorLL_;
      dbgBehaviorLR_ = other.dbgBehaviorLR_;
      dbgBehaviorLD_ = other.dbgBehaviorLD_;
      dbgBehaviorLU_ = other.dbgBehaviorLU_;
      animIdOffset2_ = other.animIdOffset2_;
      partsDamageRate1_ = other.partsDamageRate1_;
      partsDamageRate2_ = other.partsDamageRate2_;
      partsDamageRate3_ = other.partsDamageRate3_;
      partsDamageRate4_ = other.partsDamageRate4_;
      partsDamageRate5_ = other.partsDamageRate5_;
      partsDamageRate6_ = other.partsDamageRate6_;
      partsDamageRate7_ = other.partsDamageRate7_;
      partsDamageRate8_ = other.partsDamageRate8_;
      weakPartsDamageRate_ = other.weakPartsDamageRate_;
      superArmorRecoverCorrection_ = other.superArmorRecoverCorrection_;
      superArmorBrakeKnockbackDist_ = other.superArmorBrakeKnockbackDist_;
      stamina_ = other.stamina_;
      staminaRecoverBaseVel_ = other.staminaRecoverBaseVel_;
      defPhys_ = other.defPhys_;
      defSlash_ = other.defSlash_;
      defBlow_ = other.defBlow_;
      defThrust_ = other.defThrust_;
      defMag_ = other.defMag_;
      defFire_ = other.defFire_;
      defThun_ = other.defThun_;
      defFlickPower_ = other.defFlickPower_;
      resistPoison_ = other.resistPoison_;
      resistDisease_ = other.resistDisease_;
      resistBleed_ = other.resistBleed_;
      resistCurse_ = other.resistCurse_;
      ghostModelId_ = other.ghostModelId_;
      normalChangeResourceId_ = other.normalChangeResourceId_;
      guardAngle_ = other.guardAngle_;
      slashGuardCutRate_ = other.slashGuardCutRate_;
      blowGuardCutRate_ = other.blowGuardCutRate_;
      thrustGuardCutRate_ = other.thrustGuardCutRate_;
      superArmorDurability_ = other.superArmorDurability_;
      normalChangeTexChrId_ = other.normalChangeTexChrId_;
      dropType_ = other.dropType_;
      knockbackRate_ = other.knockbackRate_;
      knockbackParamId_ = other.knockbackParamId_;
      fallDamageDump_ = other.fallDamageDump_;
      staminaGuardDef_ = other.staminaGuardDef_;
      pcAttrB_ = other.pcAttrB_;
      pcAttrW_ = other.pcAttrW_;
      pcAttrL_ = other.pcAttrL_;
      pcAttrR_ = other.pcAttrR_;
      areaAttrB_ = other.areaAttrB_;
      areaAttrW_ = other.areaAttrW_;
      areaAttrL_ = other.areaAttrL_;
      areaAttrR_ = other.areaAttrR_;
      mpRecoverBaseVel_ = other.mpRecoverBaseVel_;
      flickDamageCutRate_ = other.flickDamageCutRate_;
      defaultLodParamId_ = other.defaultLodParamId_;
      drawType_ = other.drawType_;
      npcType_ = other.npcType_;
      teamType_ = other.teamType_;
      moveType_ = other.moveType_;
      lockDist_ = other.lockDist_;
      material_ = other.material_;
      materialSfx_ = other.materialSfx_;
      materialWeak_ = other.materialWeak_;
      materialSfxWeak_ = other.materialSfxWeak_;
      partsDamageType_ = other.partsDamageType_;
      maxUndurationAng_ = other.maxUndurationAng_;
      guardLevel_ = other.guardLevel_;
      burnSfxType_ = other.burnSfxType_;
      poisonGuardResist_ = other.poisonGuardResist_;
      diseaseGuardResist_ = other.diseaseGuardResist_;
      bloodGuardResist_ = other.bloodGuardResist_;
      curseGuardResist_ = other.curseGuardResist_;
      parryAttack_ = other.parryAttack_;
      parryDefense_ = other.parryDefense_;
      sfxSize_ = other.sfxSize_;
      pushOutCamRegionRadius_ = other.pushOutCamRegionRadius_;
      hitStopType_ = other.hitStopType_;
      ladderEndChkOffsetTop_ = other.ladderEndChkOffsetTop_;
      ladderEndChkOffsetLow_ = other.ladderEndChkOffsetLow_;
      bitFields0_ = other.bitFields0_;
      bitFields1_ = other.bitFields1_;
      bitFields2_ = other.bitFields2_;
      bitFields3_ = other.bitFields3_;
      bitFields4_ = other.bitFields4_;
      unknown10_ = other.unknown10_;
      unknown11_ = other.unknown11_;
      unknown12_ = other.unknown12_;
      unknown13_ = other.unknown13_;
      unknown14_ = other.unknown14_;
      unknown15_ = other.unknown15_;
      unknown16_ = other.unknown16_;
      unknown17_ = other.unknown17_;
      unknown18_ = other.unknown18_;
      unknown19_ = other.unknown19_;
      unknown110_ = other.unknown110_;
      unknown111_ = other.unknown111_;
      unknown112_ = other.unknown112_;
      unknown113_ = other.unknown113_;
      unknown114_ = other.unknown114_;
      unknown115_ = other.unknown115_;
      defDark_ = other.defDark_;
      unknown20_ = other.unknown20_;
      unknown21_ = other.unknown21_;
      unknown22_ = other.unknown22_;
      unknown23_ = other.unknown23_;
      unknown24_ = other.unknown24_;
      unknown25_ = other.unknown25_;
      unknown26_ = other.unknown26_;
      unknown27_ = other.unknown27_;
      unknown28_ = other.unknown28_;
      unknown29_ = other.unknown29_;
      unknown210_ = other.unknown210_;
      unknown211_ = other.unknown211_;
      unknown212_ = other.unknown212_;
      unknown213_ = other.unknown213_;
      unknown214_ = other.unknown214_;
      unknown215_ = other.unknown215_;
      unknown216_ = other.unknown216_;
      unknown217_ = other.unknown217_;
      unknown218_ = other.unknown218_;
      unknown219_ = other.unknown219_;
      unknown220_ = other.unknown220_;
      unknown221_ = other.unknown221_;
      unknown222_ = other.unknown222_;
      unknown223_ = other.unknown223_;
      unknown224_ = other.unknown224_;
      unknown225_ = other.unknown225_;
      unknown226_ = other.unknown226_;
      unknown227_ = other.unknown227_;
      unknown228_ = other.unknown228_;
      unknown229_ = other.unknown229_;
      unknown230_ = other.unknown230_;
      unknown231_ = other.unknown231_;
      unknown232_ = other.unknown232_;
      unknown233_ = other.unknown233_;
      unknown234_ = other.unknown234_;
      unknown235_ = other.unknown235_;
      unknown236_ = other.unknown236_;
      unknown237_ = other.unknown237_;
      unknown238_ = other.unknown238_;
      unknown239_ = other.unknown239_;
      unknown240_ = other.unknown240_;
      unknown241_ = other.unknown241_;
      unknown242_ = other.unknown242_;
      unknown243_ = other.unknown243_;
      unknown244_ = other.unknown244_;
      unknown245_ = other.unknown245_;
      unknown246_ = other.unknown246_;
      unknown247_ = other.unknown247_;
      unknown248_ = other.unknown248_;
      unknown249_ = other.unknown249_;
      unknown250_ = other.unknown250_;
      unknown251_ = other.unknown251_;
      unknown252_ = other.unknown252_;
      unknown253_ = other.unknown253_;
      unknown254_ = other.unknown254_;
      unknown255_ = other.unknown255_;
      unknown256_ = other.unknown256_;
      unknown257_ = other.unknown257_;
      unknown258_ = other.unknown258_;
      unknown259_ = other.unknown259_;
      unknown260_ = other.unknown260_;
      unknown261_ = other.unknown261_;
      unknown262_ = other.unknown262_;
      unknown263_ = other.unknown263_;
      phys_ = other.phys_;
      thrust_ = other.thrust_;
      strike_ = other.strike_;
      slash_ = other.slash_;
      magic_ = other.magic_;
      fire_ = other.fire_;
      lightning_ = other.lightning_;
      dark_ = other.dark_;
    }

    public NpcParam Clone() {
      return new NpcParam(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Offset" field.</summary>
    public const int OffsetFieldNumber = 4;
    private int offset_;
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "BehaviorVariationId" field.</summary>
    public const int BehaviorVariationIdFieldNumber = 5;
    private int behaviorVariationId_;
    public int BehaviorVariationId {
      get { return behaviorVariationId_; }
      set {
        behaviorVariationId_ = value;
      }
    }

    /// <summary>Field number for the "AiThinkId" field.</summary>
    public const int AiThinkIdFieldNumber = 6;
    private int aiThinkId_;
    public int AiThinkId {
      get { return aiThinkId_; }
      set {
        aiThinkId_ = value;
      }
    }

    /// <summary>Field number for the "NameId" field.</summary>
    public const int NameIdFieldNumber = 7;
    private int nameId_;
    public int NameId {
      get { return nameId_; }
      set {
        nameId_ = value;
      }
    }

    /// <summary>Field number for the "TurnVelocity" field.</summary>
    public const int TurnVelocityFieldNumber = 8;
    private float turnVelocity_;
    public float TurnVelocity {
      get { return turnVelocity_; }
      set {
        turnVelocity_ = value;
      }
    }

    /// <summary>Field number for the "HitHeight" field.</summary>
    public const int HitHeightFieldNumber = 9;
    private float hitHeight_;
    public float HitHeight {
      get { return hitHeight_; }
      set {
        hitHeight_ = value;
      }
    }

    /// <summary>Field number for the "HitRadius" field.</summary>
    public const int HitRadiusFieldNumber = 10;
    private float hitRadius_;
    public float HitRadius {
      get { return hitRadius_; }
      set {
        hitRadius_ = value;
      }
    }

    /// <summary>Field number for the "Weight" field.</summary>
    public const int WeightFieldNumber = 11;
    private uint weight_;
    public uint Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "HitYOffset" field.</summary>
    public const int HitYOffsetFieldNumber = 12;
    private float hitYOffset_;
    public float HitYOffset {
      get { return hitYOffset_; }
      set {
        hitYOffset_ = value;
      }
    }

    /// <summary>Field number for the "Hp" field.</summary>
    public const int HpFieldNumber = 13;
    private uint hp_;
    public uint Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "Mp" field.</summary>
    public const int MpFieldNumber = 14;
    private uint mp_;
    public uint Mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    /// <summary>Field number for the "GetSoul" field.</summary>
    public const int GetSoulFieldNumber = 15;
    private uint getSoul_;
    public uint GetSoul {
      get { return getSoul_; }
      set {
        getSoul_ = value;
      }
    }

    /// <summary>Field number for the "ItemLotId_1" field.</summary>
    public const int ItemLotId1FieldNumber = 16;
    private int itemLotId1_;
    public int ItemLotId1 {
      get { return itemLotId1_; }
      set {
        itemLotId1_ = value;
      }
    }

    /// <summary>Field number for the "ItemLotId_2" field.</summary>
    public const int ItemLotId2FieldNumber = 17;
    private int itemLotId2_;
    public int ItemLotId2 {
      get { return itemLotId2_; }
      set {
        itemLotId2_ = value;
      }
    }

    /// <summary>Field number for the "ItemLotId_3" field.</summary>
    public const int ItemLotId3FieldNumber = 18;
    private int itemLotId3_;
    public int ItemLotId3 {
      get { return itemLotId3_; }
      set {
        itemLotId3_ = value;
      }
    }

    /// <summary>Field number for the "ItemLotId_4" field.</summary>
    public const int ItemLotId4FieldNumber = 19;
    private int itemLotId4_;
    public int ItemLotId4 {
      get { return itemLotId4_; }
      set {
        itemLotId4_ = value;
      }
    }

    /// <summary>Field number for the "ItemLotId_5" field.</summary>
    public const int ItemLotId5FieldNumber = 20;
    private int itemLotId5_;
    public int ItemLotId5 {
      get { return itemLotId5_; }
      set {
        itemLotId5_ = value;
      }
    }

    /// <summary>Field number for the "ItemLotId_6" field.</summary>
    public const int ItemLotId6FieldNumber = 21;
    private int itemLotId6_;
    public int ItemLotId6 {
      get { return itemLotId6_; }
      set {
        itemLotId6_ = value;
      }
    }

    /// <summary>Field number for the "HumanityLotId" field.</summary>
    public const int HumanityLotIdFieldNumber = 22;
    private int humanityLotId_;
    public int HumanityLotId {
      get { return humanityLotId_; }
      set {
        humanityLotId_ = value;
      }
    }

    /// <summary>Field number for the "SpEffectID0" field.</summary>
    public const int SpEffectID0FieldNumber = 23;
    private int spEffectID0_;
    public int SpEffectID0 {
      get { return spEffectID0_; }
      set {
        spEffectID0_ = value;
      }
    }

    /// <summary>Field number for the "SpEffectID1" field.</summary>
    public const int SpEffectID1FieldNumber = 24;
    private int spEffectID1_;
    public int SpEffectID1 {
      get { return spEffectID1_; }
      set {
        spEffectID1_ = value;
      }
    }

    /// <summary>Field number for the "SpEffectID2" field.</summary>
    public const int SpEffectID2FieldNumber = 25;
    private int spEffectID2_;
    public int SpEffectID2 {
      get { return spEffectID2_; }
      set {
        spEffectID2_ = value;
      }
    }

    /// <summary>Field number for the "SpEffectID3" field.</summary>
    public const int SpEffectID3FieldNumber = 26;
    private int spEffectID3_;
    public int SpEffectID3 {
      get { return spEffectID3_; }
      set {
        spEffectID3_ = value;
      }
    }

    /// <summary>Field number for the "SpEffectID4" field.</summary>
    public const int SpEffectID4FieldNumber = 27;
    private int spEffectID4_;
    public int SpEffectID4 {
      get { return spEffectID4_; }
      set {
        spEffectID4_ = value;
      }
    }

    /// <summary>Field number for the "SpEffectID5" field.</summary>
    public const int SpEffectID5FieldNumber = 28;
    private int spEffectID5_;
    public int SpEffectID5 {
      get { return spEffectID5_; }
      set {
        spEffectID5_ = value;
      }
    }

    /// <summary>Field number for the "SpEffectID6" field.</summary>
    public const int SpEffectID6FieldNumber = 29;
    private int spEffectID6_;
    public int SpEffectID6 {
      get { return spEffectID6_; }
      set {
        spEffectID6_ = value;
      }
    }

    /// <summary>Field number for the "SpEffectID7" field.</summary>
    public const int SpEffectID7FieldNumber = 30;
    private int spEffectID7_;
    public int SpEffectID7 {
      get { return spEffectID7_; }
      set {
        spEffectID7_ = value;
      }
    }

    /// <summary>Field number for the "GameClearSpEffectID" field.</summary>
    public const int GameClearSpEffectIDFieldNumber = 31;
    private int gameClearSpEffectID_;
    public int GameClearSpEffectID {
      get { return gameClearSpEffectID_; }
      set {
        gameClearSpEffectID_ = value;
      }
    }

    /// <summary>Field number for the "PhysGuardCutRate" field.</summary>
    public const int PhysGuardCutRateFieldNumber = 32;
    private float physGuardCutRate_;
    public float PhysGuardCutRate {
      get { return physGuardCutRate_; }
      set {
        physGuardCutRate_ = value;
      }
    }

    /// <summary>Field number for the "MagGuardCutRate" field.</summary>
    public const int MagGuardCutRateFieldNumber = 33;
    private float magGuardCutRate_;
    public float MagGuardCutRate {
      get { return magGuardCutRate_; }
      set {
        magGuardCutRate_ = value;
      }
    }

    /// <summary>Field number for the "FireGuardCutRate" field.</summary>
    public const int FireGuardCutRateFieldNumber = 34;
    private float fireGuardCutRate_;
    public float FireGuardCutRate {
      get { return fireGuardCutRate_; }
      set {
        fireGuardCutRate_ = value;
      }
    }

    /// <summary>Field number for the "ThunGuardCutRate" field.</summary>
    public const int ThunGuardCutRateFieldNumber = 35;
    private float thunGuardCutRate_;
    public float ThunGuardCutRate {
      get { return thunGuardCutRate_; }
      set {
        thunGuardCutRate_ = value;
      }
    }

    /// <summary>Field number for the "AnimIdOffset" field.</summary>
    public const int AnimIdOffsetFieldNumber = 36;
    private int animIdOffset_;
    public int AnimIdOffset {
      get { return animIdOffset_; }
      set {
        animIdOffset_ = value;
      }
    }

    /// <summary>Field number for the "MoveAnimId" field.</summary>
    public const int MoveAnimIdFieldNumber = 37;
    private int moveAnimId_;
    public int MoveAnimId {
      get { return moveAnimId_; }
      set {
        moveAnimId_ = value;
      }
    }

    /// <summary>Field number for the "SpMoveAnimId1" field.</summary>
    public const int SpMoveAnimId1FieldNumber = 38;
    private int spMoveAnimId1_;
    public int SpMoveAnimId1 {
      get { return spMoveAnimId1_; }
      set {
        spMoveAnimId1_ = value;
      }
    }

    /// <summary>Field number for the "SpMoveAnimId2" field.</summary>
    public const int SpMoveAnimId2FieldNumber = 39;
    private int spMoveAnimId2_;
    public int SpMoveAnimId2 {
      get { return spMoveAnimId2_; }
      set {
        spMoveAnimId2_ = value;
      }
    }

    /// <summary>Field number for the "NetworkWarpDist" field.</summary>
    public const int NetworkWarpDistFieldNumber = 40;
    private float networkWarpDist_;
    public float NetworkWarpDist {
      get { return networkWarpDist_; }
      set {
        networkWarpDist_ = value;
      }
    }

    /// <summary>Field number for the "DbgBehaviorR1" field.</summary>
    public const int DbgBehaviorR1FieldNumber = 41;
    private int dbgBehaviorR1_;
    public int DbgBehaviorR1 {
      get { return dbgBehaviorR1_; }
      set {
        dbgBehaviorR1_ = value;
      }
    }

    /// <summary>Field number for the "DbgBehaviorL1" field.</summary>
    public const int DbgBehaviorL1FieldNumber = 42;
    private int dbgBehaviorL1_;
    public int DbgBehaviorL1 {
      get { return dbgBehaviorL1_; }
      set {
        dbgBehaviorL1_ = value;
      }
    }

    /// <summary>Field number for the "DbgBehaviorR2" field.</summary>
    public const int DbgBehaviorR2FieldNumber = 43;
    private int dbgBehaviorR2_;
    public int DbgBehaviorR2 {
      get { return dbgBehaviorR2_; }
      set {
        dbgBehaviorR2_ = value;
      }
    }

    /// <summary>Field number for the "DbgBehaviorL2" field.</summary>
    public const int DbgBehaviorL2FieldNumber = 44;
    private int dbgBehaviorL2_;
    public int DbgBehaviorL2 {
      get { return dbgBehaviorL2_; }
      set {
        dbgBehaviorL2_ = value;
      }
    }

    /// <summary>Field number for the "DbgBehaviorRL" field.</summary>
    public const int DbgBehaviorRLFieldNumber = 45;
    private int dbgBehaviorRL_;
    public int DbgBehaviorRL {
      get { return dbgBehaviorRL_; }
      set {
        dbgBehaviorRL_ = value;
      }
    }

    /// <summary>Field number for the "DbgBehaviorRR" field.</summary>
    public const int DbgBehaviorRRFieldNumber = 46;
    private int dbgBehaviorRR_;
    public int DbgBehaviorRR {
      get { return dbgBehaviorRR_; }
      set {
        dbgBehaviorRR_ = value;
      }
    }

    /// <summary>Field number for the "DbgBehaviorRD" field.</summary>
    public const int DbgBehaviorRDFieldNumber = 47;
    private int dbgBehaviorRD_;
    public int DbgBehaviorRD {
      get { return dbgBehaviorRD_; }
      set {
        dbgBehaviorRD_ = value;
      }
    }

    /// <summary>Field number for the "DbgBehaviorRU" field.</summary>
    public const int DbgBehaviorRUFieldNumber = 48;
    private int dbgBehaviorRU_;
    public int DbgBehaviorRU {
      get { return dbgBehaviorRU_; }
      set {
        dbgBehaviorRU_ = value;
      }
    }

    /// <summary>Field number for the "DbgBehaviorLL" field.</summary>
    public const int DbgBehaviorLLFieldNumber = 49;
    private int dbgBehaviorLL_;
    public int DbgBehaviorLL {
      get { return dbgBehaviorLL_; }
      set {
        dbgBehaviorLL_ = value;
      }
    }

    /// <summary>Field number for the "DbgBehaviorLR" field.</summary>
    public const int DbgBehaviorLRFieldNumber = 50;
    private int dbgBehaviorLR_;
    public int DbgBehaviorLR {
      get { return dbgBehaviorLR_; }
      set {
        dbgBehaviorLR_ = value;
      }
    }

    /// <summary>Field number for the "DbgBehaviorLD" field.</summary>
    public const int DbgBehaviorLDFieldNumber = 51;
    private int dbgBehaviorLD_;
    public int DbgBehaviorLD {
      get { return dbgBehaviorLD_; }
      set {
        dbgBehaviorLD_ = value;
      }
    }

    /// <summary>Field number for the "DbgBehaviorLU" field.</summary>
    public const int DbgBehaviorLUFieldNumber = 52;
    private int dbgBehaviorLU_;
    public int DbgBehaviorLU {
      get { return dbgBehaviorLU_; }
      set {
        dbgBehaviorLU_ = value;
      }
    }

    /// <summary>Field number for the "AnimIdOffset2" field.</summary>
    public const int AnimIdOffset2FieldNumber = 53;
    private int animIdOffset2_;
    public int AnimIdOffset2 {
      get { return animIdOffset2_; }
      set {
        animIdOffset2_ = value;
      }
    }

    /// <summary>Field number for the "PartsDamageRate1" field.</summary>
    public const int PartsDamageRate1FieldNumber = 54;
    private float partsDamageRate1_;
    public float PartsDamageRate1 {
      get { return partsDamageRate1_; }
      set {
        partsDamageRate1_ = value;
      }
    }

    /// <summary>Field number for the "PartsDamageRate2" field.</summary>
    public const int PartsDamageRate2FieldNumber = 55;
    private float partsDamageRate2_;
    public float PartsDamageRate2 {
      get { return partsDamageRate2_; }
      set {
        partsDamageRate2_ = value;
      }
    }

    /// <summary>Field number for the "PartsDamageRate3" field.</summary>
    public const int PartsDamageRate3FieldNumber = 56;
    private float partsDamageRate3_;
    public float PartsDamageRate3 {
      get { return partsDamageRate3_; }
      set {
        partsDamageRate3_ = value;
      }
    }

    /// <summary>Field number for the "PartsDamageRate4" field.</summary>
    public const int PartsDamageRate4FieldNumber = 57;
    private float partsDamageRate4_;
    public float PartsDamageRate4 {
      get { return partsDamageRate4_; }
      set {
        partsDamageRate4_ = value;
      }
    }

    /// <summary>Field number for the "PartsDamageRate5" field.</summary>
    public const int PartsDamageRate5FieldNumber = 58;
    private float partsDamageRate5_;
    public float PartsDamageRate5 {
      get { return partsDamageRate5_; }
      set {
        partsDamageRate5_ = value;
      }
    }

    /// <summary>Field number for the "PartsDamageRate6" field.</summary>
    public const int PartsDamageRate6FieldNumber = 59;
    private float partsDamageRate6_;
    public float PartsDamageRate6 {
      get { return partsDamageRate6_; }
      set {
        partsDamageRate6_ = value;
      }
    }

    /// <summary>Field number for the "PartsDamageRate7" field.</summary>
    public const int PartsDamageRate7FieldNumber = 60;
    private float partsDamageRate7_;
    public float PartsDamageRate7 {
      get { return partsDamageRate7_; }
      set {
        partsDamageRate7_ = value;
      }
    }

    /// <summary>Field number for the "PartsDamageRate8" field.</summary>
    public const int PartsDamageRate8FieldNumber = 61;
    private float partsDamageRate8_;
    public float PartsDamageRate8 {
      get { return partsDamageRate8_; }
      set {
        partsDamageRate8_ = value;
      }
    }

    /// <summary>Field number for the "WeakPartsDamageRate" field.</summary>
    public const int WeakPartsDamageRateFieldNumber = 62;
    private float weakPartsDamageRate_;
    public float WeakPartsDamageRate {
      get { return weakPartsDamageRate_; }
      set {
        weakPartsDamageRate_ = value;
      }
    }

    /// <summary>Field number for the "SuperArmorRecoverCorrection" field.</summary>
    public const int SuperArmorRecoverCorrectionFieldNumber = 63;
    private float superArmorRecoverCorrection_;
    public float SuperArmorRecoverCorrection {
      get { return superArmorRecoverCorrection_; }
      set {
        superArmorRecoverCorrection_ = value;
      }
    }

    /// <summary>Field number for the "SuperArmorBrakeKnockbackDist" field.</summary>
    public const int SuperArmorBrakeKnockbackDistFieldNumber = 64;
    private float superArmorBrakeKnockbackDist_;
    public float SuperArmorBrakeKnockbackDist {
      get { return superArmorBrakeKnockbackDist_; }
      set {
        superArmorBrakeKnockbackDist_ = value;
      }
    }

    /// <summary>Field number for the "Stamina" field.</summary>
    public const int StaminaFieldNumber = 65;
    private uint stamina_;
    public uint Stamina {
      get { return stamina_; }
      set {
        stamina_ = value;
      }
    }

    /// <summary>Field number for the "StaminaRecoverBaseVel" field.</summary>
    public const int StaminaRecoverBaseVelFieldNumber = 66;
    private uint staminaRecoverBaseVel_;
    public uint StaminaRecoverBaseVel {
      get { return staminaRecoverBaseVel_; }
      set {
        staminaRecoverBaseVel_ = value;
      }
    }

    /// <summary>Field number for the "Def_phys" field.</summary>
    public const int DefPhysFieldNumber = 67;
    private int defPhys_;
    public int DefPhys {
      get { return defPhys_; }
      set {
        defPhys_ = value;
      }
    }

    /// <summary>Field number for the "Def_slash" field.</summary>
    public const int DefSlashFieldNumber = 68;
    private int defSlash_;
    public int DefSlash {
      get { return defSlash_; }
      set {
        defSlash_ = value;
      }
    }

    /// <summary>Field number for the "Def_blow" field.</summary>
    public const int DefBlowFieldNumber = 69;
    private int defBlow_;
    public int DefBlow {
      get { return defBlow_; }
      set {
        defBlow_ = value;
      }
    }

    /// <summary>Field number for the "Def_thrust" field.</summary>
    public const int DefThrustFieldNumber = 70;
    private int defThrust_;
    public int DefThrust {
      get { return defThrust_; }
      set {
        defThrust_ = value;
      }
    }

    /// <summary>Field number for the "Def_mag" field.</summary>
    public const int DefMagFieldNumber = 71;
    private int defMag_;
    public int DefMag {
      get { return defMag_; }
      set {
        defMag_ = value;
      }
    }

    /// <summary>Field number for the "Def_fire" field.</summary>
    public const int DefFireFieldNumber = 72;
    private int defFire_;
    public int DefFire {
      get { return defFire_; }
      set {
        defFire_ = value;
      }
    }

    /// <summary>Field number for the "Def_thun" field.</summary>
    public const int DefThunFieldNumber = 73;
    private int defThun_;
    public int DefThun {
      get { return defThun_; }
      set {
        defThun_ = value;
      }
    }

    /// <summary>Field number for the "DefFlickPower" field.</summary>
    public const int DefFlickPowerFieldNumber = 74;
    private uint defFlickPower_;
    public uint DefFlickPower {
      get { return defFlickPower_; }
      set {
        defFlickPower_ = value;
      }
    }

    /// <summary>Field number for the "ResistPoison" field.</summary>
    public const int ResistPoisonFieldNumber = 75;
    private uint resistPoison_;
    public uint ResistPoison {
      get { return resistPoison_; }
      set {
        resistPoison_ = value;
      }
    }

    /// <summary>Field number for the "ResistDisease" field.</summary>
    public const int ResistDiseaseFieldNumber = 76;
    private uint resistDisease_;
    public uint ResistDisease {
      get { return resistDisease_; }
      set {
        resistDisease_ = value;
      }
    }

    /// <summary>Field number for the "ResistBleed" field.</summary>
    public const int ResistBleedFieldNumber = 77;
    private uint resistBleed_;
    public uint ResistBleed {
      get { return resistBleed_; }
      set {
        resistBleed_ = value;
      }
    }

    /// <summary>Field number for the "ResistCurse" field.</summary>
    public const int ResistCurseFieldNumber = 78;
    private uint resistCurse_;
    public uint ResistCurse {
      get { return resistCurse_; }
      set {
        resistCurse_ = value;
      }
    }

    /// <summary>Field number for the "GhostModelId" field.</summary>
    public const int GhostModelIdFieldNumber = 79;
    private int ghostModelId_;
    public int GhostModelId {
      get { return ghostModelId_; }
      set {
        ghostModelId_ = value;
      }
    }

    /// <summary>Field number for the "NormalChangeResourceId" field.</summary>
    public const int NormalChangeResourceIdFieldNumber = 80;
    private int normalChangeResourceId_;
    public int NormalChangeResourceId {
      get { return normalChangeResourceId_; }
      set {
        normalChangeResourceId_ = value;
      }
    }

    /// <summary>Field number for the "GuardAngle" field.</summary>
    public const int GuardAngleFieldNumber = 81;
    private int guardAngle_;
    public int GuardAngle {
      get { return guardAngle_; }
      set {
        guardAngle_ = value;
      }
    }

    /// <summary>Field number for the "SlashGuardCutRate" field.</summary>
    public const int SlashGuardCutRateFieldNumber = 82;
    private int slashGuardCutRate_;
    public int SlashGuardCutRate {
      get { return slashGuardCutRate_; }
      set {
        slashGuardCutRate_ = value;
      }
    }

    /// <summary>Field number for the "BlowGuardCutRate" field.</summary>
    public const int BlowGuardCutRateFieldNumber = 83;
    private int blowGuardCutRate_;
    public int BlowGuardCutRate {
      get { return blowGuardCutRate_; }
      set {
        blowGuardCutRate_ = value;
      }
    }

    /// <summary>Field number for the "ThrustGuardCutRate" field.</summary>
    public const int ThrustGuardCutRateFieldNumber = 84;
    private int thrustGuardCutRate_;
    public int ThrustGuardCutRate {
      get { return thrustGuardCutRate_; }
      set {
        thrustGuardCutRate_ = value;
      }
    }

    /// <summary>Field number for the "SuperArmorDurability" field.</summary>
    public const int SuperArmorDurabilityFieldNumber = 85;
    private int superArmorDurability_;
    public int SuperArmorDurability {
      get { return superArmorDurability_; }
      set {
        superArmorDurability_ = value;
      }
    }

    /// <summary>Field number for the "NormalChangeTexChrId" field.</summary>
    public const int NormalChangeTexChrIdFieldNumber = 86;
    private int normalChangeTexChrId_;
    public int NormalChangeTexChrId {
      get { return normalChangeTexChrId_; }
      set {
        normalChangeTexChrId_ = value;
      }
    }

    /// <summary>Field number for the "DropType" field.</summary>
    public const int DropTypeFieldNumber = 87;
    private uint dropType_;
    public uint DropType {
      get { return dropType_; }
      set {
        dropType_ = value;
      }
    }

    /// <summary>Field number for the "KnockbackRate" field.</summary>
    public const int KnockbackRateFieldNumber = 88;
    private uint knockbackRate_;
    public uint KnockbackRate {
      get { return knockbackRate_; }
      set {
        knockbackRate_ = value;
      }
    }

    /// <summary>Field number for the "KnockbackParamId" field.</summary>
    public const int KnockbackParamIdFieldNumber = 89;
    private uint knockbackParamId_;
    public uint KnockbackParamId {
      get { return knockbackParamId_; }
      set {
        knockbackParamId_ = value;
      }
    }

    /// <summary>Field number for the "FallDamageDump" field.</summary>
    public const int FallDamageDumpFieldNumber = 90;
    private uint fallDamageDump_;
    public uint FallDamageDump {
      get { return fallDamageDump_; }
      set {
        fallDamageDump_ = value;
      }
    }

    /// <summary>Field number for the "StaminaGuardDef" field.</summary>
    public const int StaminaGuardDefFieldNumber = 91;
    private uint staminaGuardDef_;
    public uint StaminaGuardDef {
      get { return staminaGuardDef_; }
      set {
        staminaGuardDef_ = value;
      }
    }

    /// <summary>Field number for the "PcAttrB" field.</summary>
    public const int PcAttrBFieldNumber = 92;
    private uint pcAttrB_;
    public uint PcAttrB {
      get { return pcAttrB_; }
      set {
        pcAttrB_ = value;
      }
    }

    /// <summary>Field number for the "PcAttrW" field.</summary>
    public const int PcAttrWFieldNumber = 93;
    private uint pcAttrW_;
    public uint PcAttrW {
      get { return pcAttrW_; }
      set {
        pcAttrW_ = value;
      }
    }

    /// <summary>Field number for the "PcAttrL" field.</summary>
    public const int PcAttrLFieldNumber = 94;
    private uint pcAttrL_;
    public uint PcAttrL {
      get { return pcAttrL_; }
      set {
        pcAttrL_ = value;
      }
    }

    /// <summary>Field number for the "PcAttrR" field.</summary>
    public const int PcAttrRFieldNumber = 95;
    private uint pcAttrR_;
    public uint PcAttrR {
      get { return pcAttrR_; }
      set {
        pcAttrR_ = value;
      }
    }

    /// <summary>Field number for the "AreaAttrB" field.</summary>
    public const int AreaAttrBFieldNumber = 96;
    private uint areaAttrB_;
    public uint AreaAttrB {
      get { return areaAttrB_; }
      set {
        areaAttrB_ = value;
      }
    }

    /// <summary>Field number for the "AreaAttrW" field.</summary>
    public const int AreaAttrWFieldNumber = 97;
    private uint areaAttrW_;
    public uint AreaAttrW {
      get { return areaAttrW_; }
      set {
        areaAttrW_ = value;
      }
    }

    /// <summary>Field number for the "AreaAttrL" field.</summary>
    public const int AreaAttrLFieldNumber = 98;
    private uint areaAttrL_;
    public uint AreaAttrL {
      get { return areaAttrL_; }
      set {
        areaAttrL_ = value;
      }
    }

    /// <summary>Field number for the "AreaAttrR" field.</summary>
    public const int AreaAttrRFieldNumber = 99;
    private uint areaAttrR_;
    public uint AreaAttrR {
      get { return areaAttrR_; }
      set {
        areaAttrR_ = value;
      }
    }

    /// <summary>Field number for the "MpRecoverBaseVel" field.</summary>
    public const int MpRecoverBaseVelFieldNumber = 100;
    private uint mpRecoverBaseVel_;
    public uint MpRecoverBaseVel {
      get { return mpRecoverBaseVel_; }
      set {
        mpRecoverBaseVel_ = value;
      }
    }

    /// <summary>Field number for the "FlickDamageCutRate" field.</summary>
    public const int FlickDamageCutRateFieldNumber = 101;
    private uint flickDamageCutRate_;
    public uint FlickDamageCutRate {
      get { return flickDamageCutRate_; }
      set {
        flickDamageCutRate_ = value;
      }
    }

    /// <summary>Field number for the "DefaultLodParamId" field.</summary>
    public const int DefaultLodParamIdFieldNumber = 102;
    private int defaultLodParamId_;
    public int DefaultLodParamId {
      get { return defaultLodParamId_; }
      set {
        defaultLodParamId_ = value;
      }
    }

    /// <summary>Field number for the "DrawType" field.</summary>
    public const int DrawTypeFieldNumber = 103;
    private uint drawType_;
    public uint DrawType {
      get { return drawType_; }
      set {
        drawType_ = value;
      }
    }

    /// <summary>Field number for the "NpcType" field.</summary>
    public const int NpcTypeFieldNumber = 104;
    private uint npcType_;
    public uint NpcType {
      get { return npcType_; }
      set {
        npcType_ = value;
      }
    }

    /// <summary>Field number for the "TeamType" field.</summary>
    public const int TeamTypeFieldNumber = 105;
    private uint teamType_;
    public uint TeamType {
      get { return teamType_; }
      set {
        teamType_ = value;
      }
    }

    /// <summary>Field number for the "MoveType" field.</summary>
    public const int MoveTypeFieldNumber = 106;
    private uint moveType_;
    public uint MoveType {
      get { return moveType_; }
      set {
        moveType_ = value;
      }
    }

    /// <summary>Field number for the "LockDist" field.</summary>
    public const int LockDistFieldNumber = 107;
    private uint lockDist_;
    public uint LockDist {
      get { return lockDist_; }
      set {
        lockDist_ = value;
      }
    }

    /// <summary>Field number for the "Material" field.</summary>
    public const int MaterialFieldNumber = 108;
    private uint material_;
    public uint Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "MaterialSfx" field.</summary>
    public const int MaterialSfxFieldNumber = 109;
    private uint materialSfx_;
    public uint MaterialSfx {
      get { return materialSfx_; }
      set {
        materialSfx_ = value;
      }
    }

    /// <summary>Field number for the "Material_weak" field.</summary>
    public const int MaterialWeakFieldNumber = 110;
    private uint materialWeak_;
    public uint MaterialWeak {
      get { return materialWeak_; }
      set {
        materialWeak_ = value;
      }
    }

    /// <summary>Field number for the "MaterialSfx_weak" field.</summary>
    public const int MaterialSfxWeakFieldNumber = 111;
    private uint materialSfxWeak_;
    public uint MaterialSfxWeak {
      get { return materialSfxWeak_; }
      set {
        materialSfxWeak_ = value;
      }
    }

    /// <summary>Field number for the "PartsDamageType" field.</summary>
    public const int PartsDamageTypeFieldNumber = 112;
    private uint partsDamageType_;
    public uint PartsDamageType {
      get { return partsDamageType_; }
      set {
        partsDamageType_ = value;
      }
    }

    /// <summary>Field number for the "MaxUndurationAng" field.</summary>
    public const int MaxUndurationAngFieldNumber = 113;
    private uint maxUndurationAng_;
    public uint MaxUndurationAng {
      get { return maxUndurationAng_; }
      set {
        maxUndurationAng_ = value;
      }
    }

    /// <summary>Field number for the "GuardLevel" field.</summary>
    public const int GuardLevelFieldNumber = 114;
    private int guardLevel_;
    public int GuardLevel {
      get { return guardLevel_; }
      set {
        guardLevel_ = value;
      }
    }

    /// <summary>Field number for the "BurnSfxType" field.</summary>
    public const int BurnSfxTypeFieldNumber = 115;
    private uint burnSfxType_;
    public uint BurnSfxType {
      get { return burnSfxType_; }
      set {
        burnSfxType_ = value;
      }
    }

    /// <summary>Field number for the "PoisonGuardResist" field.</summary>
    public const int PoisonGuardResistFieldNumber = 116;
    private int poisonGuardResist_;
    public int PoisonGuardResist {
      get { return poisonGuardResist_; }
      set {
        poisonGuardResist_ = value;
      }
    }

    /// <summary>Field number for the "DiseaseGuardResist" field.</summary>
    public const int DiseaseGuardResistFieldNumber = 117;
    private int diseaseGuardResist_;
    public int DiseaseGuardResist {
      get { return diseaseGuardResist_; }
      set {
        diseaseGuardResist_ = value;
      }
    }

    /// <summary>Field number for the "BloodGuardResist" field.</summary>
    public const int BloodGuardResistFieldNumber = 118;
    private int bloodGuardResist_;
    public int BloodGuardResist {
      get { return bloodGuardResist_; }
      set {
        bloodGuardResist_ = value;
      }
    }

    /// <summary>Field number for the "CurseGuardResist" field.</summary>
    public const int CurseGuardResistFieldNumber = 119;
    private int curseGuardResist_;
    public int CurseGuardResist {
      get { return curseGuardResist_; }
      set {
        curseGuardResist_ = value;
      }
    }

    /// <summary>Field number for the "ParryAttack" field.</summary>
    public const int ParryAttackFieldNumber = 120;
    private uint parryAttack_;
    public uint ParryAttack {
      get { return parryAttack_; }
      set {
        parryAttack_ = value;
      }
    }

    /// <summary>Field number for the "ParryDefense" field.</summary>
    public const int ParryDefenseFieldNumber = 121;
    private uint parryDefense_;
    public uint ParryDefense {
      get { return parryDefense_; }
      set {
        parryDefense_ = value;
      }
    }

    /// <summary>Field number for the "SfxSize" field.</summary>
    public const int SfxSizeFieldNumber = 122;
    private uint sfxSize_;
    public uint SfxSize {
      get { return sfxSize_; }
      set {
        sfxSize_ = value;
      }
    }

    /// <summary>Field number for the "PushOutCamRegionRadius" field.</summary>
    public const int PushOutCamRegionRadiusFieldNumber = 123;
    private uint pushOutCamRegionRadius_;
    public uint PushOutCamRegionRadius {
      get { return pushOutCamRegionRadius_; }
      set {
        pushOutCamRegionRadius_ = value;
      }
    }

    /// <summary>Field number for the "HitStopType" field.</summary>
    public const int HitStopTypeFieldNumber = 124;
    private uint hitStopType_;
    public uint HitStopType {
      get { return hitStopType_; }
      set {
        hitStopType_ = value;
      }
    }

    /// <summary>Field number for the "LadderEndChkOffsetTop" field.</summary>
    public const int LadderEndChkOffsetTopFieldNumber = 125;
    private uint ladderEndChkOffsetTop_;
    public uint LadderEndChkOffsetTop {
      get { return ladderEndChkOffsetTop_; }
      set {
        ladderEndChkOffsetTop_ = value;
      }
    }

    /// <summary>Field number for the "LadderEndChkOffsetLow" field.</summary>
    public const int LadderEndChkOffsetLowFieldNumber = 126;
    private uint ladderEndChkOffsetLow_;
    public uint LadderEndChkOffsetLow {
      get { return ladderEndChkOffsetLow_; }
      set {
        ladderEndChkOffsetLow_ = value;
      }
    }

    /// <summary>Field number for the "BitFields0" field.</summary>
    public const int BitFields0FieldNumber = 127;
    private uint bitFields0_;
    public uint BitFields0 {
      get { return bitFields0_; }
      set {
        bitFields0_ = value;
      }
    }

    /// <summary>Field number for the "BitFields1" field.</summary>
    public const int BitFields1FieldNumber = 128;
    private uint bitFields1_;
    public uint BitFields1 {
      get { return bitFields1_; }
      set {
        bitFields1_ = value;
      }
    }

    /// <summary>Field number for the "BitFields2" field.</summary>
    public const int BitFields2FieldNumber = 129;
    private uint bitFields2_;
    public uint BitFields2 {
      get { return bitFields2_; }
      set {
        bitFields2_ = value;
      }
    }

    /// <summary>Field number for the "BitFields3" field.</summary>
    public const int BitFields3FieldNumber = 130;
    private uint bitFields3_;
    public uint BitFields3 {
      get { return bitFields3_; }
      set {
        bitFields3_ = value;
      }
    }

    /// <summary>Field number for the "BitFields4" field.</summary>
    public const int BitFields4FieldNumber = 131;
    private uint bitFields4_;
    public uint BitFields4 {
      get { return bitFields4_; }
      set {
        bitFields4_ = value;
      }
    }

    /// <summary>Field number for the "Unknown10" field.</summary>
    public const int Unknown10FieldNumber = 132;
    private uint unknown10_;
    public uint Unknown10 {
      get { return unknown10_; }
      set {
        unknown10_ = value;
      }
    }

    /// <summary>Field number for the "Unknown11" field.</summary>
    public const int Unknown11FieldNumber = 133;
    private uint unknown11_;
    public uint Unknown11 {
      get { return unknown11_; }
      set {
        unknown11_ = value;
      }
    }

    /// <summary>Field number for the "Unknown12" field.</summary>
    public const int Unknown12FieldNumber = 134;
    private uint unknown12_;
    public uint Unknown12 {
      get { return unknown12_; }
      set {
        unknown12_ = value;
      }
    }

    /// <summary>Field number for the "Unknown13" field.</summary>
    public const int Unknown13FieldNumber = 135;
    private uint unknown13_;
    public uint Unknown13 {
      get { return unknown13_; }
      set {
        unknown13_ = value;
      }
    }

    /// <summary>Field number for the "Unknown14" field.</summary>
    public const int Unknown14FieldNumber = 136;
    private uint unknown14_;
    public uint Unknown14 {
      get { return unknown14_; }
      set {
        unknown14_ = value;
      }
    }

    /// <summary>Field number for the "Unknown15" field.</summary>
    public const int Unknown15FieldNumber = 137;
    private uint unknown15_;
    public uint Unknown15 {
      get { return unknown15_; }
      set {
        unknown15_ = value;
      }
    }

    /// <summary>Field number for the "Unknown16" field.</summary>
    public const int Unknown16FieldNumber = 138;
    private uint unknown16_;
    public uint Unknown16 {
      get { return unknown16_; }
      set {
        unknown16_ = value;
      }
    }

    /// <summary>Field number for the "Unknown17" field.</summary>
    public const int Unknown17FieldNumber = 139;
    private uint unknown17_;
    public uint Unknown17 {
      get { return unknown17_; }
      set {
        unknown17_ = value;
      }
    }

    /// <summary>Field number for the "Unknown18" field.</summary>
    public const int Unknown18FieldNumber = 140;
    private uint unknown18_;
    public uint Unknown18 {
      get { return unknown18_; }
      set {
        unknown18_ = value;
      }
    }

    /// <summary>Field number for the "Unknown19" field.</summary>
    public const int Unknown19FieldNumber = 141;
    private uint unknown19_;
    public uint Unknown19 {
      get { return unknown19_; }
      set {
        unknown19_ = value;
      }
    }

    /// <summary>Field number for the "Unknown110" field.</summary>
    public const int Unknown110FieldNumber = 142;
    private uint unknown110_;
    public uint Unknown110 {
      get { return unknown110_; }
      set {
        unknown110_ = value;
      }
    }

    /// <summary>Field number for the "Unknown111" field.</summary>
    public const int Unknown111FieldNumber = 143;
    private uint unknown111_;
    public uint Unknown111 {
      get { return unknown111_; }
      set {
        unknown111_ = value;
      }
    }

    /// <summary>Field number for the "Unknown112" field.</summary>
    public const int Unknown112FieldNumber = 144;
    private uint unknown112_;
    public uint Unknown112 {
      get { return unknown112_; }
      set {
        unknown112_ = value;
      }
    }

    /// <summary>Field number for the "Unknown113" field.</summary>
    public const int Unknown113FieldNumber = 145;
    private uint unknown113_;
    public uint Unknown113 {
      get { return unknown113_; }
      set {
        unknown113_ = value;
      }
    }

    /// <summary>Field number for the "Unknown114" field.</summary>
    public const int Unknown114FieldNumber = 146;
    private uint unknown114_;
    public uint Unknown114 {
      get { return unknown114_; }
      set {
        unknown114_ = value;
      }
    }

    /// <summary>Field number for the "Unknown115" field.</summary>
    public const int Unknown115FieldNumber = 147;
    private uint unknown115_;
    public uint Unknown115 {
      get { return unknown115_; }
      set {
        unknown115_ = value;
      }
    }

    /// <summary>Field number for the "Def_dark" field.</summary>
    public const int DefDarkFieldNumber = 148;
    private int defDark_;
    public int DefDark {
      get { return defDark_; }
      set {
        defDark_ = value;
      }
    }

    /// <summary>Field number for the "Unknown20" field.</summary>
    public const int Unknown20FieldNumber = 149;
    private uint unknown20_;
    public uint Unknown20 {
      get { return unknown20_; }
      set {
        unknown20_ = value;
      }
    }

    /// <summary>Field number for the "Unknown21" field.</summary>
    public const int Unknown21FieldNumber = 150;
    private uint unknown21_;
    public uint Unknown21 {
      get { return unknown21_; }
      set {
        unknown21_ = value;
      }
    }

    /// <summary>Field number for the "Unknown22" field.</summary>
    public const int Unknown22FieldNumber = 151;
    private uint unknown22_;
    public uint Unknown22 {
      get { return unknown22_; }
      set {
        unknown22_ = value;
      }
    }

    /// <summary>Field number for the "Unknown23" field.</summary>
    public const int Unknown23FieldNumber = 152;
    private uint unknown23_;
    public uint Unknown23 {
      get { return unknown23_; }
      set {
        unknown23_ = value;
      }
    }

    /// <summary>Field number for the "Unknown24" field.</summary>
    public const int Unknown24FieldNumber = 153;
    private uint unknown24_;
    public uint Unknown24 {
      get { return unknown24_; }
      set {
        unknown24_ = value;
      }
    }

    /// <summary>Field number for the "Unknown25" field.</summary>
    public const int Unknown25FieldNumber = 154;
    private uint unknown25_;
    public uint Unknown25 {
      get { return unknown25_; }
      set {
        unknown25_ = value;
      }
    }

    /// <summary>Field number for the "Unknown26" field.</summary>
    public const int Unknown26FieldNumber = 155;
    private uint unknown26_;
    public uint Unknown26 {
      get { return unknown26_; }
      set {
        unknown26_ = value;
      }
    }

    /// <summary>Field number for the "Unknown27" field.</summary>
    public const int Unknown27FieldNumber = 156;
    private uint unknown27_;
    public uint Unknown27 {
      get { return unknown27_; }
      set {
        unknown27_ = value;
      }
    }

    /// <summary>Field number for the "Unknown28" field.</summary>
    public const int Unknown28FieldNumber = 157;
    private uint unknown28_;
    public uint Unknown28 {
      get { return unknown28_; }
      set {
        unknown28_ = value;
      }
    }

    /// <summary>Field number for the "Unknown29" field.</summary>
    public const int Unknown29FieldNumber = 158;
    private uint unknown29_;
    public uint Unknown29 {
      get { return unknown29_; }
      set {
        unknown29_ = value;
      }
    }

    /// <summary>Field number for the "Unknown210" field.</summary>
    public const int Unknown210FieldNumber = 159;
    private uint unknown210_;
    public uint Unknown210 {
      get { return unknown210_; }
      set {
        unknown210_ = value;
      }
    }

    /// <summary>Field number for the "Unknown211" field.</summary>
    public const int Unknown211FieldNumber = 160;
    private uint unknown211_;
    public uint Unknown211 {
      get { return unknown211_; }
      set {
        unknown211_ = value;
      }
    }

    /// <summary>Field number for the "Unknown212" field.</summary>
    public const int Unknown212FieldNumber = 161;
    private uint unknown212_;
    public uint Unknown212 {
      get { return unknown212_; }
      set {
        unknown212_ = value;
      }
    }

    /// <summary>Field number for the "Unknown213" field.</summary>
    public const int Unknown213FieldNumber = 162;
    private uint unknown213_;
    public uint Unknown213 {
      get { return unknown213_; }
      set {
        unknown213_ = value;
      }
    }

    /// <summary>Field number for the "Unknown214" field.</summary>
    public const int Unknown214FieldNumber = 163;
    private uint unknown214_;
    public uint Unknown214 {
      get { return unknown214_; }
      set {
        unknown214_ = value;
      }
    }

    /// <summary>Field number for the "Unknown215" field.</summary>
    public const int Unknown215FieldNumber = 164;
    private uint unknown215_;
    public uint Unknown215 {
      get { return unknown215_; }
      set {
        unknown215_ = value;
      }
    }

    /// <summary>Field number for the "Unknown216" field.</summary>
    public const int Unknown216FieldNumber = 165;
    private uint unknown216_;
    public uint Unknown216 {
      get { return unknown216_; }
      set {
        unknown216_ = value;
      }
    }

    /// <summary>Field number for the "Unknown217" field.</summary>
    public const int Unknown217FieldNumber = 166;
    private uint unknown217_;
    public uint Unknown217 {
      get { return unknown217_; }
      set {
        unknown217_ = value;
      }
    }

    /// <summary>Field number for the "Unknown218" field.</summary>
    public const int Unknown218FieldNumber = 167;
    private uint unknown218_;
    public uint Unknown218 {
      get { return unknown218_; }
      set {
        unknown218_ = value;
      }
    }

    /// <summary>Field number for the "Unknown219" field.</summary>
    public const int Unknown219FieldNumber = 168;
    private uint unknown219_;
    public uint Unknown219 {
      get { return unknown219_; }
      set {
        unknown219_ = value;
      }
    }

    /// <summary>Field number for the "Unknown220" field.</summary>
    public const int Unknown220FieldNumber = 169;
    private uint unknown220_;
    public uint Unknown220 {
      get { return unknown220_; }
      set {
        unknown220_ = value;
      }
    }

    /// <summary>Field number for the "Unknown221" field.</summary>
    public const int Unknown221FieldNumber = 170;
    private uint unknown221_;
    public uint Unknown221 {
      get { return unknown221_; }
      set {
        unknown221_ = value;
      }
    }

    /// <summary>Field number for the "Unknown222" field.</summary>
    public const int Unknown222FieldNumber = 171;
    private uint unknown222_;
    public uint Unknown222 {
      get { return unknown222_; }
      set {
        unknown222_ = value;
      }
    }

    /// <summary>Field number for the "Unknown223" field.</summary>
    public const int Unknown223FieldNumber = 172;
    private uint unknown223_;
    public uint Unknown223 {
      get { return unknown223_; }
      set {
        unknown223_ = value;
      }
    }

    /// <summary>Field number for the "Unknown224" field.</summary>
    public const int Unknown224FieldNumber = 173;
    private uint unknown224_;
    public uint Unknown224 {
      get { return unknown224_; }
      set {
        unknown224_ = value;
      }
    }

    /// <summary>Field number for the "Unknown225" field.</summary>
    public const int Unknown225FieldNumber = 174;
    private uint unknown225_;
    public uint Unknown225 {
      get { return unknown225_; }
      set {
        unknown225_ = value;
      }
    }

    /// <summary>Field number for the "Unknown226" field.</summary>
    public const int Unknown226FieldNumber = 175;
    private uint unknown226_;
    public uint Unknown226 {
      get { return unknown226_; }
      set {
        unknown226_ = value;
      }
    }

    /// <summary>Field number for the "Unknown227" field.</summary>
    public const int Unknown227FieldNumber = 176;
    private uint unknown227_;
    public uint Unknown227 {
      get { return unknown227_; }
      set {
        unknown227_ = value;
      }
    }

    /// <summary>Field number for the "Unknown228" field.</summary>
    public const int Unknown228FieldNumber = 177;
    private uint unknown228_;
    public uint Unknown228 {
      get { return unknown228_; }
      set {
        unknown228_ = value;
      }
    }

    /// <summary>Field number for the "Unknown229" field.</summary>
    public const int Unknown229FieldNumber = 178;
    private uint unknown229_;
    public uint Unknown229 {
      get { return unknown229_; }
      set {
        unknown229_ = value;
      }
    }

    /// <summary>Field number for the "Unknown230" field.</summary>
    public const int Unknown230FieldNumber = 179;
    private uint unknown230_;
    public uint Unknown230 {
      get { return unknown230_; }
      set {
        unknown230_ = value;
      }
    }

    /// <summary>Field number for the "Unknown231" field.</summary>
    public const int Unknown231FieldNumber = 180;
    private uint unknown231_;
    public uint Unknown231 {
      get { return unknown231_; }
      set {
        unknown231_ = value;
      }
    }

    /// <summary>Field number for the "Unknown232" field.</summary>
    public const int Unknown232FieldNumber = 181;
    private uint unknown232_;
    public uint Unknown232 {
      get { return unknown232_; }
      set {
        unknown232_ = value;
      }
    }

    /// <summary>Field number for the "Unknown233" field.</summary>
    public const int Unknown233FieldNumber = 182;
    private uint unknown233_;
    public uint Unknown233 {
      get { return unknown233_; }
      set {
        unknown233_ = value;
      }
    }

    /// <summary>Field number for the "Unknown234" field.</summary>
    public const int Unknown234FieldNumber = 183;
    private uint unknown234_;
    public uint Unknown234 {
      get { return unknown234_; }
      set {
        unknown234_ = value;
      }
    }

    /// <summary>Field number for the "Unknown235" field.</summary>
    public const int Unknown235FieldNumber = 184;
    private uint unknown235_;
    public uint Unknown235 {
      get { return unknown235_; }
      set {
        unknown235_ = value;
      }
    }

    /// <summary>Field number for the "Unknown236" field.</summary>
    public const int Unknown236FieldNumber = 185;
    private uint unknown236_;
    public uint Unknown236 {
      get { return unknown236_; }
      set {
        unknown236_ = value;
      }
    }

    /// <summary>Field number for the "Unknown237" field.</summary>
    public const int Unknown237FieldNumber = 186;
    private uint unknown237_;
    public uint Unknown237 {
      get { return unknown237_; }
      set {
        unknown237_ = value;
      }
    }

    /// <summary>Field number for the "Unknown238" field.</summary>
    public const int Unknown238FieldNumber = 187;
    private uint unknown238_;
    public uint Unknown238 {
      get { return unknown238_; }
      set {
        unknown238_ = value;
      }
    }

    /// <summary>Field number for the "Unknown239" field.</summary>
    public const int Unknown239FieldNumber = 188;
    private uint unknown239_;
    public uint Unknown239 {
      get { return unknown239_; }
      set {
        unknown239_ = value;
      }
    }

    /// <summary>Field number for the "Unknown240" field.</summary>
    public const int Unknown240FieldNumber = 189;
    private uint unknown240_;
    public uint Unknown240 {
      get { return unknown240_; }
      set {
        unknown240_ = value;
      }
    }

    /// <summary>Field number for the "Unknown241" field.</summary>
    public const int Unknown241FieldNumber = 190;
    private uint unknown241_;
    public uint Unknown241 {
      get { return unknown241_; }
      set {
        unknown241_ = value;
      }
    }

    /// <summary>Field number for the "Unknown242" field.</summary>
    public const int Unknown242FieldNumber = 191;
    private uint unknown242_;
    public uint Unknown242 {
      get { return unknown242_; }
      set {
        unknown242_ = value;
      }
    }

    /// <summary>Field number for the "Unknown243" field.</summary>
    public const int Unknown243FieldNumber = 192;
    private uint unknown243_;
    public uint Unknown243 {
      get { return unknown243_; }
      set {
        unknown243_ = value;
      }
    }

    /// <summary>Field number for the "Unknown244" field.</summary>
    public const int Unknown244FieldNumber = 193;
    private uint unknown244_;
    public uint Unknown244 {
      get { return unknown244_; }
      set {
        unknown244_ = value;
      }
    }

    /// <summary>Field number for the "Unknown245" field.</summary>
    public const int Unknown245FieldNumber = 194;
    private uint unknown245_;
    public uint Unknown245 {
      get { return unknown245_; }
      set {
        unknown245_ = value;
      }
    }

    /// <summary>Field number for the "Unknown246" field.</summary>
    public const int Unknown246FieldNumber = 195;
    private uint unknown246_;
    public uint Unknown246 {
      get { return unknown246_; }
      set {
        unknown246_ = value;
      }
    }

    /// <summary>Field number for the "Unknown247" field.</summary>
    public const int Unknown247FieldNumber = 196;
    private uint unknown247_;
    public uint Unknown247 {
      get { return unknown247_; }
      set {
        unknown247_ = value;
      }
    }

    /// <summary>Field number for the "Unknown248" field.</summary>
    public const int Unknown248FieldNumber = 197;
    private uint unknown248_;
    public uint Unknown248 {
      get { return unknown248_; }
      set {
        unknown248_ = value;
      }
    }

    /// <summary>Field number for the "Unknown249" field.</summary>
    public const int Unknown249FieldNumber = 198;
    private uint unknown249_;
    public uint Unknown249 {
      get { return unknown249_; }
      set {
        unknown249_ = value;
      }
    }

    /// <summary>Field number for the "Unknown250" field.</summary>
    public const int Unknown250FieldNumber = 199;
    private uint unknown250_;
    public uint Unknown250 {
      get { return unknown250_; }
      set {
        unknown250_ = value;
      }
    }

    /// <summary>Field number for the "Unknown251" field.</summary>
    public const int Unknown251FieldNumber = 200;
    private uint unknown251_;
    public uint Unknown251 {
      get { return unknown251_; }
      set {
        unknown251_ = value;
      }
    }

    /// <summary>Field number for the "Unknown252" field.</summary>
    public const int Unknown252FieldNumber = 201;
    private uint unknown252_;
    public uint Unknown252 {
      get { return unknown252_; }
      set {
        unknown252_ = value;
      }
    }

    /// <summary>Field number for the "Unknown253" field.</summary>
    public const int Unknown253FieldNumber = 202;
    private uint unknown253_;
    public uint Unknown253 {
      get { return unknown253_; }
      set {
        unknown253_ = value;
      }
    }

    /// <summary>Field number for the "Unknown254" field.</summary>
    public const int Unknown254FieldNumber = 203;
    private uint unknown254_;
    public uint Unknown254 {
      get { return unknown254_; }
      set {
        unknown254_ = value;
      }
    }

    /// <summary>Field number for the "Unknown255" field.</summary>
    public const int Unknown255FieldNumber = 204;
    private uint unknown255_;
    public uint Unknown255 {
      get { return unknown255_; }
      set {
        unknown255_ = value;
      }
    }

    /// <summary>Field number for the "Unknown256" field.</summary>
    public const int Unknown256FieldNumber = 205;
    private uint unknown256_;
    public uint Unknown256 {
      get { return unknown256_; }
      set {
        unknown256_ = value;
      }
    }

    /// <summary>Field number for the "Unknown257" field.</summary>
    public const int Unknown257FieldNumber = 206;
    private uint unknown257_;
    public uint Unknown257 {
      get { return unknown257_; }
      set {
        unknown257_ = value;
      }
    }

    /// <summary>Field number for the "Unknown258" field.</summary>
    public const int Unknown258FieldNumber = 207;
    private uint unknown258_;
    public uint Unknown258 {
      get { return unknown258_; }
      set {
        unknown258_ = value;
      }
    }

    /// <summary>Field number for the "Unknown259" field.</summary>
    public const int Unknown259FieldNumber = 208;
    private uint unknown259_;
    public uint Unknown259 {
      get { return unknown259_; }
      set {
        unknown259_ = value;
      }
    }

    /// <summary>Field number for the "Unknown260" field.</summary>
    public const int Unknown260FieldNumber = 209;
    private uint unknown260_;
    public uint Unknown260 {
      get { return unknown260_; }
      set {
        unknown260_ = value;
      }
    }

    /// <summary>Field number for the "Unknown261" field.</summary>
    public const int Unknown261FieldNumber = 210;
    private uint unknown261_;
    public uint Unknown261 {
      get { return unknown261_; }
      set {
        unknown261_ = value;
      }
    }

    /// <summary>Field number for the "Unknown262" field.</summary>
    public const int Unknown262FieldNumber = 211;
    private uint unknown262_;
    public uint Unknown262 {
      get { return unknown262_; }
      set {
        unknown262_ = value;
      }
    }

    /// <summary>Field number for the "Unknown263" field.</summary>
    public const int Unknown263FieldNumber = 212;
    private uint unknown263_;
    public uint Unknown263 {
      get { return unknown263_; }
      set {
        unknown263_ = value;
      }
    }

    /// <summary>Field number for the "Phys" field.</summary>
    public const int PhysFieldNumber = 213;
    private float phys_;
    public float Phys {
      get { return phys_; }
      set {
        phys_ = value;
      }
    }

    /// <summary>Field number for the "Thrust" field.</summary>
    public const int ThrustFieldNumber = 214;
    private float thrust_;
    public float Thrust {
      get { return thrust_; }
      set {
        thrust_ = value;
      }
    }

    /// <summary>Field number for the "Strike" field.</summary>
    public const int StrikeFieldNumber = 215;
    private float strike_;
    public float Strike {
      get { return strike_; }
      set {
        strike_ = value;
      }
    }

    /// <summary>Field number for the "Slash" field.</summary>
    public const int SlashFieldNumber = 216;
    private float slash_;
    public float Slash {
      get { return slash_; }
      set {
        slash_ = value;
      }
    }

    /// <summary>Field number for the "Magic" field.</summary>
    public const int MagicFieldNumber = 217;
    private float magic_;
    public float Magic {
      get { return magic_; }
      set {
        magic_ = value;
      }
    }

    /// <summary>Field number for the "Fire" field.</summary>
    public const int FireFieldNumber = 218;
    private float fire_;
    public float Fire {
      get { return fire_; }
      set {
        fire_ = value;
      }
    }

    /// <summary>Field number for the "Lightning" field.</summary>
    public const int LightningFieldNumber = 219;
    private float lightning_;
    public float Lightning {
      get { return lightning_; }
      set {
        lightning_ = value;
      }
    }

    /// <summary>Field number for the "Dark" field.</summary>
    public const int DarkFieldNumber = 220;
    private float dark_;
    public float Dark {
      get { return dark_; }
      set {
        dark_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as NpcParam);
    }

    public bool Equals(NpcParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Index != other.Index) return false;
      if (Offset != other.Offset) return false;
      if (BehaviorVariationId != other.BehaviorVariationId) return false;
      if (AiThinkId != other.AiThinkId) return false;
      if (NameId != other.NameId) return false;
      if (TurnVelocity != other.TurnVelocity) return false;
      if (HitHeight != other.HitHeight) return false;
      if (HitRadius != other.HitRadius) return false;
      if (Weight != other.Weight) return false;
      if (HitYOffset != other.HitYOffset) return false;
      if (Hp != other.Hp) return false;
      if (Mp != other.Mp) return false;
      if (GetSoul != other.GetSoul) return false;
      if (ItemLotId1 != other.ItemLotId1) return false;
      if (ItemLotId2 != other.ItemLotId2) return false;
      if (ItemLotId3 != other.ItemLotId3) return false;
      if (ItemLotId4 != other.ItemLotId4) return false;
      if (ItemLotId5 != other.ItemLotId5) return false;
      if (ItemLotId6 != other.ItemLotId6) return false;
      if (HumanityLotId != other.HumanityLotId) return false;
      if (SpEffectID0 != other.SpEffectID0) return false;
      if (SpEffectID1 != other.SpEffectID1) return false;
      if (SpEffectID2 != other.SpEffectID2) return false;
      if (SpEffectID3 != other.SpEffectID3) return false;
      if (SpEffectID4 != other.SpEffectID4) return false;
      if (SpEffectID5 != other.SpEffectID5) return false;
      if (SpEffectID6 != other.SpEffectID6) return false;
      if (SpEffectID7 != other.SpEffectID7) return false;
      if (GameClearSpEffectID != other.GameClearSpEffectID) return false;
      if (PhysGuardCutRate != other.PhysGuardCutRate) return false;
      if (MagGuardCutRate != other.MagGuardCutRate) return false;
      if (FireGuardCutRate != other.FireGuardCutRate) return false;
      if (ThunGuardCutRate != other.ThunGuardCutRate) return false;
      if (AnimIdOffset != other.AnimIdOffset) return false;
      if (MoveAnimId != other.MoveAnimId) return false;
      if (SpMoveAnimId1 != other.SpMoveAnimId1) return false;
      if (SpMoveAnimId2 != other.SpMoveAnimId2) return false;
      if (NetworkWarpDist != other.NetworkWarpDist) return false;
      if (DbgBehaviorR1 != other.DbgBehaviorR1) return false;
      if (DbgBehaviorL1 != other.DbgBehaviorL1) return false;
      if (DbgBehaviorR2 != other.DbgBehaviorR2) return false;
      if (DbgBehaviorL2 != other.DbgBehaviorL2) return false;
      if (DbgBehaviorRL != other.DbgBehaviorRL) return false;
      if (DbgBehaviorRR != other.DbgBehaviorRR) return false;
      if (DbgBehaviorRD != other.DbgBehaviorRD) return false;
      if (DbgBehaviorRU != other.DbgBehaviorRU) return false;
      if (DbgBehaviorLL != other.DbgBehaviorLL) return false;
      if (DbgBehaviorLR != other.DbgBehaviorLR) return false;
      if (DbgBehaviorLD != other.DbgBehaviorLD) return false;
      if (DbgBehaviorLU != other.DbgBehaviorLU) return false;
      if (AnimIdOffset2 != other.AnimIdOffset2) return false;
      if (PartsDamageRate1 != other.PartsDamageRate1) return false;
      if (PartsDamageRate2 != other.PartsDamageRate2) return false;
      if (PartsDamageRate3 != other.PartsDamageRate3) return false;
      if (PartsDamageRate4 != other.PartsDamageRate4) return false;
      if (PartsDamageRate5 != other.PartsDamageRate5) return false;
      if (PartsDamageRate6 != other.PartsDamageRate6) return false;
      if (PartsDamageRate7 != other.PartsDamageRate7) return false;
      if (PartsDamageRate8 != other.PartsDamageRate8) return false;
      if (WeakPartsDamageRate != other.WeakPartsDamageRate) return false;
      if (SuperArmorRecoverCorrection != other.SuperArmorRecoverCorrection) return false;
      if (SuperArmorBrakeKnockbackDist != other.SuperArmorBrakeKnockbackDist) return false;
      if (Stamina != other.Stamina) return false;
      if (StaminaRecoverBaseVel != other.StaminaRecoverBaseVel) return false;
      if (DefPhys != other.DefPhys) return false;
      if (DefSlash != other.DefSlash) return false;
      if (DefBlow != other.DefBlow) return false;
      if (DefThrust != other.DefThrust) return false;
      if (DefMag != other.DefMag) return false;
      if (DefFire != other.DefFire) return false;
      if (DefThun != other.DefThun) return false;
      if (DefFlickPower != other.DefFlickPower) return false;
      if (ResistPoison != other.ResistPoison) return false;
      if (ResistDisease != other.ResistDisease) return false;
      if (ResistBleed != other.ResistBleed) return false;
      if (ResistCurse != other.ResistCurse) return false;
      if (GhostModelId != other.GhostModelId) return false;
      if (NormalChangeResourceId != other.NormalChangeResourceId) return false;
      if (GuardAngle != other.GuardAngle) return false;
      if (SlashGuardCutRate != other.SlashGuardCutRate) return false;
      if (BlowGuardCutRate != other.BlowGuardCutRate) return false;
      if (ThrustGuardCutRate != other.ThrustGuardCutRate) return false;
      if (SuperArmorDurability != other.SuperArmorDurability) return false;
      if (NormalChangeTexChrId != other.NormalChangeTexChrId) return false;
      if (DropType != other.DropType) return false;
      if (KnockbackRate != other.KnockbackRate) return false;
      if (KnockbackParamId != other.KnockbackParamId) return false;
      if (FallDamageDump != other.FallDamageDump) return false;
      if (StaminaGuardDef != other.StaminaGuardDef) return false;
      if (PcAttrB != other.PcAttrB) return false;
      if (PcAttrW != other.PcAttrW) return false;
      if (PcAttrL != other.PcAttrL) return false;
      if (PcAttrR != other.PcAttrR) return false;
      if (AreaAttrB != other.AreaAttrB) return false;
      if (AreaAttrW != other.AreaAttrW) return false;
      if (AreaAttrL != other.AreaAttrL) return false;
      if (AreaAttrR != other.AreaAttrR) return false;
      if (MpRecoverBaseVel != other.MpRecoverBaseVel) return false;
      if (FlickDamageCutRate != other.FlickDamageCutRate) return false;
      if (DefaultLodParamId != other.DefaultLodParamId) return false;
      if (DrawType != other.DrawType) return false;
      if (NpcType != other.NpcType) return false;
      if (TeamType != other.TeamType) return false;
      if (MoveType != other.MoveType) return false;
      if (LockDist != other.LockDist) return false;
      if (Material != other.Material) return false;
      if (MaterialSfx != other.MaterialSfx) return false;
      if (MaterialWeak != other.MaterialWeak) return false;
      if (MaterialSfxWeak != other.MaterialSfxWeak) return false;
      if (PartsDamageType != other.PartsDamageType) return false;
      if (MaxUndurationAng != other.MaxUndurationAng) return false;
      if (GuardLevel != other.GuardLevel) return false;
      if (BurnSfxType != other.BurnSfxType) return false;
      if (PoisonGuardResist != other.PoisonGuardResist) return false;
      if (DiseaseGuardResist != other.DiseaseGuardResist) return false;
      if (BloodGuardResist != other.BloodGuardResist) return false;
      if (CurseGuardResist != other.CurseGuardResist) return false;
      if (ParryAttack != other.ParryAttack) return false;
      if (ParryDefense != other.ParryDefense) return false;
      if (SfxSize != other.SfxSize) return false;
      if (PushOutCamRegionRadius != other.PushOutCamRegionRadius) return false;
      if (HitStopType != other.HitStopType) return false;
      if (LadderEndChkOffsetTop != other.LadderEndChkOffsetTop) return false;
      if (LadderEndChkOffsetLow != other.LadderEndChkOffsetLow) return false;
      if (BitFields0 != other.BitFields0) return false;
      if (BitFields1 != other.BitFields1) return false;
      if (BitFields2 != other.BitFields2) return false;
      if (BitFields3 != other.BitFields3) return false;
      if (BitFields4 != other.BitFields4) return false;
      if (Unknown10 != other.Unknown10) return false;
      if (Unknown11 != other.Unknown11) return false;
      if (Unknown12 != other.Unknown12) return false;
      if (Unknown13 != other.Unknown13) return false;
      if (Unknown14 != other.Unknown14) return false;
      if (Unknown15 != other.Unknown15) return false;
      if (Unknown16 != other.Unknown16) return false;
      if (Unknown17 != other.Unknown17) return false;
      if (Unknown18 != other.Unknown18) return false;
      if (Unknown19 != other.Unknown19) return false;
      if (Unknown110 != other.Unknown110) return false;
      if (Unknown111 != other.Unknown111) return false;
      if (Unknown112 != other.Unknown112) return false;
      if (Unknown113 != other.Unknown113) return false;
      if (Unknown114 != other.Unknown114) return false;
      if (Unknown115 != other.Unknown115) return false;
      if (DefDark != other.DefDark) return false;
      if (Unknown20 != other.Unknown20) return false;
      if (Unknown21 != other.Unknown21) return false;
      if (Unknown22 != other.Unknown22) return false;
      if (Unknown23 != other.Unknown23) return false;
      if (Unknown24 != other.Unknown24) return false;
      if (Unknown25 != other.Unknown25) return false;
      if (Unknown26 != other.Unknown26) return false;
      if (Unknown27 != other.Unknown27) return false;
      if (Unknown28 != other.Unknown28) return false;
      if (Unknown29 != other.Unknown29) return false;
      if (Unknown210 != other.Unknown210) return false;
      if (Unknown211 != other.Unknown211) return false;
      if (Unknown212 != other.Unknown212) return false;
      if (Unknown213 != other.Unknown213) return false;
      if (Unknown214 != other.Unknown214) return false;
      if (Unknown215 != other.Unknown215) return false;
      if (Unknown216 != other.Unknown216) return false;
      if (Unknown217 != other.Unknown217) return false;
      if (Unknown218 != other.Unknown218) return false;
      if (Unknown219 != other.Unknown219) return false;
      if (Unknown220 != other.Unknown220) return false;
      if (Unknown221 != other.Unknown221) return false;
      if (Unknown222 != other.Unknown222) return false;
      if (Unknown223 != other.Unknown223) return false;
      if (Unknown224 != other.Unknown224) return false;
      if (Unknown225 != other.Unknown225) return false;
      if (Unknown226 != other.Unknown226) return false;
      if (Unknown227 != other.Unknown227) return false;
      if (Unknown228 != other.Unknown228) return false;
      if (Unknown229 != other.Unknown229) return false;
      if (Unknown230 != other.Unknown230) return false;
      if (Unknown231 != other.Unknown231) return false;
      if (Unknown232 != other.Unknown232) return false;
      if (Unknown233 != other.Unknown233) return false;
      if (Unknown234 != other.Unknown234) return false;
      if (Unknown235 != other.Unknown235) return false;
      if (Unknown236 != other.Unknown236) return false;
      if (Unknown237 != other.Unknown237) return false;
      if (Unknown238 != other.Unknown238) return false;
      if (Unknown239 != other.Unknown239) return false;
      if (Unknown240 != other.Unknown240) return false;
      if (Unknown241 != other.Unknown241) return false;
      if (Unknown242 != other.Unknown242) return false;
      if (Unknown243 != other.Unknown243) return false;
      if (Unknown244 != other.Unknown244) return false;
      if (Unknown245 != other.Unknown245) return false;
      if (Unknown246 != other.Unknown246) return false;
      if (Unknown247 != other.Unknown247) return false;
      if (Unknown248 != other.Unknown248) return false;
      if (Unknown249 != other.Unknown249) return false;
      if (Unknown250 != other.Unknown250) return false;
      if (Unknown251 != other.Unknown251) return false;
      if (Unknown252 != other.Unknown252) return false;
      if (Unknown253 != other.Unknown253) return false;
      if (Unknown254 != other.Unknown254) return false;
      if (Unknown255 != other.Unknown255) return false;
      if (Unknown256 != other.Unknown256) return false;
      if (Unknown257 != other.Unknown257) return false;
      if (Unknown258 != other.Unknown258) return false;
      if (Unknown259 != other.Unknown259) return false;
      if (Unknown260 != other.Unknown260) return false;
      if (Unknown261 != other.Unknown261) return false;
      if (Unknown262 != other.Unknown262) return false;
      if (Unknown263 != other.Unknown263) return false;
      if (Phys != other.Phys) return false;
      if (Thrust != other.Thrust) return false;
      if (Strike != other.Strike) return false;
      if (Slash != other.Slash) return false;
      if (Magic != other.Magic) return false;
      if (Fire != other.Fire) return false;
      if (Lightning != other.Lightning) return false;
      if (Dark != other.Dark) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (BehaviorVariationId != 0) hash ^= BehaviorVariationId.GetHashCode();
      if (AiThinkId != 0) hash ^= AiThinkId.GetHashCode();
      if (NameId != 0) hash ^= NameId.GetHashCode();
      if (TurnVelocity != 0F) hash ^= TurnVelocity.GetHashCode();
      if (HitHeight != 0F) hash ^= HitHeight.GetHashCode();
      if (HitRadius != 0F) hash ^= HitRadius.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      if (HitYOffset != 0F) hash ^= HitYOffset.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Mp != 0) hash ^= Mp.GetHashCode();
      if (GetSoul != 0) hash ^= GetSoul.GetHashCode();
      if (ItemLotId1 != 0) hash ^= ItemLotId1.GetHashCode();
      if (ItemLotId2 != 0) hash ^= ItemLotId2.GetHashCode();
      if (ItemLotId3 != 0) hash ^= ItemLotId3.GetHashCode();
      if (ItemLotId4 != 0) hash ^= ItemLotId4.GetHashCode();
      if (ItemLotId5 != 0) hash ^= ItemLotId5.GetHashCode();
      if (ItemLotId6 != 0) hash ^= ItemLotId6.GetHashCode();
      if (HumanityLotId != 0) hash ^= HumanityLotId.GetHashCode();
      if (SpEffectID0 != 0) hash ^= SpEffectID0.GetHashCode();
      if (SpEffectID1 != 0) hash ^= SpEffectID1.GetHashCode();
      if (SpEffectID2 != 0) hash ^= SpEffectID2.GetHashCode();
      if (SpEffectID3 != 0) hash ^= SpEffectID3.GetHashCode();
      if (SpEffectID4 != 0) hash ^= SpEffectID4.GetHashCode();
      if (SpEffectID5 != 0) hash ^= SpEffectID5.GetHashCode();
      if (SpEffectID6 != 0) hash ^= SpEffectID6.GetHashCode();
      if (SpEffectID7 != 0) hash ^= SpEffectID7.GetHashCode();
      if (GameClearSpEffectID != 0) hash ^= GameClearSpEffectID.GetHashCode();
      if (PhysGuardCutRate != 0F) hash ^= PhysGuardCutRate.GetHashCode();
      if (MagGuardCutRate != 0F) hash ^= MagGuardCutRate.GetHashCode();
      if (FireGuardCutRate != 0F) hash ^= FireGuardCutRate.GetHashCode();
      if (ThunGuardCutRate != 0F) hash ^= ThunGuardCutRate.GetHashCode();
      if (AnimIdOffset != 0) hash ^= AnimIdOffset.GetHashCode();
      if (MoveAnimId != 0) hash ^= MoveAnimId.GetHashCode();
      if (SpMoveAnimId1 != 0) hash ^= SpMoveAnimId1.GetHashCode();
      if (SpMoveAnimId2 != 0) hash ^= SpMoveAnimId2.GetHashCode();
      if (NetworkWarpDist != 0F) hash ^= NetworkWarpDist.GetHashCode();
      if (DbgBehaviorR1 != 0) hash ^= DbgBehaviorR1.GetHashCode();
      if (DbgBehaviorL1 != 0) hash ^= DbgBehaviorL1.GetHashCode();
      if (DbgBehaviorR2 != 0) hash ^= DbgBehaviorR2.GetHashCode();
      if (DbgBehaviorL2 != 0) hash ^= DbgBehaviorL2.GetHashCode();
      if (DbgBehaviorRL != 0) hash ^= DbgBehaviorRL.GetHashCode();
      if (DbgBehaviorRR != 0) hash ^= DbgBehaviorRR.GetHashCode();
      if (DbgBehaviorRD != 0) hash ^= DbgBehaviorRD.GetHashCode();
      if (DbgBehaviorRU != 0) hash ^= DbgBehaviorRU.GetHashCode();
      if (DbgBehaviorLL != 0) hash ^= DbgBehaviorLL.GetHashCode();
      if (DbgBehaviorLR != 0) hash ^= DbgBehaviorLR.GetHashCode();
      if (DbgBehaviorLD != 0) hash ^= DbgBehaviorLD.GetHashCode();
      if (DbgBehaviorLU != 0) hash ^= DbgBehaviorLU.GetHashCode();
      if (AnimIdOffset2 != 0) hash ^= AnimIdOffset2.GetHashCode();
      if (PartsDamageRate1 != 0F) hash ^= PartsDamageRate1.GetHashCode();
      if (PartsDamageRate2 != 0F) hash ^= PartsDamageRate2.GetHashCode();
      if (PartsDamageRate3 != 0F) hash ^= PartsDamageRate3.GetHashCode();
      if (PartsDamageRate4 != 0F) hash ^= PartsDamageRate4.GetHashCode();
      if (PartsDamageRate5 != 0F) hash ^= PartsDamageRate5.GetHashCode();
      if (PartsDamageRate6 != 0F) hash ^= PartsDamageRate6.GetHashCode();
      if (PartsDamageRate7 != 0F) hash ^= PartsDamageRate7.GetHashCode();
      if (PartsDamageRate8 != 0F) hash ^= PartsDamageRate8.GetHashCode();
      if (WeakPartsDamageRate != 0F) hash ^= WeakPartsDamageRate.GetHashCode();
      if (SuperArmorRecoverCorrection != 0F) hash ^= SuperArmorRecoverCorrection.GetHashCode();
      if (SuperArmorBrakeKnockbackDist != 0F) hash ^= SuperArmorBrakeKnockbackDist.GetHashCode();
      if (Stamina != 0) hash ^= Stamina.GetHashCode();
      if (StaminaRecoverBaseVel != 0) hash ^= StaminaRecoverBaseVel.GetHashCode();
      if (DefPhys != 0) hash ^= DefPhys.GetHashCode();
      if (DefSlash != 0) hash ^= DefSlash.GetHashCode();
      if (DefBlow != 0) hash ^= DefBlow.GetHashCode();
      if (DefThrust != 0) hash ^= DefThrust.GetHashCode();
      if (DefMag != 0) hash ^= DefMag.GetHashCode();
      if (DefFire != 0) hash ^= DefFire.GetHashCode();
      if (DefThun != 0) hash ^= DefThun.GetHashCode();
      if (DefFlickPower != 0) hash ^= DefFlickPower.GetHashCode();
      if (ResistPoison != 0) hash ^= ResistPoison.GetHashCode();
      if (ResistDisease != 0) hash ^= ResistDisease.GetHashCode();
      if (ResistBleed != 0) hash ^= ResistBleed.GetHashCode();
      if (ResistCurse != 0) hash ^= ResistCurse.GetHashCode();
      if (GhostModelId != 0) hash ^= GhostModelId.GetHashCode();
      if (NormalChangeResourceId != 0) hash ^= NormalChangeResourceId.GetHashCode();
      if (GuardAngle != 0) hash ^= GuardAngle.GetHashCode();
      if (SlashGuardCutRate != 0) hash ^= SlashGuardCutRate.GetHashCode();
      if (BlowGuardCutRate != 0) hash ^= BlowGuardCutRate.GetHashCode();
      if (ThrustGuardCutRate != 0) hash ^= ThrustGuardCutRate.GetHashCode();
      if (SuperArmorDurability != 0) hash ^= SuperArmorDurability.GetHashCode();
      if (NormalChangeTexChrId != 0) hash ^= NormalChangeTexChrId.GetHashCode();
      if (DropType != 0) hash ^= DropType.GetHashCode();
      if (KnockbackRate != 0) hash ^= KnockbackRate.GetHashCode();
      if (KnockbackParamId != 0) hash ^= KnockbackParamId.GetHashCode();
      if (FallDamageDump != 0) hash ^= FallDamageDump.GetHashCode();
      if (StaminaGuardDef != 0) hash ^= StaminaGuardDef.GetHashCode();
      if (PcAttrB != 0) hash ^= PcAttrB.GetHashCode();
      if (PcAttrW != 0) hash ^= PcAttrW.GetHashCode();
      if (PcAttrL != 0) hash ^= PcAttrL.GetHashCode();
      if (PcAttrR != 0) hash ^= PcAttrR.GetHashCode();
      if (AreaAttrB != 0) hash ^= AreaAttrB.GetHashCode();
      if (AreaAttrW != 0) hash ^= AreaAttrW.GetHashCode();
      if (AreaAttrL != 0) hash ^= AreaAttrL.GetHashCode();
      if (AreaAttrR != 0) hash ^= AreaAttrR.GetHashCode();
      if (MpRecoverBaseVel != 0) hash ^= MpRecoverBaseVel.GetHashCode();
      if (FlickDamageCutRate != 0) hash ^= FlickDamageCutRate.GetHashCode();
      if (DefaultLodParamId != 0) hash ^= DefaultLodParamId.GetHashCode();
      if (DrawType != 0) hash ^= DrawType.GetHashCode();
      if (NpcType != 0) hash ^= NpcType.GetHashCode();
      if (TeamType != 0) hash ^= TeamType.GetHashCode();
      if (MoveType != 0) hash ^= MoveType.GetHashCode();
      if (LockDist != 0) hash ^= LockDist.GetHashCode();
      if (Material != 0) hash ^= Material.GetHashCode();
      if (MaterialSfx != 0) hash ^= MaterialSfx.GetHashCode();
      if (MaterialWeak != 0) hash ^= MaterialWeak.GetHashCode();
      if (MaterialSfxWeak != 0) hash ^= MaterialSfxWeak.GetHashCode();
      if (PartsDamageType != 0) hash ^= PartsDamageType.GetHashCode();
      if (MaxUndurationAng != 0) hash ^= MaxUndurationAng.GetHashCode();
      if (GuardLevel != 0) hash ^= GuardLevel.GetHashCode();
      if (BurnSfxType != 0) hash ^= BurnSfxType.GetHashCode();
      if (PoisonGuardResist != 0) hash ^= PoisonGuardResist.GetHashCode();
      if (DiseaseGuardResist != 0) hash ^= DiseaseGuardResist.GetHashCode();
      if (BloodGuardResist != 0) hash ^= BloodGuardResist.GetHashCode();
      if (CurseGuardResist != 0) hash ^= CurseGuardResist.GetHashCode();
      if (ParryAttack != 0) hash ^= ParryAttack.GetHashCode();
      if (ParryDefense != 0) hash ^= ParryDefense.GetHashCode();
      if (SfxSize != 0) hash ^= SfxSize.GetHashCode();
      if (PushOutCamRegionRadius != 0) hash ^= PushOutCamRegionRadius.GetHashCode();
      if (HitStopType != 0) hash ^= HitStopType.GetHashCode();
      if (LadderEndChkOffsetTop != 0) hash ^= LadderEndChkOffsetTop.GetHashCode();
      if (LadderEndChkOffsetLow != 0) hash ^= LadderEndChkOffsetLow.GetHashCode();
      if (BitFields0 != 0) hash ^= BitFields0.GetHashCode();
      if (BitFields1 != 0) hash ^= BitFields1.GetHashCode();
      if (BitFields2 != 0) hash ^= BitFields2.GetHashCode();
      if (BitFields3 != 0) hash ^= BitFields3.GetHashCode();
      if (BitFields4 != 0) hash ^= BitFields4.GetHashCode();
      if (Unknown10 != 0) hash ^= Unknown10.GetHashCode();
      if (Unknown11 != 0) hash ^= Unknown11.GetHashCode();
      if (Unknown12 != 0) hash ^= Unknown12.GetHashCode();
      if (Unknown13 != 0) hash ^= Unknown13.GetHashCode();
      if (Unknown14 != 0) hash ^= Unknown14.GetHashCode();
      if (Unknown15 != 0) hash ^= Unknown15.GetHashCode();
      if (Unknown16 != 0) hash ^= Unknown16.GetHashCode();
      if (Unknown17 != 0) hash ^= Unknown17.GetHashCode();
      if (Unknown18 != 0) hash ^= Unknown18.GetHashCode();
      if (Unknown19 != 0) hash ^= Unknown19.GetHashCode();
      if (Unknown110 != 0) hash ^= Unknown110.GetHashCode();
      if (Unknown111 != 0) hash ^= Unknown111.GetHashCode();
      if (Unknown112 != 0) hash ^= Unknown112.GetHashCode();
      if (Unknown113 != 0) hash ^= Unknown113.GetHashCode();
      if (Unknown114 != 0) hash ^= Unknown114.GetHashCode();
      if (Unknown115 != 0) hash ^= Unknown115.GetHashCode();
      if (DefDark != 0) hash ^= DefDark.GetHashCode();
      if (Unknown20 != 0) hash ^= Unknown20.GetHashCode();
      if (Unknown21 != 0) hash ^= Unknown21.GetHashCode();
      if (Unknown22 != 0) hash ^= Unknown22.GetHashCode();
      if (Unknown23 != 0) hash ^= Unknown23.GetHashCode();
      if (Unknown24 != 0) hash ^= Unknown24.GetHashCode();
      if (Unknown25 != 0) hash ^= Unknown25.GetHashCode();
      if (Unknown26 != 0) hash ^= Unknown26.GetHashCode();
      if (Unknown27 != 0) hash ^= Unknown27.GetHashCode();
      if (Unknown28 != 0) hash ^= Unknown28.GetHashCode();
      if (Unknown29 != 0) hash ^= Unknown29.GetHashCode();
      if (Unknown210 != 0) hash ^= Unknown210.GetHashCode();
      if (Unknown211 != 0) hash ^= Unknown211.GetHashCode();
      if (Unknown212 != 0) hash ^= Unknown212.GetHashCode();
      if (Unknown213 != 0) hash ^= Unknown213.GetHashCode();
      if (Unknown214 != 0) hash ^= Unknown214.GetHashCode();
      if (Unknown215 != 0) hash ^= Unknown215.GetHashCode();
      if (Unknown216 != 0) hash ^= Unknown216.GetHashCode();
      if (Unknown217 != 0) hash ^= Unknown217.GetHashCode();
      if (Unknown218 != 0) hash ^= Unknown218.GetHashCode();
      if (Unknown219 != 0) hash ^= Unknown219.GetHashCode();
      if (Unknown220 != 0) hash ^= Unknown220.GetHashCode();
      if (Unknown221 != 0) hash ^= Unknown221.GetHashCode();
      if (Unknown222 != 0) hash ^= Unknown222.GetHashCode();
      if (Unknown223 != 0) hash ^= Unknown223.GetHashCode();
      if (Unknown224 != 0) hash ^= Unknown224.GetHashCode();
      if (Unknown225 != 0) hash ^= Unknown225.GetHashCode();
      if (Unknown226 != 0) hash ^= Unknown226.GetHashCode();
      if (Unknown227 != 0) hash ^= Unknown227.GetHashCode();
      if (Unknown228 != 0) hash ^= Unknown228.GetHashCode();
      if (Unknown229 != 0) hash ^= Unknown229.GetHashCode();
      if (Unknown230 != 0) hash ^= Unknown230.GetHashCode();
      if (Unknown231 != 0) hash ^= Unknown231.GetHashCode();
      if (Unknown232 != 0) hash ^= Unknown232.GetHashCode();
      if (Unknown233 != 0) hash ^= Unknown233.GetHashCode();
      if (Unknown234 != 0) hash ^= Unknown234.GetHashCode();
      if (Unknown235 != 0) hash ^= Unknown235.GetHashCode();
      if (Unknown236 != 0) hash ^= Unknown236.GetHashCode();
      if (Unknown237 != 0) hash ^= Unknown237.GetHashCode();
      if (Unknown238 != 0) hash ^= Unknown238.GetHashCode();
      if (Unknown239 != 0) hash ^= Unknown239.GetHashCode();
      if (Unknown240 != 0) hash ^= Unknown240.GetHashCode();
      if (Unknown241 != 0) hash ^= Unknown241.GetHashCode();
      if (Unknown242 != 0) hash ^= Unknown242.GetHashCode();
      if (Unknown243 != 0) hash ^= Unknown243.GetHashCode();
      if (Unknown244 != 0) hash ^= Unknown244.GetHashCode();
      if (Unknown245 != 0) hash ^= Unknown245.GetHashCode();
      if (Unknown246 != 0) hash ^= Unknown246.GetHashCode();
      if (Unknown247 != 0) hash ^= Unknown247.GetHashCode();
      if (Unknown248 != 0) hash ^= Unknown248.GetHashCode();
      if (Unknown249 != 0) hash ^= Unknown249.GetHashCode();
      if (Unknown250 != 0) hash ^= Unknown250.GetHashCode();
      if (Unknown251 != 0) hash ^= Unknown251.GetHashCode();
      if (Unknown252 != 0) hash ^= Unknown252.GetHashCode();
      if (Unknown253 != 0) hash ^= Unknown253.GetHashCode();
      if (Unknown254 != 0) hash ^= Unknown254.GetHashCode();
      if (Unknown255 != 0) hash ^= Unknown255.GetHashCode();
      if (Unknown256 != 0) hash ^= Unknown256.GetHashCode();
      if (Unknown257 != 0) hash ^= Unknown257.GetHashCode();
      if (Unknown258 != 0) hash ^= Unknown258.GetHashCode();
      if (Unknown259 != 0) hash ^= Unknown259.GetHashCode();
      if (Unknown260 != 0) hash ^= Unknown260.GetHashCode();
      if (Unknown261 != 0) hash ^= Unknown261.GetHashCode();
      if (Unknown262 != 0) hash ^= Unknown262.GetHashCode();
      if (Unknown263 != 0) hash ^= Unknown263.GetHashCode();
      if (Phys != 0F) hash ^= Phys.GetHashCode();
      if (Thrust != 0F) hash ^= Thrust.GetHashCode();
      if (Strike != 0F) hash ^= Strike.GetHashCode();
      if (Slash != 0F) hash ^= Slash.GetHashCode();
      if (Magic != 0F) hash ^= Magic.GetHashCode();
      if (Fire != 0F) hash ^= Fire.GetHashCode();
      if (Lightning != 0F) hash ^= Lightning.GetHashCode();
      if (Dark != 0F) hash ^= Dark.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Index);
      }
      if (Offset != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Offset);
      }
      if (BehaviorVariationId != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(BehaviorVariationId);
      }
      if (AiThinkId != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(AiThinkId);
      }
      if (NameId != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(NameId);
      }
      if (TurnVelocity != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(TurnVelocity);
      }
      if (HitHeight != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(HitHeight);
      }
      if (HitRadius != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(HitRadius);
      }
      if (Weight != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Weight);
      }
      if (HitYOffset != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(HitYOffset);
      }
      if (Hp != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Hp);
      }
      if (Mp != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Mp);
      }
      if (GetSoul != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(GetSoul);
      }
      if (ItemLotId1 != 0) {
        output.WriteRawTag(128, 1);
        output.WriteSInt32(ItemLotId1);
      }
      if (ItemLotId2 != 0) {
        output.WriteRawTag(136, 1);
        output.WriteSInt32(ItemLotId2);
      }
      if (ItemLotId3 != 0) {
        output.WriteRawTag(144, 1);
        output.WriteSInt32(ItemLotId3);
      }
      if (ItemLotId4 != 0) {
        output.WriteRawTag(152, 1);
        output.WriteSInt32(ItemLotId4);
      }
      if (ItemLotId5 != 0) {
        output.WriteRawTag(160, 1);
        output.WriteSInt32(ItemLotId5);
      }
      if (ItemLotId6 != 0) {
        output.WriteRawTag(168, 1);
        output.WriteSInt32(ItemLotId6);
      }
      if (HumanityLotId != 0) {
        output.WriteRawTag(176, 1);
        output.WriteSInt32(HumanityLotId);
      }
      if (SpEffectID0 != 0) {
        output.WriteRawTag(184, 1);
        output.WriteSInt32(SpEffectID0);
      }
      if (SpEffectID1 != 0) {
        output.WriteRawTag(192, 1);
        output.WriteSInt32(SpEffectID1);
      }
      if (SpEffectID2 != 0) {
        output.WriteRawTag(200, 1);
        output.WriteSInt32(SpEffectID2);
      }
      if (SpEffectID3 != 0) {
        output.WriteRawTag(208, 1);
        output.WriteSInt32(SpEffectID3);
      }
      if (SpEffectID4 != 0) {
        output.WriteRawTag(216, 1);
        output.WriteSInt32(SpEffectID4);
      }
      if (SpEffectID5 != 0) {
        output.WriteRawTag(224, 1);
        output.WriteSInt32(SpEffectID5);
      }
      if (SpEffectID6 != 0) {
        output.WriteRawTag(232, 1);
        output.WriteSInt32(SpEffectID6);
      }
      if (SpEffectID7 != 0) {
        output.WriteRawTag(240, 1);
        output.WriteSInt32(SpEffectID7);
      }
      if (GameClearSpEffectID != 0) {
        output.WriteRawTag(248, 1);
        output.WriteSInt32(GameClearSpEffectID);
      }
      if (PhysGuardCutRate != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(PhysGuardCutRate);
      }
      if (MagGuardCutRate != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(MagGuardCutRate);
      }
      if (FireGuardCutRate != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(FireGuardCutRate);
      }
      if (ThunGuardCutRate != 0F) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(ThunGuardCutRate);
      }
      if (AnimIdOffset != 0) {
        output.WriteRawTag(160, 2);
        output.WriteSInt32(AnimIdOffset);
      }
      if (MoveAnimId != 0) {
        output.WriteRawTag(168, 2);
        output.WriteSInt32(MoveAnimId);
      }
      if (SpMoveAnimId1 != 0) {
        output.WriteRawTag(176, 2);
        output.WriteSInt32(SpMoveAnimId1);
      }
      if (SpMoveAnimId2 != 0) {
        output.WriteRawTag(184, 2);
        output.WriteSInt32(SpMoveAnimId2);
      }
      if (NetworkWarpDist != 0F) {
        output.WriteRawTag(197, 2);
        output.WriteFloat(NetworkWarpDist);
      }
      if (DbgBehaviorR1 != 0) {
        output.WriteRawTag(200, 2);
        output.WriteSInt32(DbgBehaviorR1);
      }
      if (DbgBehaviorL1 != 0) {
        output.WriteRawTag(208, 2);
        output.WriteSInt32(DbgBehaviorL1);
      }
      if (DbgBehaviorR2 != 0) {
        output.WriteRawTag(216, 2);
        output.WriteSInt32(DbgBehaviorR2);
      }
      if (DbgBehaviorL2 != 0) {
        output.WriteRawTag(224, 2);
        output.WriteSInt32(DbgBehaviorL2);
      }
      if (DbgBehaviorRL != 0) {
        output.WriteRawTag(232, 2);
        output.WriteSInt32(DbgBehaviorRL);
      }
      if (DbgBehaviorRR != 0) {
        output.WriteRawTag(240, 2);
        output.WriteSInt32(DbgBehaviorRR);
      }
      if (DbgBehaviorRD != 0) {
        output.WriteRawTag(248, 2);
        output.WriteSInt32(DbgBehaviorRD);
      }
      if (DbgBehaviorRU != 0) {
        output.WriteRawTag(128, 3);
        output.WriteSInt32(DbgBehaviorRU);
      }
      if (DbgBehaviorLL != 0) {
        output.WriteRawTag(136, 3);
        output.WriteSInt32(DbgBehaviorLL);
      }
      if (DbgBehaviorLR != 0) {
        output.WriteRawTag(144, 3);
        output.WriteSInt32(DbgBehaviorLR);
      }
      if (DbgBehaviorLD != 0) {
        output.WriteRawTag(152, 3);
        output.WriteSInt32(DbgBehaviorLD);
      }
      if (DbgBehaviorLU != 0) {
        output.WriteRawTag(160, 3);
        output.WriteSInt32(DbgBehaviorLU);
      }
      if (AnimIdOffset2 != 0) {
        output.WriteRawTag(168, 3);
        output.WriteSInt32(AnimIdOffset2);
      }
      if (PartsDamageRate1 != 0F) {
        output.WriteRawTag(181, 3);
        output.WriteFloat(PartsDamageRate1);
      }
      if (PartsDamageRate2 != 0F) {
        output.WriteRawTag(189, 3);
        output.WriteFloat(PartsDamageRate2);
      }
      if (PartsDamageRate3 != 0F) {
        output.WriteRawTag(197, 3);
        output.WriteFloat(PartsDamageRate3);
      }
      if (PartsDamageRate4 != 0F) {
        output.WriteRawTag(205, 3);
        output.WriteFloat(PartsDamageRate4);
      }
      if (PartsDamageRate5 != 0F) {
        output.WriteRawTag(213, 3);
        output.WriteFloat(PartsDamageRate5);
      }
      if (PartsDamageRate6 != 0F) {
        output.WriteRawTag(221, 3);
        output.WriteFloat(PartsDamageRate6);
      }
      if (PartsDamageRate7 != 0F) {
        output.WriteRawTag(229, 3);
        output.WriteFloat(PartsDamageRate7);
      }
      if (PartsDamageRate8 != 0F) {
        output.WriteRawTag(237, 3);
        output.WriteFloat(PartsDamageRate8);
      }
      if (WeakPartsDamageRate != 0F) {
        output.WriteRawTag(245, 3);
        output.WriteFloat(WeakPartsDamageRate);
      }
      if (SuperArmorRecoverCorrection != 0F) {
        output.WriteRawTag(253, 3);
        output.WriteFloat(SuperArmorRecoverCorrection);
      }
      if (SuperArmorBrakeKnockbackDist != 0F) {
        output.WriteRawTag(133, 4);
        output.WriteFloat(SuperArmorBrakeKnockbackDist);
      }
      if (Stamina != 0) {
        output.WriteRawTag(136, 4);
        output.WriteUInt32(Stamina);
      }
      if (StaminaRecoverBaseVel != 0) {
        output.WriteRawTag(144, 4);
        output.WriteUInt32(StaminaRecoverBaseVel);
      }
      if (DefPhys != 0) {
        output.WriteRawTag(152, 4);
        output.WriteSInt32(DefPhys);
      }
      if (DefSlash != 0) {
        output.WriteRawTag(160, 4);
        output.WriteSInt32(DefSlash);
      }
      if (DefBlow != 0) {
        output.WriteRawTag(168, 4);
        output.WriteSInt32(DefBlow);
      }
      if (DefThrust != 0) {
        output.WriteRawTag(176, 4);
        output.WriteSInt32(DefThrust);
      }
      if (DefMag != 0) {
        output.WriteRawTag(184, 4);
        output.WriteSInt32(DefMag);
      }
      if (DefFire != 0) {
        output.WriteRawTag(192, 4);
        output.WriteSInt32(DefFire);
      }
      if (DefThun != 0) {
        output.WriteRawTag(200, 4);
        output.WriteSInt32(DefThun);
      }
      if (DefFlickPower != 0) {
        output.WriteRawTag(208, 4);
        output.WriteUInt32(DefFlickPower);
      }
      if (ResistPoison != 0) {
        output.WriteRawTag(216, 4);
        output.WriteUInt32(ResistPoison);
      }
      if (ResistDisease != 0) {
        output.WriteRawTag(224, 4);
        output.WriteUInt32(ResistDisease);
      }
      if (ResistBleed != 0) {
        output.WriteRawTag(232, 4);
        output.WriteUInt32(ResistBleed);
      }
      if (ResistCurse != 0) {
        output.WriteRawTag(240, 4);
        output.WriteUInt32(ResistCurse);
      }
      if (GhostModelId != 0) {
        output.WriteRawTag(248, 4);
        output.WriteSInt32(GhostModelId);
      }
      if (NormalChangeResourceId != 0) {
        output.WriteRawTag(128, 5);
        output.WriteSInt32(NormalChangeResourceId);
      }
      if (GuardAngle != 0) {
        output.WriteRawTag(136, 5);
        output.WriteSInt32(GuardAngle);
      }
      if (SlashGuardCutRate != 0) {
        output.WriteRawTag(144, 5);
        output.WriteSInt32(SlashGuardCutRate);
      }
      if (BlowGuardCutRate != 0) {
        output.WriteRawTag(152, 5);
        output.WriteSInt32(BlowGuardCutRate);
      }
      if (ThrustGuardCutRate != 0) {
        output.WriteRawTag(160, 5);
        output.WriteSInt32(ThrustGuardCutRate);
      }
      if (SuperArmorDurability != 0) {
        output.WriteRawTag(168, 5);
        output.WriteSInt32(SuperArmorDurability);
      }
      if (NormalChangeTexChrId != 0) {
        output.WriteRawTag(176, 5);
        output.WriteSInt32(NormalChangeTexChrId);
      }
      if (DropType != 0) {
        output.WriteRawTag(184, 5);
        output.WriteUInt32(DropType);
      }
      if (KnockbackRate != 0) {
        output.WriteRawTag(192, 5);
        output.WriteUInt32(KnockbackRate);
      }
      if (KnockbackParamId != 0) {
        output.WriteRawTag(200, 5);
        output.WriteUInt32(KnockbackParamId);
      }
      if (FallDamageDump != 0) {
        output.WriteRawTag(208, 5);
        output.WriteUInt32(FallDamageDump);
      }
      if (StaminaGuardDef != 0) {
        output.WriteRawTag(216, 5);
        output.WriteUInt32(StaminaGuardDef);
      }
      if (PcAttrB != 0) {
        output.WriteRawTag(224, 5);
        output.WriteUInt32(PcAttrB);
      }
      if (PcAttrW != 0) {
        output.WriteRawTag(232, 5);
        output.WriteUInt32(PcAttrW);
      }
      if (PcAttrL != 0) {
        output.WriteRawTag(240, 5);
        output.WriteUInt32(PcAttrL);
      }
      if (PcAttrR != 0) {
        output.WriteRawTag(248, 5);
        output.WriteUInt32(PcAttrR);
      }
      if (AreaAttrB != 0) {
        output.WriteRawTag(128, 6);
        output.WriteUInt32(AreaAttrB);
      }
      if (AreaAttrW != 0) {
        output.WriteRawTag(136, 6);
        output.WriteUInt32(AreaAttrW);
      }
      if (AreaAttrL != 0) {
        output.WriteRawTag(144, 6);
        output.WriteUInt32(AreaAttrL);
      }
      if (AreaAttrR != 0) {
        output.WriteRawTag(152, 6);
        output.WriteUInt32(AreaAttrR);
      }
      if (MpRecoverBaseVel != 0) {
        output.WriteRawTag(160, 6);
        output.WriteUInt32(MpRecoverBaseVel);
      }
      if (FlickDamageCutRate != 0) {
        output.WriteRawTag(168, 6);
        output.WriteUInt32(FlickDamageCutRate);
      }
      if (DefaultLodParamId != 0) {
        output.WriteRawTag(176, 6);
        output.WriteSInt32(DefaultLodParamId);
      }
      if (DrawType != 0) {
        output.WriteRawTag(184, 6);
        output.WriteUInt32(DrawType);
      }
      if (NpcType != 0) {
        output.WriteRawTag(192, 6);
        output.WriteUInt32(NpcType);
      }
      if (TeamType != 0) {
        output.WriteRawTag(200, 6);
        output.WriteUInt32(TeamType);
      }
      if (MoveType != 0) {
        output.WriteRawTag(208, 6);
        output.WriteUInt32(MoveType);
      }
      if (LockDist != 0) {
        output.WriteRawTag(216, 6);
        output.WriteUInt32(LockDist);
      }
      if (Material != 0) {
        output.WriteRawTag(224, 6);
        output.WriteUInt32(Material);
      }
      if (MaterialSfx != 0) {
        output.WriteRawTag(232, 6);
        output.WriteUInt32(MaterialSfx);
      }
      if (MaterialWeak != 0) {
        output.WriteRawTag(240, 6);
        output.WriteUInt32(MaterialWeak);
      }
      if (MaterialSfxWeak != 0) {
        output.WriteRawTag(248, 6);
        output.WriteUInt32(MaterialSfxWeak);
      }
      if (PartsDamageType != 0) {
        output.WriteRawTag(128, 7);
        output.WriteUInt32(PartsDamageType);
      }
      if (MaxUndurationAng != 0) {
        output.WriteRawTag(136, 7);
        output.WriteUInt32(MaxUndurationAng);
      }
      if (GuardLevel != 0) {
        output.WriteRawTag(144, 7);
        output.WriteSInt32(GuardLevel);
      }
      if (BurnSfxType != 0) {
        output.WriteRawTag(152, 7);
        output.WriteUInt32(BurnSfxType);
      }
      if (PoisonGuardResist != 0) {
        output.WriteRawTag(160, 7);
        output.WriteSInt32(PoisonGuardResist);
      }
      if (DiseaseGuardResist != 0) {
        output.WriteRawTag(168, 7);
        output.WriteSInt32(DiseaseGuardResist);
      }
      if (BloodGuardResist != 0) {
        output.WriteRawTag(176, 7);
        output.WriteSInt32(BloodGuardResist);
      }
      if (CurseGuardResist != 0) {
        output.WriteRawTag(184, 7);
        output.WriteSInt32(CurseGuardResist);
      }
      if (ParryAttack != 0) {
        output.WriteRawTag(192, 7);
        output.WriteUInt32(ParryAttack);
      }
      if (ParryDefense != 0) {
        output.WriteRawTag(200, 7);
        output.WriteUInt32(ParryDefense);
      }
      if (SfxSize != 0) {
        output.WriteRawTag(208, 7);
        output.WriteUInt32(SfxSize);
      }
      if (PushOutCamRegionRadius != 0) {
        output.WriteRawTag(216, 7);
        output.WriteUInt32(PushOutCamRegionRadius);
      }
      if (HitStopType != 0) {
        output.WriteRawTag(224, 7);
        output.WriteUInt32(HitStopType);
      }
      if (LadderEndChkOffsetTop != 0) {
        output.WriteRawTag(232, 7);
        output.WriteUInt32(LadderEndChkOffsetTop);
      }
      if (LadderEndChkOffsetLow != 0) {
        output.WriteRawTag(240, 7);
        output.WriteUInt32(LadderEndChkOffsetLow);
      }
      if (BitFields0 != 0) {
        output.WriteRawTag(248, 7);
        output.WriteUInt32(BitFields0);
      }
      if (BitFields1 != 0) {
        output.WriteRawTag(128, 8);
        output.WriteUInt32(BitFields1);
      }
      if (BitFields2 != 0) {
        output.WriteRawTag(136, 8);
        output.WriteUInt32(BitFields2);
      }
      if (BitFields3 != 0) {
        output.WriteRawTag(144, 8);
        output.WriteUInt32(BitFields3);
      }
      if (BitFields4 != 0) {
        output.WriteRawTag(152, 8);
        output.WriteUInt32(BitFields4);
      }
      if (Unknown10 != 0) {
        output.WriteRawTag(160, 8);
        output.WriteUInt32(Unknown10);
      }
      if (Unknown11 != 0) {
        output.WriteRawTag(168, 8);
        output.WriteUInt32(Unknown11);
      }
      if (Unknown12 != 0) {
        output.WriteRawTag(176, 8);
        output.WriteUInt32(Unknown12);
      }
      if (Unknown13 != 0) {
        output.WriteRawTag(184, 8);
        output.WriteUInt32(Unknown13);
      }
      if (Unknown14 != 0) {
        output.WriteRawTag(192, 8);
        output.WriteUInt32(Unknown14);
      }
      if (Unknown15 != 0) {
        output.WriteRawTag(200, 8);
        output.WriteUInt32(Unknown15);
      }
      if (Unknown16 != 0) {
        output.WriteRawTag(208, 8);
        output.WriteUInt32(Unknown16);
      }
      if (Unknown17 != 0) {
        output.WriteRawTag(216, 8);
        output.WriteUInt32(Unknown17);
      }
      if (Unknown18 != 0) {
        output.WriteRawTag(224, 8);
        output.WriteUInt32(Unknown18);
      }
      if (Unknown19 != 0) {
        output.WriteRawTag(232, 8);
        output.WriteUInt32(Unknown19);
      }
      if (Unknown110 != 0) {
        output.WriteRawTag(240, 8);
        output.WriteUInt32(Unknown110);
      }
      if (Unknown111 != 0) {
        output.WriteRawTag(248, 8);
        output.WriteUInt32(Unknown111);
      }
      if (Unknown112 != 0) {
        output.WriteRawTag(128, 9);
        output.WriteUInt32(Unknown112);
      }
      if (Unknown113 != 0) {
        output.WriteRawTag(136, 9);
        output.WriteUInt32(Unknown113);
      }
      if (Unknown114 != 0) {
        output.WriteRawTag(144, 9);
        output.WriteUInt32(Unknown114);
      }
      if (Unknown115 != 0) {
        output.WriteRawTag(152, 9);
        output.WriteUInt32(Unknown115);
      }
      if (DefDark != 0) {
        output.WriteRawTag(160, 9);
        output.WriteSInt32(DefDark);
      }
      if (Unknown20 != 0) {
        output.WriteRawTag(168, 9);
        output.WriteUInt32(Unknown20);
      }
      if (Unknown21 != 0) {
        output.WriteRawTag(176, 9);
        output.WriteUInt32(Unknown21);
      }
      if (Unknown22 != 0) {
        output.WriteRawTag(184, 9);
        output.WriteUInt32(Unknown22);
      }
      if (Unknown23 != 0) {
        output.WriteRawTag(192, 9);
        output.WriteUInt32(Unknown23);
      }
      if (Unknown24 != 0) {
        output.WriteRawTag(200, 9);
        output.WriteUInt32(Unknown24);
      }
      if (Unknown25 != 0) {
        output.WriteRawTag(208, 9);
        output.WriteUInt32(Unknown25);
      }
      if (Unknown26 != 0) {
        output.WriteRawTag(216, 9);
        output.WriteUInt32(Unknown26);
      }
      if (Unknown27 != 0) {
        output.WriteRawTag(224, 9);
        output.WriteUInt32(Unknown27);
      }
      if (Unknown28 != 0) {
        output.WriteRawTag(232, 9);
        output.WriteUInt32(Unknown28);
      }
      if (Unknown29 != 0) {
        output.WriteRawTag(240, 9);
        output.WriteUInt32(Unknown29);
      }
      if (Unknown210 != 0) {
        output.WriteRawTag(248, 9);
        output.WriteUInt32(Unknown210);
      }
      if (Unknown211 != 0) {
        output.WriteRawTag(128, 10);
        output.WriteUInt32(Unknown211);
      }
      if (Unknown212 != 0) {
        output.WriteRawTag(136, 10);
        output.WriteUInt32(Unknown212);
      }
      if (Unknown213 != 0) {
        output.WriteRawTag(144, 10);
        output.WriteUInt32(Unknown213);
      }
      if (Unknown214 != 0) {
        output.WriteRawTag(152, 10);
        output.WriteUInt32(Unknown214);
      }
      if (Unknown215 != 0) {
        output.WriteRawTag(160, 10);
        output.WriteUInt32(Unknown215);
      }
      if (Unknown216 != 0) {
        output.WriteRawTag(168, 10);
        output.WriteUInt32(Unknown216);
      }
      if (Unknown217 != 0) {
        output.WriteRawTag(176, 10);
        output.WriteUInt32(Unknown217);
      }
      if (Unknown218 != 0) {
        output.WriteRawTag(184, 10);
        output.WriteUInt32(Unknown218);
      }
      if (Unknown219 != 0) {
        output.WriteRawTag(192, 10);
        output.WriteUInt32(Unknown219);
      }
      if (Unknown220 != 0) {
        output.WriteRawTag(200, 10);
        output.WriteUInt32(Unknown220);
      }
      if (Unknown221 != 0) {
        output.WriteRawTag(208, 10);
        output.WriteUInt32(Unknown221);
      }
      if (Unknown222 != 0) {
        output.WriteRawTag(216, 10);
        output.WriteUInt32(Unknown222);
      }
      if (Unknown223 != 0) {
        output.WriteRawTag(224, 10);
        output.WriteUInt32(Unknown223);
      }
      if (Unknown224 != 0) {
        output.WriteRawTag(232, 10);
        output.WriteUInt32(Unknown224);
      }
      if (Unknown225 != 0) {
        output.WriteRawTag(240, 10);
        output.WriteUInt32(Unknown225);
      }
      if (Unknown226 != 0) {
        output.WriteRawTag(248, 10);
        output.WriteUInt32(Unknown226);
      }
      if (Unknown227 != 0) {
        output.WriteRawTag(128, 11);
        output.WriteUInt32(Unknown227);
      }
      if (Unknown228 != 0) {
        output.WriteRawTag(136, 11);
        output.WriteUInt32(Unknown228);
      }
      if (Unknown229 != 0) {
        output.WriteRawTag(144, 11);
        output.WriteUInt32(Unknown229);
      }
      if (Unknown230 != 0) {
        output.WriteRawTag(152, 11);
        output.WriteUInt32(Unknown230);
      }
      if (Unknown231 != 0) {
        output.WriteRawTag(160, 11);
        output.WriteUInt32(Unknown231);
      }
      if (Unknown232 != 0) {
        output.WriteRawTag(168, 11);
        output.WriteUInt32(Unknown232);
      }
      if (Unknown233 != 0) {
        output.WriteRawTag(176, 11);
        output.WriteUInt32(Unknown233);
      }
      if (Unknown234 != 0) {
        output.WriteRawTag(184, 11);
        output.WriteUInt32(Unknown234);
      }
      if (Unknown235 != 0) {
        output.WriteRawTag(192, 11);
        output.WriteUInt32(Unknown235);
      }
      if (Unknown236 != 0) {
        output.WriteRawTag(200, 11);
        output.WriteUInt32(Unknown236);
      }
      if (Unknown237 != 0) {
        output.WriteRawTag(208, 11);
        output.WriteUInt32(Unknown237);
      }
      if (Unknown238 != 0) {
        output.WriteRawTag(216, 11);
        output.WriteUInt32(Unknown238);
      }
      if (Unknown239 != 0) {
        output.WriteRawTag(224, 11);
        output.WriteUInt32(Unknown239);
      }
      if (Unknown240 != 0) {
        output.WriteRawTag(232, 11);
        output.WriteUInt32(Unknown240);
      }
      if (Unknown241 != 0) {
        output.WriteRawTag(240, 11);
        output.WriteUInt32(Unknown241);
      }
      if (Unknown242 != 0) {
        output.WriteRawTag(248, 11);
        output.WriteUInt32(Unknown242);
      }
      if (Unknown243 != 0) {
        output.WriteRawTag(128, 12);
        output.WriteUInt32(Unknown243);
      }
      if (Unknown244 != 0) {
        output.WriteRawTag(136, 12);
        output.WriteUInt32(Unknown244);
      }
      if (Unknown245 != 0) {
        output.WriteRawTag(144, 12);
        output.WriteUInt32(Unknown245);
      }
      if (Unknown246 != 0) {
        output.WriteRawTag(152, 12);
        output.WriteUInt32(Unknown246);
      }
      if (Unknown247 != 0) {
        output.WriteRawTag(160, 12);
        output.WriteUInt32(Unknown247);
      }
      if (Unknown248 != 0) {
        output.WriteRawTag(168, 12);
        output.WriteUInt32(Unknown248);
      }
      if (Unknown249 != 0) {
        output.WriteRawTag(176, 12);
        output.WriteUInt32(Unknown249);
      }
      if (Unknown250 != 0) {
        output.WriteRawTag(184, 12);
        output.WriteUInt32(Unknown250);
      }
      if (Unknown251 != 0) {
        output.WriteRawTag(192, 12);
        output.WriteUInt32(Unknown251);
      }
      if (Unknown252 != 0) {
        output.WriteRawTag(200, 12);
        output.WriteUInt32(Unknown252);
      }
      if (Unknown253 != 0) {
        output.WriteRawTag(208, 12);
        output.WriteUInt32(Unknown253);
      }
      if (Unknown254 != 0) {
        output.WriteRawTag(216, 12);
        output.WriteUInt32(Unknown254);
      }
      if (Unknown255 != 0) {
        output.WriteRawTag(224, 12);
        output.WriteUInt32(Unknown255);
      }
      if (Unknown256 != 0) {
        output.WriteRawTag(232, 12);
        output.WriteUInt32(Unknown256);
      }
      if (Unknown257 != 0) {
        output.WriteRawTag(240, 12);
        output.WriteUInt32(Unknown257);
      }
      if (Unknown258 != 0) {
        output.WriteRawTag(248, 12);
        output.WriteUInt32(Unknown258);
      }
      if (Unknown259 != 0) {
        output.WriteRawTag(128, 13);
        output.WriteUInt32(Unknown259);
      }
      if (Unknown260 != 0) {
        output.WriteRawTag(136, 13);
        output.WriteUInt32(Unknown260);
      }
      if (Unknown261 != 0) {
        output.WriteRawTag(144, 13);
        output.WriteUInt32(Unknown261);
      }
      if (Unknown262 != 0) {
        output.WriteRawTag(152, 13);
        output.WriteUInt32(Unknown262);
      }
      if (Unknown263 != 0) {
        output.WriteRawTag(160, 13);
        output.WriteUInt32(Unknown263);
      }
      if (Phys != 0F) {
        output.WriteRawTag(173, 13);
        output.WriteFloat(Phys);
      }
      if (Thrust != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(Thrust);
      }
      if (Strike != 0F) {
        output.WriteRawTag(189, 13);
        output.WriteFloat(Strike);
      }
      if (Slash != 0F) {
        output.WriteRawTag(197, 13);
        output.WriteFloat(Slash);
      }
      if (Magic != 0F) {
        output.WriteRawTag(205, 13);
        output.WriteFloat(Magic);
      }
      if (Fire != 0F) {
        output.WriteRawTag(213, 13);
        output.WriteFloat(Fire);
      }
      if (Lightning != 0F) {
        output.WriteRawTag(221, 13);
        output.WriteFloat(Lightning);
      }
      if (Dark != 0F) {
        output.WriteRawTag(229, 13);
        output.WriteFloat(Dark);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Index);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Offset);
      }
      if (BehaviorVariationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BehaviorVariationId);
      }
      if (AiThinkId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AiThinkId);
      }
      if (NameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(NameId);
      }
      if (TurnVelocity != 0F) {
        size += 1 + 4;
      }
      if (HitHeight != 0F) {
        size += 1 + 4;
      }
      if (HitRadius != 0F) {
        size += 1 + 4;
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Weight);
      }
      if (HitYOffset != 0F) {
        size += 1 + 4;
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hp);
      }
      if (Mp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mp);
      }
      if (GetSoul != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GetSoul);
      }
      if (ItemLotId1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ItemLotId1);
      }
      if (ItemLotId2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ItemLotId2);
      }
      if (ItemLotId3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ItemLotId3);
      }
      if (ItemLotId4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ItemLotId4);
      }
      if (ItemLotId5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ItemLotId5);
      }
      if (ItemLotId6 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ItemLotId6);
      }
      if (HumanityLotId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(HumanityLotId);
      }
      if (SpEffectID0 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SpEffectID0);
      }
      if (SpEffectID1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SpEffectID1);
      }
      if (SpEffectID2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SpEffectID2);
      }
      if (SpEffectID3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SpEffectID3);
      }
      if (SpEffectID4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SpEffectID4);
      }
      if (SpEffectID5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SpEffectID5);
      }
      if (SpEffectID6 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SpEffectID6);
      }
      if (SpEffectID7 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SpEffectID7);
      }
      if (GameClearSpEffectID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(GameClearSpEffectID);
      }
      if (PhysGuardCutRate != 0F) {
        size += 2 + 4;
      }
      if (MagGuardCutRate != 0F) {
        size += 2 + 4;
      }
      if (FireGuardCutRate != 0F) {
        size += 2 + 4;
      }
      if (ThunGuardCutRate != 0F) {
        size += 2 + 4;
      }
      if (AnimIdOffset != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(AnimIdOffset);
      }
      if (MoveAnimId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(MoveAnimId);
      }
      if (SpMoveAnimId1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SpMoveAnimId1);
      }
      if (SpMoveAnimId2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SpMoveAnimId2);
      }
      if (NetworkWarpDist != 0F) {
        size += 2 + 4;
      }
      if (DbgBehaviorR1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DbgBehaviorR1);
      }
      if (DbgBehaviorL1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DbgBehaviorL1);
      }
      if (DbgBehaviorR2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DbgBehaviorR2);
      }
      if (DbgBehaviorL2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DbgBehaviorL2);
      }
      if (DbgBehaviorRL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DbgBehaviorRL);
      }
      if (DbgBehaviorRR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DbgBehaviorRR);
      }
      if (DbgBehaviorRD != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DbgBehaviorRD);
      }
      if (DbgBehaviorRU != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DbgBehaviorRU);
      }
      if (DbgBehaviorLL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DbgBehaviorLL);
      }
      if (DbgBehaviorLR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DbgBehaviorLR);
      }
      if (DbgBehaviorLD != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DbgBehaviorLD);
      }
      if (DbgBehaviorLU != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DbgBehaviorLU);
      }
      if (AnimIdOffset2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(AnimIdOffset2);
      }
      if (PartsDamageRate1 != 0F) {
        size += 2 + 4;
      }
      if (PartsDamageRate2 != 0F) {
        size += 2 + 4;
      }
      if (PartsDamageRate3 != 0F) {
        size += 2 + 4;
      }
      if (PartsDamageRate4 != 0F) {
        size += 2 + 4;
      }
      if (PartsDamageRate5 != 0F) {
        size += 2 + 4;
      }
      if (PartsDamageRate6 != 0F) {
        size += 2 + 4;
      }
      if (PartsDamageRate7 != 0F) {
        size += 2 + 4;
      }
      if (PartsDamageRate8 != 0F) {
        size += 2 + 4;
      }
      if (WeakPartsDamageRate != 0F) {
        size += 2 + 4;
      }
      if (SuperArmorRecoverCorrection != 0F) {
        size += 2 + 4;
      }
      if (SuperArmorBrakeKnockbackDist != 0F) {
        size += 2 + 4;
      }
      if (Stamina != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Stamina);
      }
      if (StaminaRecoverBaseVel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(StaminaRecoverBaseVel);
      }
      if (DefPhys != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DefPhys);
      }
      if (DefSlash != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DefSlash);
      }
      if (DefBlow != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DefBlow);
      }
      if (DefThrust != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DefThrust);
      }
      if (DefMag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DefMag);
      }
      if (DefFire != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DefFire);
      }
      if (DefThun != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DefThun);
      }
      if (DefFlickPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DefFlickPower);
      }
      if (ResistPoison != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ResistPoison);
      }
      if (ResistDisease != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ResistDisease);
      }
      if (ResistBleed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ResistBleed);
      }
      if (ResistCurse != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ResistCurse);
      }
      if (GhostModelId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(GhostModelId);
      }
      if (NormalChangeResourceId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(NormalChangeResourceId);
      }
      if (GuardAngle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(GuardAngle);
      }
      if (SlashGuardCutRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SlashGuardCutRate);
      }
      if (BlowGuardCutRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(BlowGuardCutRate);
      }
      if (ThrustGuardCutRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ThrustGuardCutRate);
      }
      if (SuperArmorDurability != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(SuperArmorDurability);
      }
      if (NormalChangeTexChrId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(NormalChangeTexChrId);
      }
      if (DropType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DropType);
      }
      if (KnockbackRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(KnockbackRate);
      }
      if (KnockbackParamId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(KnockbackParamId);
      }
      if (FallDamageDump != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FallDamageDump);
      }
      if (StaminaGuardDef != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(StaminaGuardDef);
      }
      if (PcAttrB != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PcAttrB);
      }
      if (PcAttrW != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PcAttrW);
      }
      if (PcAttrL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PcAttrL);
      }
      if (PcAttrR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PcAttrR);
      }
      if (AreaAttrB != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AreaAttrB);
      }
      if (AreaAttrW != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AreaAttrW);
      }
      if (AreaAttrL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AreaAttrL);
      }
      if (AreaAttrR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AreaAttrR);
      }
      if (MpRecoverBaseVel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MpRecoverBaseVel);
      }
      if (FlickDamageCutRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FlickDamageCutRate);
      }
      if (DefaultLodParamId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DefaultLodParamId);
      }
      if (DrawType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DrawType);
      }
      if (NpcType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NpcType);
      }
      if (TeamType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TeamType);
      }
      if (MoveType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MoveType);
      }
      if (LockDist != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LockDist);
      }
      if (Material != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Material);
      }
      if (MaterialSfx != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaterialSfx);
      }
      if (MaterialWeak != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaterialWeak);
      }
      if (MaterialSfxWeak != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaterialSfxWeak);
      }
      if (PartsDamageType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PartsDamageType);
      }
      if (MaxUndurationAng != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxUndurationAng);
      }
      if (GuardLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(GuardLevel);
      }
      if (BurnSfxType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BurnSfxType);
      }
      if (PoisonGuardResist != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(PoisonGuardResist);
      }
      if (DiseaseGuardResist != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DiseaseGuardResist);
      }
      if (BloodGuardResist != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(BloodGuardResist);
      }
      if (CurseGuardResist != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(CurseGuardResist);
      }
      if (ParryAttack != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ParryAttack);
      }
      if (ParryDefense != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ParryDefense);
      }
      if (SfxSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SfxSize);
      }
      if (PushOutCamRegionRadius != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PushOutCamRegionRadius);
      }
      if (HitStopType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HitStopType);
      }
      if (LadderEndChkOffsetTop != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LadderEndChkOffsetTop);
      }
      if (LadderEndChkOffsetLow != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LadderEndChkOffsetLow);
      }
      if (BitFields0 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BitFields0);
      }
      if (BitFields1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BitFields1);
      }
      if (BitFields2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BitFields2);
      }
      if (BitFields3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BitFields3);
      }
      if (BitFields4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BitFields4);
      }
      if (Unknown10 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown10);
      }
      if (Unknown11 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown11);
      }
      if (Unknown12 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown12);
      }
      if (Unknown13 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown13);
      }
      if (Unknown14 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown14);
      }
      if (Unknown15 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown15);
      }
      if (Unknown16 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown16);
      }
      if (Unknown17 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown17);
      }
      if (Unknown18 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown18);
      }
      if (Unknown19 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown19);
      }
      if (Unknown110 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown110);
      }
      if (Unknown111 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown111);
      }
      if (Unknown112 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown112);
      }
      if (Unknown113 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown113);
      }
      if (Unknown114 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown114);
      }
      if (Unknown115 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown115);
      }
      if (DefDark != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DefDark);
      }
      if (Unknown20 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown20);
      }
      if (Unknown21 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown21);
      }
      if (Unknown22 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown22);
      }
      if (Unknown23 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown23);
      }
      if (Unknown24 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown24);
      }
      if (Unknown25 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown25);
      }
      if (Unknown26 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown26);
      }
      if (Unknown27 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown27);
      }
      if (Unknown28 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown28);
      }
      if (Unknown29 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown29);
      }
      if (Unknown210 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown210);
      }
      if (Unknown211 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown211);
      }
      if (Unknown212 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown212);
      }
      if (Unknown213 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown213);
      }
      if (Unknown214 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown214);
      }
      if (Unknown215 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown215);
      }
      if (Unknown216 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown216);
      }
      if (Unknown217 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown217);
      }
      if (Unknown218 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown218);
      }
      if (Unknown219 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown219);
      }
      if (Unknown220 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown220);
      }
      if (Unknown221 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown221);
      }
      if (Unknown222 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown222);
      }
      if (Unknown223 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown223);
      }
      if (Unknown224 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown224);
      }
      if (Unknown225 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown225);
      }
      if (Unknown226 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown226);
      }
      if (Unknown227 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown227);
      }
      if (Unknown228 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown228);
      }
      if (Unknown229 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown229);
      }
      if (Unknown230 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown230);
      }
      if (Unknown231 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown231);
      }
      if (Unknown232 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown232);
      }
      if (Unknown233 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown233);
      }
      if (Unknown234 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown234);
      }
      if (Unknown235 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown235);
      }
      if (Unknown236 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown236);
      }
      if (Unknown237 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown237);
      }
      if (Unknown238 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown238);
      }
      if (Unknown239 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown239);
      }
      if (Unknown240 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown240);
      }
      if (Unknown241 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown241);
      }
      if (Unknown242 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown242);
      }
      if (Unknown243 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown243);
      }
      if (Unknown244 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown244);
      }
      if (Unknown245 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown245);
      }
      if (Unknown246 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown246);
      }
      if (Unknown247 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown247);
      }
      if (Unknown248 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown248);
      }
      if (Unknown249 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown249);
      }
      if (Unknown250 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown250);
      }
      if (Unknown251 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown251);
      }
      if (Unknown252 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown252);
      }
      if (Unknown253 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown253);
      }
      if (Unknown254 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown254);
      }
      if (Unknown255 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown255);
      }
      if (Unknown256 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown256);
      }
      if (Unknown257 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown257);
      }
      if (Unknown258 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown258);
      }
      if (Unknown259 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown259);
      }
      if (Unknown260 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown260);
      }
      if (Unknown261 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown261);
      }
      if (Unknown262 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown262);
      }
      if (Unknown263 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown263);
      }
      if (Phys != 0F) {
        size += 2 + 4;
      }
      if (Thrust != 0F) {
        size += 2 + 4;
      }
      if (Strike != 0F) {
        size += 2 + 4;
      }
      if (Slash != 0F) {
        size += 2 + 4;
      }
      if (Magic != 0F) {
        size += 2 + 4;
      }
      if (Fire != 0F) {
        size += 2 + 4;
      }
      if (Lightning != 0F) {
        size += 2 + 4;
      }
      if (Dark != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    public void MergeFrom(NpcParam other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.BehaviorVariationId != 0) {
        BehaviorVariationId = other.BehaviorVariationId;
      }
      if (other.AiThinkId != 0) {
        AiThinkId = other.AiThinkId;
      }
      if (other.NameId != 0) {
        NameId = other.NameId;
      }
      if (other.TurnVelocity != 0F) {
        TurnVelocity = other.TurnVelocity;
      }
      if (other.HitHeight != 0F) {
        HitHeight = other.HitHeight;
      }
      if (other.HitRadius != 0F) {
        HitRadius = other.HitRadius;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      if (other.HitYOffset != 0F) {
        HitYOffset = other.HitYOffset;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Mp != 0) {
        Mp = other.Mp;
      }
      if (other.GetSoul != 0) {
        GetSoul = other.GetSoul;
      }
      if (other.ItemLotId1 != 0) {
        ItemLotId1 = other.ItemLotId1;
      }
      if (other.ItemLotId2 != 0) {
        ItemLotId2 = other.ItemLotId2;
      }
      if (other.ItemLotId3 != 0) {
        ItemLotId3 = other.ItemLotId3;
      }
      if (other.ItemLotId4 != 0) {
        ItemLotId4 = other.ItemLotId4;
      }
      if (other.ItemLotId5 != 0) {
        ItemLotId5 = other.ItemLotId5;
      }
      if (other.ItemLotId6 != 0) {
        ItemLotId6 = other.ItemLotId6;
      }
      if (other.HumanityLotId != 0) {
        HumanityLotId = other.HumanityLotId;
      }
      if (other.SpEffectID0 != 0) {
        SpEffectID0 = other.SpEffectID0;
      }
      if (other.SpEffectID1 != 0) {
        SpEffectID1 = other.SpEffectID1;
      }
      if (other.SpEffectID2 != 0) {
        SpEffectID2 = other.SpEffectID2;
      }
      if (other.SpEffectID3 != 0) {
        SpEffectID3 = other.SpEffectID3;
      }
      if (other.SpEffectID4 != 0) {
        SpEffectID4 = other.SpEffectID4;
      }
      if (other.SpEffectID5 != 0) {
        SpEffectID5 = other.SpEffectID5;
      }
      if (other.SpEffectID6 != 0) {
        SpEffectID6 = other.SpEffectID6;
      }
      if (other.SpEffectID7 != 0) {
        SpEffectID7 = other.SpEffectID7;
      }
      if (other.GameClearSpEffectID != 0) {
        GameClearSpEffectID = other.GameClearSpEffectID;
      }
      if (other.PhysGuardCutRate != 0F) {
        PhysGuardCutRate = other.PhysGuardCutRate;
      }
      if (other.MagGuardCutRate != 0F) {
        MagGuardCutRate = other.MagGuardCutRate;
      }
      if (other.FireGuardCutRate != 0F) {
        FireGuardCutRate = other.FireGuardCutRate;
      }
      if (other.ThunGuardCutRate != 0F) {
        ThunGuardCutRate = other.ThunGuardCutRate;
      }
      if (other.AnimIdOffset != 0) {
        AnimIdOffset = other.AnimIdOffset;
      }
      if (other.MoveAnimId != 0) {
        MoveAnimId = other.MoveAnimId;
      }
      if (other.SpMoveAnimId1 != 0) {
        SpMoveAnimId1 = other.SpMoveAnimId1;
      }
      if (other.SpMoveAnimId2 != 0) {
        SpMoveAnimId2 = other.SpMoveAnimId2;
      }
      if (other.NetworkWarpDist != 0F) {
        NetworkWarpDist = other.NetworkWarpDist;
      }
      if (other.DbgBehaviorR1 != 0) {
        DbgBehaviorR1 = other.DbgBehaviorR1;
      }
      if (other.DbgBehaviorL1 != 0) {
        DbgBehaviorL1 = other.DbgBehaviorL1;
      }
      if (other.DbgBehaviorR2 != 0) {
        DbgBehaviorR2 = other.DbgBehaviorR2;
      }
      if (other.DbgBehaviorL2 != 0) {
        DbgBehaviorL2 = other.DbgBehaviorL2;
      }
      if (other.DbgBehaviorRL != 0) {
        DbgBehaviorRL = other.DbgBehaviorRL;
      }
      if (other.DbgBehaviorRR != 0) {
        DbgBehaviorRR = other.DbgBehaviorRR;
      }
      if (other.DbgBehaviorRD != 0) {
        DbgBehaviorRD = other.DbgBehaviorRD;
      }
      if (other.DbgBehaviorRU != 0) {
        DbgBehaviorRU = other.DbgBehaviorRU;
      }
      if (other.DbgBehaviorLL != 0) {
        DbgBehaviorLL = other.DbgBehaviorLL;
      }
      if (other.DbgBehaviorLR != 0) {
        DbgBehaviorLR = other.DbgBehaviorLR;
      }
      if (other.DbgBehaviorLD != 0) {
        DbgBehaviorLD = other.DbgBehaviorLD;
      }
      if (other.DbgBehaviorLU != 0) {
        DbgBehaviorLU = other.DbgBehaviorLU;
      }
      if (other.AnimIdOffset2 != 0) {
        AnimIdOffset2 = other.AnimIdOffset2;
      }
      if (other.PartsDamageRate1 != 0F) {
        PartsDamageRate1 = other.PartsDamageRate1;
      }
      if (other.PartsDamageRate2 != 0F) {
        PartsDamageRate2 = other.PartsDamageRate2;
      }
      if (other.PartsDamageRate3 != 0F) {
        PartsDamageRate3 = other.PartsDamageRate3;
      }
      if (other.PartsDamageRate4 != 0F) {
        PartsDamageRate4 = other.PartsDamageRate4;
      }
      if (other.PartsDamageRate5 != 0F) {
        PartsDamageRate5 = other.PartsDamageRate5;
      }
      if (other.PartsDamageRate6 != 0F) {
        PartsDamageRate6 = other.PartsDamageRate6;
      }
      if (other.PartsDamageRate7 != 0F) {
        PartsDamageRate7 = other.PartsDamageRate7;
      }
      if (other.PartsDamageRate8 != 0F) {
        PartsDamageRate8 = other.PartsDamageRate8;
      }
      if (other.WeakPartsDamageRate != 0F) {
        WeakPartsDamageRate = other.WeakPartsDamageRate;
      }
      if (other.SuperArmorRecoverCorrection != 0F) {
        SuperArmorRecoverCorrection = other.SuperArmorRecoverCorrection;
      }
      if (other.SuperArmorBrakeKnockbackDist != 0F) {
        SuperArmorBrakeKnockbackDist = other.SuperArmorBrakeKnockbackDist;
      }
      if (other.Stamina != 0) {
        Stamina = other.Stamina;
      }
      if (other.StaminaRecoverBaseVel != 0) {
        StaminaRecoverBaseVel = other.StaminaRecoverBaseVel;
      }
      if (other.DefPhys != 0) {
        DefPhys = other.DefPhys;
      }
      if (other.DefSlash != 0) {
        DefSlash = other.DefSlash;
      }
      if (other.DefBlow != 0) {
        DefBlow = other.DefBlow;
      }
      if (other.DefThrust != 0) {
        DefThrust = other.DefThrust;
      }
      if (other.DefMag != 0) {
        DefMag = other.DefMag;
      }
      if (other.DefFire != 0) {
        DefFire = other.DefFire;
      }
      if (other.DefThun != 0) {
        DefThun = other.DefThun;
      }
      if (other.DefFlickPower != 0) {
        DefFlickPower = other.DefFlickPower;
      }
      if (other.ResistPoison != 0) {
        ResistPoison = other.ResistPoison;
      }
      if (other.ResistDisease != 0) {
        ResistDisease = other.ResistDisease;
      }
      if (other.ResistBleed != 0) {
        ResistBleed = other.ResistBleed;
      }
      if (other.ResistCurse != 0) {
        ResistCurse = other.ResistCurse;
      }
      if (other.GhostModelId != 0) {
        GhostModelId = other.GhostModelId;
      }
      if (other.NormalChangeResourceId != 0) {
        NormalChangeResourceId = other.NormalChangeResourceId;
      }
      if (other.GuardAngle != 0) {
        GuardAngle = other.GuardAngle;
      }
      if (other.SlashGuardCutRate != 0) {
        SlashGuardCutRate = other.SlashGuardCutRate;
      }
      if (other.BlowGuardCutRate != 0) {
        BlowGuardCutRate = other.BlowGuardCutRate;
      }
      if (other.ThrustGuardCutRate != 0) {
        ThrustGuardCutRate = other.ThrustGuardCutRate;
      }
      if (other.SuperArmorDurability != 0) {
        SuperArmorDurability = other.SuperArmorDurability;
      }
      if (other.NormalChangeTexChrId != 0) {
        NormalChangeTexChrId = other.NormalChangeTexChrId;
      }
      if (other.DropType != 0) {
        DropType = other.DropType;
      }
      if (other.KnockbackRate != 0) {
        KnockbackRate = other.KnockbackRate;
      }
      if (other.KnockbackParamId != 0) {
        KnockbackParamId = other.KnockbackParamId;
      }
      if (other.FallDamageDump != 0) {
        FallDamageDump = other.FallDamageDump;
      }
      if (other.StaminaGuardDef != 0) {
        StaminaGuardDef = other.StaminaGuardDef;
      }
      if (other.PcAttrB != 0) {
        PcAttrB = other.PcAttrB;
      }
      if (other.PcAttrW != 0) {
        PcAttrW = other.PcAttrW;
      }
      if (other.PcAttrL != 0) {
        PcAttrL = other.PcAttrL;
      }
      if (other.PcAttrR != 0) {
        PcAttrR = other.PcAttrR;
      }
      if (other.AreaAttrB != 0) {
        AreaAttrB = other.AreaAttrB;
      }
      if (other.AreaAttrW != 0) {
        AreaAttrW = other.AreaAttrW;
      }
      if (other.AreaAttrL != 0) {
        AreaAttrL = other.AreaAttrL;
      }
      if (other.AreaAttrR != 0) {
        AreaAttrR = other.AreaAttrR;
      }
      if (other.MpRecoverBaseVel != 0) {
        MpRecoverBaseVel = other.MpRecoverBaseVel;
      }
      if (other.FlickDamageCutRate != 0) {
        FlickDamageCutRate = other.FlickDamageCutRate;
      }
      if (other.DefaultLodParamId != 0) {
        DefaultLodParamId = other.DefaultLodParamId;
      }
      if (other.DrawType != 0) {
        DrawType = other.DrawType;
      }
      if (other.NpcType != 0) {
        NpcType = other.NpcType;
      }
      if (other.TeamType != 0) {
        TeamType = other.TeamType;
      }
      if (other.MoveType != 0) {
        MoveType = other.MoveType;
      }
      if (other.LockDist != 0) {
        LockDist = other.LockDist;
      }
      if (other.Material != 0) {
        Material = other.Material;
      }
      if (other.MaterialSfx != 0) {
        MaterialSfx = other.MaterialSfx;
      }
      if (other.MaterialWeak != 0) {
        MaterialWeak = other.MaterialWeak;
      }
      if (other.MaterialSfxWeak != 0) {
        MaterialSfxWeak = other.MaterialSfxWeak;
      }
      if (other.PartsDamageType != 0) {
        PartsDamageType = other.PartsDamageType;
      }
      if (other.MaxUndurationAng != 0) {
        MaxUndurationAng = other.MaxUndurationAng;
      }
      if (other.GuardLevel != 0) {
        GuardLevel = other.GuardLevel;
      }
      if (other.BurnSfxType != 0) {
        BurnSfxType = other.BurnSfxType;
      }
      if (other.PoisonGuardResist != 0) {
        PoisonGuardResist = other.PoisonGuardResist;
      }
      if (other.DiseaseGuardResist != 0) {
        DiseaseGuardResist = other.DiseaseGuardResist;
      }
      if (other.BloodGuardResist != 0) {
        BloodGuardResist = other.BloodGuardResist;
      }
      if (other.CurseGuardResist != 0) {
        CurseGuardResist = other.CurseGuardResist;
      }
      if (other.ParryAttack != 0) {
        ParryAttack = other.ParryAttack;
      }
      if (other.ParryDefense != 0) {
        ParryDefense = other.ParryDefense;
      }
      if (other.SfxSize != 0) {
        SfxSize = other.SfxSize;
      }
      if (other.PushOutCamRegionRadius != 0) {
        PushOutCamRegionRadius = other.PushOutCamRegionRadius;
      }
      if (other.HitStopType != 0) {
        HitStopType = other.HitStopType;
      }
      if (other.LadderEndChkOffsetTop != 0) {
        LadderEndChkOffsetTop = other.LadderEndChkOffsetTop;
      }
      if (other.LadderEndChkOffsetLow != 0) {
        LadderEndChkOffsetLow = other.LadderEndChkOffsetLow;
      }
      if (other.BitFields0 != 0) {
        BitFields0 = other.BitFields0;
      }
      if (other.BitFields1 != 0) {
        BitFields1 = other.BitFields1;
      }
      if (other.BitFields2 != 0) {
        BitFields2 = other.BitFields2;
      }
      if (other.BitFields3 != 0) {
        BitFields3 = other.BitFields3;
      }
      if (other.BitFields4 != 0) {
        BitFields4 = other.BitFields4;
      }
      if (other.Unknown10 != 0) {
        Unknown10 = other.Unknown10;
      }
      if (other.Unknown11 != 0) {
        Unknown11 = other.Unknown11;
      }
      if (other.Unknown12 != 0) {
        Unknown12 = other.Unknown12;
      }
      if (other.Unknown13 != 0) {
        Unknown13 = other.Unknown13;
      }
      if (other.Unknown14 != 0) {
        Unknown14 = other.Unknown14;
      }
      if (other.Unknown15 != 0) {
        Unknown15 = other.Unknown15;
      }
      if (other.Unknown16 != 0) {
        Unknown16 = other.Unknown16;
      }
      if (other.Unknown17 != 0) {
        Unknown17 = other.Unknown17;
      }
      if (other.Unknown18 != 0) {
        Unknown18 = other.Unknown18;
      }
      if (other.Unknown19 != 0) {
        Unknown19 = other.Unknown19;
      }
      if (other.Unknown110 != 0) {
        Unknown110 = other.Unknown110;
      }
      if (other.Unknown111 != 0) {
        Unknown111 = other.Unknown111;
      }
      if (other.Unknown112 != 0) {
        Unknown112 = other.Unknown112;
      }
      if (other.Unknown113 != 0) {
        Unknown113 = other.Unknown113;
      }
      if (other.Unknown114 != 0) {
        Unknown114 = other.Unknown114;
      }
      if (other.Unknown115 != 0) {
        Unknown115 = other.Unknown115;
      }
      if (other.DefDark != 0) {
        DefDark = other.DefDark;
      }
      if (other.Unknown20 != 0) {
        Unknown20 = other.Unknown20;
      }
      if (other.Unknown21 != 0) {
        Unknown21 = other.Unknown21;
      }
      if (other.Unknown22 != 0) {
        Unknown22 = other.Unknown22;
      }
      if (other.Unknown23 != 0) {
        Unknown23 = other.Unknown23;
      }
      if (other.Unknown24 != 0) {
        Unknown24 = other.Unknown24;
      }
      if (other.Unknown25 != 0) {
        Unknown25 = other.Unknown25;
      }
      if (other.Unknown26 != 0) {
        Unknown26 = other.Unknown26;
      }
      if (other.Unknown27 != 0) {
        Unknown27 = other.Unknown27;
      }
      if (other.Unknown28 != 0) {
        Unknown28 = other.Unknown28;
      }
      if (other.Unknown29 != 0) {
        Unknown29 = other.Unknown29;
      }
      if (other.Unknown210 != 0) {
        Unknown210 = other.Unknown210;
      }
      if (other.Unknown211 != 0) {
        Unknown211 = other.Unknown211;
      }
      if (other.Unknown212 != 0) {
        Unknown212 = other.Unknown212;
      }
      if (other.Unknown213 != 0) {
        Unknown213 = other.Unknown213;
      }
      if (other.Unknown214 != 0) {
        Unknown214 = other.Unknown214;
      }
      if (other.Unknown215 != 0) {
        Unknown215 = other.Unknown215;
      }
      if (other.Unknown216 != 0) {
        Unknown216 = other.Unknown216;
      }
      if (other.Unknown217 != 0) {
        Unknown217 = other.Unknown217;
      }
      if (other.Unknown218 != 0) {
        Unknown218 = other.Unknown218;
      }
      if (other.Unknown219 != 0) {
        Unknown219 = other.Unknown219;
      }
      if (other.Unknown220 != 0) {
        Unknown220 = other.Unknown220;
      }
      if (other.Unknown221 != 0) {
        Unknown221 = other.Unknown221;
      }
      if (other.Unknown222 != 0) {
        Unknown222 = other.Unknown222;
      }
      if (other.Unknown223 != 0) {
        Unknown223 = other.Unknown223;
      }
      if (other.Unknown224 != 0) {
        Unknown224 = other.Unknown224;
      }
      if (other.Unknown225 != 0) {
        Unknown225 = other.Unknown225;
      }
      if (other.Unknown226 != 0) {
        Unknown226 = other.Unknown226;
      }
      if (other.Unknown227 != 0) {
        Unknown227 = other.Unknown227;
      }
      if (other.Unknown228 != 0) {
        Unknown228 = other.Unknown228;
      }
      if (other.Unknown229 != 0) {
        Unknown229 = other.Unknown229;
      }
      if (other.Unknown230 != 0) {
        Unknown230 = other.Unknown230;
      }
      if (other.Unknown231 != 0) {
        Unknown231 = other.Unknown231;
      }
      if (other.Unknown232 != 0) {
        Unknown232 = other.Unknown232;
      }
      if (other.Unknown233 != 0) {
        Unknown233 = other.Unknown233;
      }
      if (other.Unknown234 != 0) {
        Unknown234 = other.Unknown234;
      }
      if (other.Unknown235 != 0) {
        Unknown235 = other.Unknown235;
      }
      if (other.Unknown236 != 0) {
        Unknown236 = other.Unknown236;
      }
      if (other.Unknown237 != 0) {
        Unknown237 = other.Unknown237;
      }
      if (other.Unknown238 != 0) {
        Unknown238 = other.Unknown238;
      }
      if (other.Unknown239 != 0) {
        Unknown239 = other.Unknown239;
      }
      if (other.Unknown240 != 0) {
        Unknown240 = other.Unknown240;
      }
      if (other.Unknown241 != 0) {
        Unknown241 = other.Unknown241;
      }
      if (other.Unknown242 != 0) {
        Unknown242 = other.Unknown242;
      }
      if (other.Unknown243 != 0) {
        Unknown243 = other.Unknown243;
      }
      if (other.Unknown244 != 0) {
        Unknown244 = other.Unknown244;
      }
      if (other.Unknown245 != 0) {
        Unknown245 = other.Unknown245;
      }
      if (other.Unknown246 != 0) {
        Unknown246 = other.Unknown246;
      }
      if (other.Unknown247 != 0) {
        Unknown247 = other.Unknown247;
      }
      if (other.Unknown248 != 0) {
        Unknown248 = other.Unknown248;
      }
      if (other.Unknown249 != 0) {
        Unknown249 = other.Unknown249;
      }
      if (other.Unknown250 != 0) {
        Unknown250 = other.Unknown250;
      }
      if (other.Unknown251 != 0) {
        Unknown251 = other.Unknown251;
      }
      if (other.Unknown252 != 0) {
        Unknown252 = other.Unknown252;
      }
      if (other.Unknown253 != 0) {
        Unknown253 = other.Unknown253;
      }
      if (other.Unknown254 != 0) {
        Unknown254 = other.Unknown254;
      }
      if (other.Unknown255 != 0) {
        Unknown255 = other.Unknown255;
      }
      if (other.Unknown256 != 0) {
        Unknown256 = other.Unknown256;
      }
      if (other.Unknown257 != 0) {
        Unknown257 = other.Unknown257;
      }
      if (other.Unknown258 != 0) {
        Unknown258 = other.Unknown258;
      }
      if (other.Unknown259 != 0) {
        Unknown259 = other.Unknown259;
      }
      if (other.Unknown260 != 0) {
        Unknown260 = other.Unknown260;
      }
      if (other.Unknown261 != 0) {
        Unknown261 = other.Unknown261;
      }
      if (other.Unknown262 != 0) {
        Unknown262 = other.Unknown262;
      }
      if (other.Unknown263 != 0) {
        Unknown263 = other.Unknown263;
      }
      if (other.Phys != 0F) {
        Phys = other.Phys;
      }
      if (other.Thrust != 0F) {
        Thrust = other.Thrust;
      }
      if (other.Strike != 0F) {
        Strike = other.Strike;
      }
      if (other.Slash != 0F) {
        Slash = other.Slash;
      }
      if (other.Magic != 0F) {
        Magic = other.Magic;
      }
      if (other.Fire != 0F) {
        Fire = other.Fire;
      }
      if (other.Lightning != 0F) {
        Lightning = other.Lightning;
      }
      if (other.Dark != 0F) {
        Dark = other.Dark;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadSInt32();
            break;
          }
          case 32: {
            Offset = input.ReadSInt32();
            break;
          }
          case 40: {
            BehaviorVariationId = input.ReadSInt32();
            break;
          }
          case 48: {
            AiThinkId = input.ReadSInt32();
            break;
          }
          case 56: {
            NameId = input.ReadSInt32();
            break;
          }
          case 69: {
            TurnVelocity = input.ReadFloat();
            break;
          }
          case 77: {
            HitHeight = input.ReadFloat();
            break;
          }
          case 85: {
            HitRadius = input.ReadFloat();
            break;
          }
          case 88: {
            Weight = input.ReadUInt32();
            break;
          }
          case 101: {
            HitYOffset = input.ReadFloat();
            break;
          }
          case 104: {
            Hp = input.ReadUInt32();
            break;
          }
          case 112: {
            Mp = input.ReadUInt32();
            break;
          }
          case 120: {
            GetSoul = input.ReadUInt32();
            break;
          }
          case 128: {
            ItemLotId1 = input.ReadSInt32();
            break;
          }
          case 136: {
            ItemLotId2 = input.ReadSInt32();
            break;
          }
          case 144: {
            ItemLotId3 = input.ReadSInt32();
            break;
          }
          case 152: {
            ItemLotId4 = input.ReadSInt32();
            break;
          }
          case 160: {
            ItemLotId5 = input.ReadSInt32();
            break;
          }
          case 168: {
            ItemLotId6 = input.ReadSInt32();
            break;
          }
          case 176: {
            HumanityLotId = input.ReadSInt32();
            break;
          }
          case 184: {
            SpEffectID0 = input.ReadSInt32();
            break;
          }
          case 192: {
            SpEffectID1 = input.ReadSInt32();
            break;
          }
          case 200: {
            SpEffectID2 = input.ReadSInt32();
            break;
          }
          case 208: {
            SpEffectID3 = input.ReadSInt32();
            break;
          }
          case 216: {
            SpEffectID4 = input.ReadSInt32();
            break;
          }
          case 224: {
            SpEffectID5 = input.ReadSInt32();
            break;
          }
          case 232: {
            SpEffectID6 = input.ReadSInt32();
            break;
          }
          case 240: {
            SpEffectID7 = input.ReadSInt32();
            break;
          }
          case 248: {
            GameClearSpEffectID = input.ReadSInt32();
            break;
          }
          case 261: {
            PhysGuardCutRate = input.ReadFloat();
            break;
          }
          case 269: {
            MagGuardCutRate = input.ReadFloat();
            break;
          }
          case 277: {
            FireGuardCutRate = input.ReadFloat();
            break;
          }
          case 285: {
            ThunGuardCutRate = input.ReadFloat();
            break;
          }
          case 288: {
            AnimIdOffset = input.ReadSInt32();
            break;
          }
          case 296: {
            MoveAnimId = input.ReadSInt32();
            break;
          }
          case 304: {
            SpMoveAnimId1 = input.ReadSInt32();
            break;
          }
          case 312: {
            SpMoveAnimId2 = input.ReadSInt32();
            break;
          }
          case 325: {
            NetworkWarpDist = input.ReadFloat();
            break;
          }
          case 328: {
            DbgBehaviorR1 = input.ReadSInt32();
            break;
          }
          case 336: {
            DbgBehaviorL1 = input.ReadSInt32();
            break;
          }
          case 344: {
            DbgBehaviorR2 = input.ReadSInt32();
            break;
          }
          case 352: {
            DbgBehaviorL2 = input.ReadSInt32();
            break;
          }
          case 360: {
            DbgBehaviorRL = input.ReadSInt32();
            break;
          }
          case 368: {
            DbgBehaviorRR = input.ReadSInt32();
            break;
          }
          case 376: {
            DbgBehaviorRD = input.ReadSInt32();
            break;
          }
          case 384: {
            DbgBehaviorRU = input.ReadSInt32();
            break;
          }
          case 392: {
            DbgBehaviorLL = input.ReadSInt32();
            break;
          }
          case 400: {
            DbgBehaviorLR = input.ReadSInt32();
            break;
          }
          case 408: {
            DbgBehaviorLD = input.ReadSInt32();
            break;
          }
          case 416: {
            DbgBehaviorLU = input.ReadSInt32();
            break;
          }
          case 424: {
            AnimIdOffset2 = input.ReadSInt32();
            break;
          }
          case 437: {
            PartsDamageRate1 = input.ReadFloat();
            break;
          }
          case 445: {
            PartsDamageRate2 = input.ReadFloat();
            break;
          }
          case 453: {
            PartsDamageRate3 = input.ReadFloat();
            break;
          }
          case 461: {
            PartsDamageRate4 = input.ReadFloat();
            break;
          }
          case 469: {
            PartsDamageRate5 = input.ReadFloat();
            break;
          }
          case 477: {
            PartsDamageRate6 = input.ReadFloat();
            break;
          }
          case 485: {
            PartsDamageRate7 = input.ReadFloat();
            break;
          }
          case 493: {
            PartsDamageRate8 = input.ReadFloat();
            break;
          }
          case 501: {
            WeakPartsDamageRate = input.ReadFloat();
            break;
          }
          case 509: {
            SuperArmorRecoverCorrection = input.ReadFloat();
            break;
          }
          case 517: {
            SuperArmorBrakeKnockbackDist = input.ReadFloat();
            break;
          }
          case 520: {
            Stamina = input.ReadUInt32();
            break;
          }
          case 528: {
            StaminaRecoverBaseVel = input.ReadUInt32();
            break;
          }
          case 536: {
            DefPhys = input.ReadSInt32();
            break;
          }
          case 544: {
            DefSlash = input.ReadSInt32();
            break;
          }
          case 552: {
            DefBlow = input.ReadSInt32();
            break;
          }
          case 560: {
            DefThrust = input.ReadSInt32();
            break;
          }
          case 568: {
            DefMag = input.ReadSInt32();
            break;
          }
          case 576: {
            DefFire = input.ReadSInt32();
            break;
          }
          case 584: {
            DefThun = input.ReadSInt32();
            break;
          }
          case 592: {
            DefFlickPower = input.ReadUInt32();
            break;
          }
          case 600: {
            ResistPoison = input.ReadUInt32();
            break;
          }
          case 608: {
            ResistDisease = input.ReadUInt32();
            break;
          }
          case 616: {
            ResistBleed = input.ReadUInt32();
            break;
          }
          case 624: {
            ResistCurse = input.ReadUInt32();
            break;
          }
          case 632: {
            GhostModelId = input.ReadSInt32();
            break;
          }
          case 640: {
            NormalChangeResourceId = input.ReadSInt32();
            break;
          }
          case 648: {
            GuardAngle = input.ReadSInt32();
            break;
          }
          case 656: {
            SlashGuardCutRate = input.ReadSInt32();
            break;
          }
          case 664: {
            BlowGuardCutRate = input.ReadSInt32();
            break;
          }
          case 672: {
            ThrustGuardCutRate = input.ReadSInt32();
            break;
          }
          case 680: {
            SuperArmorDurability = input.ReadSInt32();
            break;
          }
          case 688: {
            NormalChangeTexChrId = input.ReadSInt32();
            break;
          }
          case 696: {
            DropType = input.ReadUInt32();
            break;
          }
          case 704: {
            KnockbackRate = input.ReadUInt32();
            break;
          }
          case 712: {
            KnockbackParamId = input.ReadUInt32();
            break;
          }
          case 720: {
            FallDamageDump = input.ReadUInt32();
            break;
          }
          case 728: {
            StaminaGuardDef = input.ReadUInt32();
            break;
          }
          case 736: {
            PcAttrB = input.ReadUInt32();
            break;
          }
          case 744: {
            PcAttrW = input.ReadUInt32();
            break;
          }
          case 752: {
            PcAttrL = input.ReadUInt32();
            break;
          }
          case 760: {
            PcAttrR = input.ReadUInt32();
            break;
          }
          case 768: {
            AreaAttrB = input.ReadUInt32();
            break;
          }
          case 776: {
            AreaAttrW = input.ReadUInt32();
            break;
          }
          case 784: {
            AreaAttrL = input.ReadUInt32();
            break;
          }
          case 792: {
            AreaAttrR = input.ReadUInt32();
            break;
          }
          case 800: {
            MpRecoverBaseVel = input.ReadUInt32();
            break;
          }
          case 808: {
            FlickDamageCutRate = input.ReadUInt32();
            break;
          }
          case 816: {
            DefaultLodParamId = input.ReadSInt32();
            break;
          }
          case 824: {
            DrawType = input.ReadUInt32();
            break;
          }
          case 832: {
            NpcType = input.ReadUInt32();
            break;
          }
          case 840: {
            TeamType = input.ReadUInt32();
            break;
          }
          case 848: {
            MoveType = input.ReadUInt32();
            break;
          }
          case 856: {
            LockDist = input.ReadUInt32();
            break;
          }
          case 864: {
            Material = input.ReadUInt32();
            break;
          }
          case 872: {
            MaterialSfx = input.ReadUInt32();
            break;
          }
          case 880: {
            MaterialWeak = input.ReadUInt32();
            break;
          }
          case 888: {
            MaterialSfxWeak = input.ReadUInt32();
            break;
          }
          case 896: {
            PartsDamageType = input.ReadUInt32();
            break;
          }
          case 904: {
            MaxUndurationAng = input.ReadUInt32();
            break;
          }
          case 912: {
            GuardLevel = input.ReadSInt32();
            break;
          }
          case 920: {
            BurnSfxType = input.ReadUInt32();
            break;
          }
          case 928: {
            PoisonGuardResist = input.ReadSInt32();
            break;
          }
          case 936: {
            DiseaseGuardResist = input.ReadSInt32();
            break;
          }
          case 944: {
            BloodGuardResist = input.ReadSInt32();
            break;
          }
          case 952: {
            CurseGuardResist = input.ReadSInt32();
            break;
          }
          case 960: {
            ParryAttack = input.ReadUInt32();
            break;
          }
          case 968: {
            ParryDefense = input.ReadUInt32();
            break;
          }
          case 976: {
            SfxSize = input.ReadUInt32();
            break;
          }
          case 984: {
            PushOutCamRegionRadius = input.ReadUInt32();
            break;
          }
          case 992: {
            HitStopType = input.ReadUInt32();
            break;
          }
          case 1000: {
            LadderEndChkOffsetTop = input.ReadUInt32();
            break;
          }
          case 1008: {
            LadderEndChkOffsetLow = input.ReadUInt32();
            break;
          }
          case 1016: {
            BitFields0 = input.ReadUInt32();
            break;
          }
          case 1024: {
            BitFields1 = input.ReadUInt32();
            break;
          }
          case 1032: {
            BitFields2 = input.ReadUInt32();
            break;
          }
          case 1040: {
            BitFields3 = input.ReadUInt32();
            break;
          }
          case 1048: {
            BitFields4 = input.ReadUInt32();
            break;
          }
          case 1056: {
            Unknown10 = input.ReadUInt32();
            break;
          }
          case 1064: {
            Unknown11 = input.ReadUInt32();
            break;
          }
          case 1072: {
            Unknown12 = input.ReadUInt32();
            break;
          }
          case 1080: {
            Unknown13 = input.ReadUInt32();
            break;
          }
          case 1088: {
            Unknown14 = input.ReadUInt32();
            break;
          }
          case 1096: {
            Unknown15 = input.ReadUInt32();
            break;
          }
          case 1104: {
            Unknown16 = input.ReadUInt32();
            break;
          }
          case 1112: {
            Unknown17 = input.ReadUInt32();
            break;
          }
          case 1120: {
            Unknown18 = input.ReadUInt32();
            break;
          }
          case 1128: {
            Unknown19 = input.ReadUInt32();
            break;
          }
          case 1136: {
            Unknown110 = input.ReadUInt32();
            break;
          }
          case 1144: {
            Unknown111 = input.ReadUInt32();
            break;
          }
          case 1152: {
            Unknown112 = input.ReadUInt32();
            break;
          }
          case 1160: {
            Unknown113 = input.ReadUInt32();
            break;
          }
          case 1168: {
            Unknown114 = input.ReadUInt32();
            break;
          }
          case 1176: {
            Unknown115 = input.ReadUInt32();
            break;
          }
          case 1184: {
            DefDark = input.ReadSInt32();
            break;
          }
          case 1192: {
            Unknown20 = input.ReadUInt32();
            break;
          }
          case 1200: {
            Unknown21 = input.ReadUInt32();
            break;
          }
          case 1208: {
            Unknown22 = input.ReadUInt32();
            break;
          }
          case 1216: {
            Unknown23 = input.ReadUInt32();
            break;
          }
          case 1224: {
            Unknown24 = input.ReadUInt32();
            break;
          }
          case 1232: {
            Unknown25 = input.ReadUInt32();
            break;
          }
          case 1240: {
            Unknown26 = input.ReadUInt32();
            break;
          }
          case 1248: {
            Unknown27 = input.ReadUInt32();
            break;
          }
          case 1256: {
            Unknown28 = input.ReadUInt32();
            break;
          }
          case 1264: {
            Unknown29 = input.ReadUInt32();
            break;
          }
          case 1272: {
            Unknown210 = input.ReadUInt32();
            break;
          }
          case 1280: {
            Unknown211 = input.ReadUInt32();
            break;
          }
          case 1288: {
            Unknown212 = input.ReadUInt32();
            break;
          }
          case 1296: {
            Unknown213 = input.ReadUInt32();
            break;
          }
          case 1304: {
            Unknown214 = input.ReadUInt32();
            break;
          }
          case 1312: {
            Unknown215 = input.ReadUInt32();
            break;
          }
          case 1320: {
            Unknown216 = input.ReadUInt32();
            break;
          }
          case 1328: {
            Unknown217 = input.ReadUInt32();
            break;
          }
          case 1336: {
            Unknown218 = input.ReadUInt32();
            break;
          }
          case 1344: {
            Unknown219 = input.ReadUInt32();
            break;
          }
          case 1352: {
            Unknown220 = input.ReadUInt32();
            break;
          }
          case 1360: {
            Unknown221 = input.ReadUInt32();
            break;
          }
          case 1368: {
            Unknown222 = input.ReadUInt32();
            break;
          }
          case 1376: {
            Unknown223 = input.ReadUInt32();
            break;
          }
          case 1384: {
            Unknown224 = input.ReadUInt32();
            break;
          }
          case 1392: {
            Unknown225 = input.ReadUInt32();
            break;
          }
          case 1400: {
            Unknown226 = input.ReadUInt32();
            break;
          }
          case 1408: {
            Unknown227 = input.ReadUInt32();
            break;
          }
          case 1416: {
            Unknown228 = input.ReadUInt32();
            break;
          }
          case 1424: {
            Unknown229 = input.ReadUInt32();
            break;
          }
          case 1432: {
            Unknown230 = input.ReadUInt32();
            break;
          }
          case 1440: {
            Unknown231 = input.ReadUInt32();
            break;
          }
          case 1448: {
            Unknown232 = input.ReadUInt32();
            break;
          }
          case 1456: {
            Unknown233 = input.ReadUInt32();
            break;
          }
          case 1464: {
            Unknown234 = input.ReadUInt32();
            break;
          }
          case 1472: {
            Unknown235 = input.ReadUInt32();
            break;
          }
          case 1480: {
            Unknown236 = input.ReadUInt32();
            break;
          }
          case 1488: {
            Unknown237 = input.ReadUInt32();
            break;
          }
          case 1496: {
            Unknown238 = input.ReadUInt32();
            break;
          }
          case 1504: {
            Unknown239 = input.ReadUInt32();
            break;
          }
          case 1512: {
            Unknown240 = input.ReadUInt32();
            break;
          }
          case 1520: {
            Unknown241 = input.ReadUInt32();
            break;
          }
          case 1528: {
            Unknown242 = input.ReadUInt32();
            break;
          }
          case 1536: {
            Unknown243 = input.ReadUInt32();
            break;
          }
          case 1544: {
            Unknown244 = input.ReadUInt32();
            break;
          }
          case 1552: {
            Unknown245 = input.ReadUInt32();
            break;
          }
          case 1560: {
            Unknown246 = input.ReadUInt32();
            break;
          }
          case 1568: {
            Unknown247 = input.ReadUInt32();
            break;
          }
          case 1576: {
            Unknown248 = input.ReadUInt32();
            break;
          }
          case 1584: {
            Unknown249 = input.ReadUInt32();
            break;
          }
          case 1592: {
            Unknown250 = input.ReadUInt32();
            break;
          }
          case 1600: {
            Unknown251 = input.ReadUInt32();
            break;
          }
          case 1608: {
            Unknown252 = input.ReadUInt32();
            break;
          }
          case 1616: {
            Unknown253 = input.ReadUInt32();
            break;
          }
          case 1624: {
            Unknown254 = input.ReadUInt32();
            break;
          }
          case 1632: {
            Unknown255 = input.ReadUInt32();
            break;
          }
          case 1640: {
            Unknown256 = input.ReadUInt32();
            break;
          }
          case 1648: {
            Unknown257 = input.ReadUInt32();
            break;
          }
          case 1656: {
            Unknown258 = input.ReadUInt32();
            break;
          }
          case 1664: {
            Unknown259 = input.ReadUInt32();
            break;
          }
          case 1672: {
            Unknown260 = input.ReadUInt32();
            break;
          }
          case 1680: {
            Unknown261 = input.ReadUInt32();
            break;
          }
          case 1688: {
            Unknown262 = input.ReadUInt32();
            break;
          }
          case 1696: {
            Unknown263 = input.ReadUInt32();
            break;
          }
          case 1709: {
            Phys = input.ReadFloat();
            break;
          }
          case 1717: {
            Thrust = input.ReadFloat();
            break;
          }
          case 1725: {
            Strike = input.ReadFloat();
            break;
          }
          case 1733: {
            Slash = input.ReadFloat();
            break;
          }
          case 1741: {
            Magic = input.ReadFloat();
            break;
          }
          case 1749: {
            Fire = input.ReadFloat();
            break;
          }
          case 1757: {
            Lightning = input.ReadFloat();
            break;
          }
          case 1765: {
            Dark = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BehaviorParam : pb::IMessage<BehaviorParam> {
    private static readonly pb::MessageParser<BehaviorParam> _parser = new pb::MessageParser<BehaviorParam>(() => new BehaviorParam());
    public static pb::MessageParser<BehaviorParam> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ds3Ext.Ds3ExtReflection.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BehaviorParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BehaviorParam(BehaviorParam other) : this() {
      id_ = other.id_;
      index_ = other.index_;
      offset_ = other.offset_;
      variationId_ = other.variationId_;
      behaviorJudgeId_ = other.behaviorJudgeId_;
      ezStateBehaviorTypeOld_ = other.ezStateBehaviorTypeOld_;
      refType_ = other.refType_;
      padding10_ = other.padding10_;
      padding11_ = other.padding11_;
      referenceId_ = other.referenceId_;
      sfxVariationId_ = other.sfxVariationId_;
      stamina_ = other.stamina_;
      mp_ = other.mp_;
      category_ = other.category_;
      heroPoint_ = other.heroPoint_;
      padding20_ = other.padding20_;
      padding21_ = other.padding21_;
    }

    public BehaviorParam Clone() {
      return new BehaviorParam(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Offset" field.</summary>
    public const int OffsetFieldNumber = 4;
    private int offset_;
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "VariationId" field.</summary>
    public const int VariationIdFieldNumber = 5;
    private int variationId_;
    public int VariationId {
      get { return variationId_; }
      set {
        variationId_ = value;
      }
    }

    /// <summary>Field number for the "BehaviorJudgeId" field.</summary>
    public const int BehaviorJudgeIdFieldNumber = 6;
    private int behaviorJudgeId_;
    public int BehaviorJudgeId {
      get { return behaviorJudgeId_; }
      set {
        behaviorJudgeId_ = value;
      }
    }

    /// <summary>Field number for the "EzStateBehaviorType_old" field.</summary>
    public const int EzStateBehaviorTypeOldFieldNumber = 7;
    private uint ezStateBehaviorTypeOld_;
    public uint EzStateBehaviorTypeOld {
      get { return ezStateBehaviorTypeOld_; }
      set {
        ezStateBehaviorTypeOld_ = value;
      }
    }

    /// <summary>Field number for the "RefType" field.</summary>
    public const int RefTypeFieldNumber = 8;
    private uint refType_;
    public uint RefType {
      get { return refType_; }
      set {
        refType_ = value;
      }
    }

    /// <summary>Field number for the "Padding10" field.</summary>
    public const int Padding10FieldNumber = 9;
    private uint padding10_;
    public uint Padding10 {
      get { return padding10_; }
      set {
        padding10_ = value;
      }
    }

    /// <summary>Field number for the "Padding11" field.</summary>
    public const int Padding11FieldNumber = 10;
    private uint padding11_;
    public uint Padding11 {
      get { return padding11_; }
      set {
        padding11_ = value;
      }
    }

    /// <summary>Field number for the "ReferenceId" field.</summary>
    public const int ReferenceIdFieldNumber = 11;
    private int referenceId_;
    public int ReferenceId {
      get { return referenceId_; }
      set {
        referenceId_ = value;
      }
    }

    /// <summary>Field number for the "SfxVariationId" field.</summary>
    public const int SfxVariationIdFieldNumber = 12;
    private int sfxVariationId_;
    public int SfxVariationId {
      get { return sfxVariationId_; }
      set {
        sfxVariationId_ = value;
      }
    }

    /// <summary>Field number for the "Stamina" field.</summary>
    public const int StaminaFieldNumber = 13;
    private int stamina_;
    public int Stamina {
      get { return stamina_; }
      set {
        stamina_ = value;
      }
    }

    /// <summary>Field number for the "Mp" field.</summary>
    public const int MpFieldNumber = 14;
    private int mp_;
    public int Mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    /// <summary>Field number for the "Category" field.</summary>
    public const int CategoryFieldNumber = 15;
    private uint category_;
    public uint Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    /// <summary>Field number for the "HeroPoint" field.</summary>
    public const int HeroPointFieldNumber = 16;
    private uint heroPoint_;
    public uint HeroPoint {
      get { return heroPoint_; }
      set {
        heroPoint_ = value;
      }
    }

    /// <summary>Field number for the "Padding20" field.</summary>
    public const int Padding20FieldNumber = 17;
    private uint padding20_;
    public uint Padding20 {
      get { return padding20_; }
      set {
        padding20_ = value;
      }
    }

    /// <summary>Field number for the "Padding21" field.</summary>
    public const int Padding21FieldNumber = 18;
    private uint padding21_;
    public uint Padding21 {
      get { return padding21_; }
      set {
        padding21_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BehaviorParam);
    }

    public bool Equals(BehaviorParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Index != other.Index) return false;
      if (Offset != other.Offset) return false;
      if (VariationId != other.VariationId) return false;
      if (BehaviorJudgeId != other.BehaviorJudgeId) return false;
      if (EzStateBehaviorTypeOld != other.EzStateBehaviorTypeOld) return false;
      if (RefType != other.RefType) return false;
      if (Padding10 != other.Padding10) return false;
      if (Padding11 != other.Padding11) return false;
      if (ReferenceId != other.ReferenceId) return false;
      if (SfxVariationId != other.SfxVariationId) return false;
      if (Stamina != other.Stamina) return false;
      if (Mp != other.Mp) return false;
      if (Category != other.Category) return false;
      if (HeroPoint != other.HeroPoint) return false;
      if (Padding20 != other.Padding20) return false;
      if (Padding21 != other.Padding21) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (VariationId != 0) hash ^= VariationId.GetHashCode();
      if (BehaviorJudgeId != 0) hash ^= BehaviorJudgeId.GetHashCode();
      if (EzStateBehaviorTypeOld != 0) hash ^= EzStateBehaviorTypeOld.GetHashCode();
      if (RefType != 0) hash ^= RefType.GetHashCode();
      if (Padding10 != 0) hash ^= Padding10.GetHashCode();
      if (Padding11 != 0) hash ^= Padding11.GetHashCode();
      if (ReferenceId != 0) hash ^= ReferenceId.GetHashCode();
      if (SfxVariationId != 0) hash ^= SfxVariationId.GetHashCode();
      if (Stamina != 0) hash ^= Stamina.GetHashCode();
      if (Mp != 0) hash ^= Mp.GetHashCode();
      if (Category != 0) hash ^= Category.GetHashCode();
      if (HeroPoint != 0) hash ^= HeroPoint.GetHashCode();
      if (Padding20 != 0) hash ^= Padding20.GetHashCode();
      if (Padding21 != 0) hash ^= Padding21.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Index);
      }
      if (Offset != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Offset);
      }
      if (VariationId != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(VariationId);
      }
      if (BehaviorJudgeId != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(BehaviorJudgeId);
      }
      if (EzStateBehaviorTypeOld != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(EzStateBehaviorTypeOld);
      }
      if (RefType != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(RefType);
      }
      if (Padding10 != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Padding10);
      }
      if (Padding11 != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Padding11);
      }
      if (ReferenceId != 0) {
        output.WriteRawTag(88);
        output.WriteSInt32(ReferenceId);
      }
      if (SfxVariationId != 0) {
        output.WriteRawTag(96);
        output.WriteSInt32(SfxVariationId);
      }
      if (Stamina != 0) {
        output.WriteRawTag(104);
        output.WriteSInt32(Stamina);
      }
      if (Mp != 0) {
        output.WriteRawTag(112);
        output.WriteSInt32(Mp);
      }
      if (Category != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(Category);
      }
      if (HeroPoint != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(HeroPoint);
      }
      if (Padding20 != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(Padding20);
      }
      if (Padding21 != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Padding21);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Index);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Offset);
      }
      if (VariationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(VariationId);
      }
      if (BehaviorJudgeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BehaviorJudgeId);
      }
      if (EzStateBehaviorTypeOld != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EzStateBehaviorTypeOld);
      }
      if (RefType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RefType);
      }
      if (Padding10 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Padding10);
      }
      if (Padding11 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Padding11);
      }
      if (ReferenceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ReferenceId);
      }
      if (SfxVariationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SfxVariationId);
      }
      if (Stamina != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Stamina);
      }
      if (Mp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Mp);
      }
      if (Category != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Category);
      }
      if (HeroPoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HeroPoint);
      }
      if (Padding20 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Padding20);
      }
      if (Padding21 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Padding21);
      }
      return size;
    }

    public void MergeFrom(BehaviorParam other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.VariationId != 0) {
        VariationId = other.VariationId;
      }
      if (other.BehaviorJudgeId != 0) {
        BehaviorJudgeId = other.BehaviorJudgeId;
      }
      if (other.EzStateBehaviorTypeOld != 0) {
        EzStateBehaviorTypeOld = other.EzStateBehaviorTypeOld;
      }
      if (other.RefType != 0) {
        RefType = other.RefType;
      }
      if (other.Padding10 != 0) {
        Padding10 = other.Padding10;
      }
      if (other.Padding11 != 0) {
        Padding11 = other.Padding11;
      }
      if (other.ReferenceId != 0) {
        ReferenceId = other.ReferenceId;
      }
      if (other.SfxVariationId != 0) {
        SfxVariationId = other.SfxVariationId;
      }
      if (other.Stamina != 0) {
        Stamina = other.Stamina;
      }
      if (other.Mp != 0) {
        Mp = other.Mp;
      }
      if (other.Category != 0) {
        Category = other.Category;
      }
      if (other.HeroPoint != 0) {
        HeroPoint = other.HeroPoint;
      }
      if (other.Padding20 != 0) {
        Padding20 = other.Padding20;
      }
      if (other.Padding21 != 0) {
        Padding21 = other.Padding21;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadSInt32();
            break;
          }
          case 32: {
            Offset = input.ReadSInt32();
            break;
          }
          case 40: {
            VariationId = input.ReadSInt32();
            break;
          }
          case 48: {
            BehaviorJudgeId = input.ReadSInt32();
            break;
          }
          case 56: {
            EzStateBehaviorTypeOld = input.ReadUInt32();
            break;
          }
          case 64: {
            RefType = input.ReadUInt32();
            break;
          }
          case 72: {
            Padding10 = input.ReadUInt32();
            break;
          }
          case 80: {
            Padding11 = input.ReadUInt32();
            break;
          }
          case 88: {
            ReferenceId = input.ReadSInt32();
            break;
          }
          case 96: {
            SfxVariationId = input.ReadSInt32();
            break;
          }
          case 104: {
            Stamina = input.ReadSInt32();
            break;
          }
          case 112: {
            Mp = input.ReadSInt32();
            break;
          }
          case 120: {
            Category = input.ReadUInt32();
            break;
          }
          case 128: {
            HeroPoint = input.ReadUInt32();
            break;
          }
          case 136: {
            Padding20 = input.ReadUInt32();
            break;
          }
          case 144: {
            Padding21 = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AtkParam : pb::IMessage<AtkParam> {
    private static readonly pb::MessageParser<AtkParam> _parser = new pb::MessageParser<AtkParam>(() => new AtkParam());
    public static pb::MessageParser<AtkParam> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ds3Ext.Ds3ExtReflection.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AtkParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AtkParam(AtkParam other) : this() {
      id_ = other.id_;
      index_ = other.index_;
      offset_ = other.offset_;
      hit0Radius_ = other.hit0Radius_;
      hit1Radius_ = other.hit1Radius_;
      hit2Radius_ = other.hit2Radius_;
      hit3Radius_ = other.hit3Radius_;
      knockbackDist_ = other.knockbackDist_;
      hitStopTime_ = other.hitStopTime_;
      spEffectId0_ = other.spEffectId0_;
      spEffectId1_ = other.spEffectId1_;
      spEffectId2_ = other.spEffectId2_;
      spEffectId3_ = other.spEffectId3_;
      spEffectId4_ = other.spEffectId4_;
      hit0DmyPoly1_ = other.hit0DmyPoly1_;
      hit1DmyPoly1_ = other.hit1DmyPoly1_;
      hit2DmyPoly1_ = other.hit2DmyPoly1_;
      hit3DmyPoly1_ = other.hit3DmyPoly1_;
      hit0DmyPoly2_ = other.hit0DmyPoly2_;
      hit1DmyPoly2_ = other.hit1DmyPoly2_;
      hit2DmyPoly2_ = other.hit2DmyPoly2_;
      hit3DmyPoly2_ = other.hit3DmyPoly2_;
      blowingCorrection_ = other.blowingCorrection_;
      atkPhysCorrection_ = other.atkPhysCorrection_;
      atkMagCorrection_ = other.atkMagCorrection_;
      atkFireCorrection_ = other.atkFireCorrection_;
      atkThunCorrection_ = other.atkThunCorrection_;
      atkStamCorrection_ = other.atkStamCorrection_;
      guardAtkRateCorrection_ = other.guardAtkRateCorrection_;
      guardBreakCorrection_ = other.guardBreakCorrection_;
      atkThrowEscapeCorrection_ = other.atkThrowEscapeCorrection_;
      atkPhys_ = other.atkPhys_;
      atkMag_ = other.atkMag_;
      atkFire_ = other.atkFire_;
      atkThun_ = other.atkThun_;
      atkStam_ = other.atkStam_;
      guardAtkRate_ = other.guardAtkRate_;
      guardBreakRate_ = other.guardBreakRate_;
      atkSuperArmor_ = other.atkSuperArmor_;
      atkThrowEscape_ = other.atkThrowEscape_;
      atkObj_ = other.atkObj_;
      guardStaminaCutRate_ = other.guardStaminaCutRate_;
      guardRate_ = other.guardRate_;
      throwTypeId_ = other.throwTypeId_;
      hit0HitType_ = other.hit0HitType_;
      hit1HitType_ = other.hit1HitType_;
      hit2HitType_ = other.hit2HitType_;
      hit3HitType_ = other.hit3HitType_;
      hit0Priority_ = other.hit0Priority_;
      hit1Priority_ = other.hit1Priority_;
      hit2Priority_ = other.hit2Priority_;
      hit3Priority_ = other.hit3Priority_;
      damageLevel_ = other.damageLevel_;
      mapHitType_ = other.mapHitType_;
      guardCutCancelRate_ = other.guardCutCancelRate_;
      atkAttribute_ = other.atkAttribute_;
      specialAttributes_ = other.specialAttributes_;
      attackType_ = other.attackType_;
      atkMaterial_ = other.atkMaterial_;
      atkSize_ = other.atkSize_;
      defMaterial_ = other.defMaterial_;
      defSfxMaterial_ = other.defSfxMaterial_;
      hitSourceType_ = other.hitSourceType_;
      throwFlag_ = other.throwFlag_;
      bitField_ = other.bitField_;
      unknown0_ = other.unknown0_;
      unknown1_ = other.unknown1_;
      unknown2_ = other.unknown2_;
      unknown3_ = other.unknown3_;
      unknown4_ = other.unknown4_;
      unknown5_ = other.unknown5_;
      unknown6_ = other.unknown6_;
      unknown7_ = other.unknown7_;
      unknown8_ = other.unknown8_;
      unknown9_ = other.unknown9_;
      unknown10_ = other.unknown10_;
      unknown11_ = other.unknown11_;
      unknown12_ = other.unknown12_;
      unknown13_ = other.unknown13_;
      unknown14_ = other.unknown14_;
      unknown15_ = other.unknown15_;
      unknown16_ = other.unknown16_;
      unknown17_ = other.unknown17_;
      unknown18_ = other.unknown18_;
      unknown19_ = other.unknown19_;
      unknown20_ = other.unknown20_;
      unknown21_ = other.unknown21_;
      unknown22_ = other.unknown22_;
      unknown23_ = other.unknown23_;
      unknown24_ = other.unknown24_;
      unknown25_ = other.unknown25_;
      unknown26_ = other.unknown26_;
      unknown27_ = other.unknown27_;
      unknown28_ = other.unknown28_;
      unknown29_ = other.unknown29_;
      unknown30_ = other.unknown30_;
      unknown31_ = other.unknown31_;
      unknown32_ = other.unknown32_;
      unknown33_ = other.unknown33_;
      unknown34_ = other.unknown34_;
      unknown35_ = other.unknown35_;
      unknown36_ = other.unknown36_;
      unknown37_ = other.unknown37_;
      unknown38_ = other.unknown38_;
      unknown39_ = other.unknown39_;
      unknown40_ = other.unknown40_;
      unknown41_ = other.unknown41_;
      unknown42_ = other.unknown42_;
      unknown43_ = other.unknown43_;
      unknown44_ = other.unknown44_;
      unknown45_ = other.unknown45_;
      unknown46_ = other.unknown46_;
      unknown47_ = other.unknown47_;
      unknown48_ = other.unknown48_;
      unknown49_ = other.unknown49_;
      unknown50_ = other.unknown50_;
      unknown51_ = other.unknown51_;
      unknown52_ = other.unknown52_;
      unknown53_ = other.unknown53_;
      unknown54_ = other.unknown54_;
      unknown55_ = other.unknown55_;
      unknown56_ = other.unknown56_;
      unknown57_ = other.unknown57_;
      unknown58_ = other.unknown58_;
      unknown59_ = other.unknown59_;
      unknown60_ = other.unknown60_;
      unknown61_ = other.unknown61_;
      unknown62_ = other.unknown62_;
      unknown63_ = other.unknown63_;
      unknown64_ = other.unknown64_;
      unknown65_ = other.unknown65_;
      unknown66_ = other.unknown66_;
      unknown67_ = other.unknown67_;
      unknown68_ = other.unknown68_;
      unknown69_ = other.unknown69_;
      unknown70_ = other.unknown70_;
      unknown71_ = other.unknown71_;
      unknown72_ = other.unknown72_;
      unknown73_ = other.unknown73_;
      unknown74_ = other.unknown74_;
      unknown75_ = other.unknown75_;
      unknown76_ = other.unknown76_;
      unknown77_ = other.unknown77_;
      unknown78_ = other.unknown78_;
      unknown79_ = other.unknown79_;
      unknown80_ = other.unknown80_;
      unknown81_ = other.unknown81_;
      unknown82_ = other.unknown82_;
      unknown83_ = other.unknown83_;
      unknown84_ = other.unknown84_;
      unknown85_ = other.unknown85_;
      unknown86_ = other.unknown86_;
      unknown87_ = other.unknown87_;
      unknown88_ = other.unknown88_;
      unknown89_ = other.unknown89_;
      unknown90_ = other.unknown90_;
      unknown91_ = other.unknown91_;
      unknown92_ = other.unknown92_;
      unknown93_ = other.unknown93_;
      unknown94_ = other.unknown94_;
      unknown95_ = other.unknown95_;
      unknown96_ = other.unknown96_;
      unknown97_ = other.unknown97_;
      unknown98_ = other.unknown98_;
      unknown99_ = other.unknown99_;
      unknown100_ = other.unknown100_;
      unknown101_ = other.unknown101_;
      unknown102_ = other.unknown102_;
      unknown103_ = other.unknown103_;
      unknown104_ = other.unknown104_;
      unknown105_ = other.unknown105_;
      unknown106_ = other.unknown106_;
      unknown107_ = other.unknown107_;
      unknown108_ = other.unknown108_;
      unknown109_ = other.unknown109_;
      unknown110_ = other.unknown110_;
      unknown111_ = other.unknown111_;
      unknown112_ = other.unknown112_;
      unknown113_ = other.unknown113_;
      unknown114_ = other.unknown114_;
      unknown115_ = other.unknown115_;
      unknown116_ = other.unknown116_;
      unknown117_ = other.unknown117_;
      unknown118_ = other.unknown118_;
      unknown119_ = other.unknown119_;
      unknown120_ = other.unknown120_;
      unknown121_ = other.unknown121_;
      unknown122_ = other.unknown122_;
      unknown123_ = other.unknown123_;
      unknown124_ = other.unknown124_;
      unknown125_ = other.unknown125_;
      unknown126_ = other.unknown126_;
      unknown127_ = other.unknown127_;
      unknown128_ = other.unknown128_;
      unknown129_ = other.unknown129_;
      unknown130_ = other.unknown130_;
      unknown131_ = other.unknown131_;
      unknown132_ = other.unknown132_;
      unknown133_ = other.unknown133_;
      unknown134_ = other.unknown134_;
      unknown135_ = other.unknown135_;
      unknown136_ = other.unknown136_;
      unknown137_ = other.unknown137_;
      unknown138_ = other.unknown138_;
      unknown139_ = other.unknown139_;
      unknown140_ = other.unknown140_;
      unknown141_ = other.unknown141_;
      unknown142_ = other.unknown142_;
      unknown143_ = other.unknown143_;
      unknown144_ = other.unknown144_;
      unknown145_ = other.unknown145_;
      unknown146_ = other.unknown146_;
      unknown147_ = other.unknown147_;
      unknown148_ = other.unknown148_;
      unknown149_ = other.unknown149_;
      unknown150_ = other.unknown150_;
      unknown151_ = other.unknown151_;
      unknown152_ = other.unknown152_;
      unknown153_ = other.unknown153_;
      unknown154_ = other.unknown154_;
      unknown155_ = other.unknown155_;
      unknown156_ = other.unknown156_;
      unknown157_ = other.unknown157_;
      unknown158_ = other.unknown158_;
      unknown159_ = other.unknown159_;
      unknown160_ = other.unknown160_;
      unknown161_ = other.unknown161_;
      unknown162_ = other.unknown162_;
      unknown163_ = other.unknown163_;
      unknown164_ = other.unknown164_;
      unknown165_ = other.unknown165_;
      unknown166_ = other.unknown166_;
      unknown167_ = other.unknown167_;
      unknown168_ = other.unknown168_;
      unknown169_ = other.unknown169_;
      unknown170_ = other.unknown170_;
      unknown171_ = other.unknown171_;
      unknown172_ = other.unknown172_;
      unknown173_ = other.unknown173_;
      unknown174_ = other.unknown174_;
      unknown175_ = other.unknown175_;
      unknown176_ = other.unknown176_;
      unknown177_ = other.unknown177_;
      unknown178_ = other.unknown178_;
      unknown179_ = other.unknown179_;
      unknown180_ = other.unknown180_;
      unknown181_ = other.unknown181_;
      unknown182_ = other.unknown182_;
      unknown183_ = other.unknown183_;
      unknown184_ = other.unknown184_;
      unknown185_ = other.unknown185_;
      unknown186_ = other.unknown186_;
      unknown187_ = other.unknown187_;
      unknown188_ = other.unknown188_;
      unknown189_ = other.unknown189_;
      unknown190_ = other.unknown190_;
      unknown191_ = other.unknown191_;
      unknown192_ = other.unknown192_;
      unknown193_ = other.unknown193_;
      unknown194_ = other.unknown194_;
      unknown195_ = other.unknown195_;
      unknown196_ = other.unknown196_;
      unknown197_ = other.unknown197_;
      unknown198_ = other.unknown198_;
      unknown199_ = other.unknown199_;
      unknown200_ = other.unknown200_;
      unknown201_ = other.unknown201_;
      unknown202_ = other.unknown202_;
      unknown203_ = other.unknown203_;
      unknown204_ = other.unknown204_;
      unknown205_ = other.unknown205_;
      unknown206_ = other.unknown206_;
      unknown207_ = other.unknown207_;
      unknown208_ = other.unknown208_;
      unknown209_ = other.unknown209_;
      unknown210_ = other.unknown210_;
      unknown211_ = other.unknown211_;
      unknown212_ = other.unknown212_;
      unknown213_ = other.unknown213_;
      unknown214_ = other.unknown214_;
      unknown215_ = other.unknown215_;
      unknown216_ = other.unknown216_;
      unknown217_ = other.unknown217_;
      unknown218_ = other.unknown218_;
      unknown219_ = other.unknown219_;
      unknown220_ = other.unknown220_;
      unknown221_ = other.unknown221_;
      unknown222_ = other.unknown222_;
      unknown223_ = other.unknown223_;
      unknown224_ = other.unknown224_;
      unknown225_ = other.unknown225_;
      unknown226_ = other.unknown226_;
      unknown227_ = other.unknown227_;
      unknown228_ = other.unknown228_;
      unknown229_ = other.unknown229_;
      unknown230_ = other.unknown230_;
      unknown231_ = other.unknown231_;
      unknown232_ = other.unknown232_;
      unknown233_ = other.unknown233_;
      unknown234_ = other.unknown234_;
      unknown235_ = other.unknown235_;
      unknown236_ = other.unknown236_;
      unknown237_ = other.unknown237_;
      unknown238_ = other.unknown238_;
      unknown239_ = other.unknown239_;
      unknown240_ = other.unknown240_;
      unknown241_ = other.unknown241_;
      unknown242_ = other.unknown242_;
      unknown243_ = other.unknown243_;
      unknown244_ = other.unknown244_;
      unknown245_ = other.unknown245_;
      unknown246_ = other.unknown246_;
      unknown247_ = other.unknown247_;
      unknown248_ = other.unknown248_;
      unknown249_ = other.unknown249_;
      unknown250_ = other.unknown250_;
      unknown251_ = other.unknown251_;
      unknown252_ = other.unknown252_;
      unknown253_ = other.unknown253_;
      unknown254_ = other.unknown254_;
      unknown255_ = other.unknown255_;
      unknown256_ = other.unknown256_;
      unknown257_ = other.unknown257_;
      unknown258_ = other.unknown258_;
      unknown259_ = other.unknown259_;
      unknown260_ = other.unknown260_;
      unknown261_ = other.unknown261_;
      unknown262_ = other.unknown262_;
      unknown263_ = other.unknown263_;
      unknown264_ = other.unknown264_;
      atkDarkCorrection_ = other.atkDarkCorrection_;
    }

    public AtkParam Clone() {
      return new AtkParam(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Offset" field.</summary>
    public const int OffsetFieldNumber = 4;
    private int offset_;
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "Hit0_Radius" field.</summary>
    public const int Hit0RadiusFieldNumber = 5;
    private float hit0Radius_;
    public float Hit0Radius {
      get { return hit0Radius_; }
      set {
        hit0Radius_ = value;
      }
    }

    /// <summary>Field number for the "Hit1_Radius" field.</summary>
    public const int Hit1RadiusFieldNumber = 6;
    private float hit1Radius_;
    public float Hit1Radius {
      get { return hit1Radius_; }
      set {
        hit1Radius_ = value;
      }
    }

    /// <summary>Field number for the "Hit2_Radius" field.</summary>
    public const int Hit2RadiusFieldNumber = 7;
    private float hit2Radius_;
    public float Hit2Radius {
      get { return hit2Radius_; }
      set {
        hit2Radius_ = value;
      }
    }

    /// <summary>Field number for the "Hit3_Radius" field.</summary>
    public const int Hit3RadiusFieldNumber = 8;
    private float hit3Radius_;
    public float Hit3Radius {
      get { return hit3Radius_; }
      set {
        hit3Radius_ = value;
      }
    }

    /// <summary>Field number for the "KnockbackDist" field.</summary>
    public const int KnockbackDistFieldNumber = 9;
    private float knockbackDist_;
    public float KnockbackDist {
      get { return knockbackDist_; }
      set {
        knockbackDist_ = value;
      }
    }

    /// <summary>Field number for the "HitStopTime" field.</summary>
    public const int HitStopTimeFieldNumber = 10;
    private float hitStopTime_;
    public float HitStopTime {
      get { return hitStopTime_; }
      set {
        hitStopTime_ = value;
      }
    }

    /// <summary>Field number for the "SpEffectId0" field.</summary>
    public const int SpEffectId0FieldNumber = 11;
    private int spEffectId0_;
    public int SpEffectId0 {
      get { return spEffectId0_; }
      set {
        spEffectId0_ = value;
      }
    }

    /// <summary>Field number for the "SpEffectId1" field.</summary>
    public const int SpEffectId1FieldNumber = 12;
    private int spEffectId1_;
    public int SpEffectId1 {
      get { return spEffectId1_; }
      set {
        spEffectId1_ = value;
      }
    }

    /// <summary>Field number for the "SpEffectId2" field.</summary>
    public const int SpEffectId2FieldNumber = 13;
    private int spEffectId2_;
    public int SpEffectId2 {
      get { return spEffectId2_; }
      set {
        spEffectId2_ = value;
      }
    }

    /// <summary>Field number for the "SpEffectId3" field.</summary>
    public const int SpEffectId3FieldNumber = 14;
    private int spEffectId3_;
    public int SpEffectId3 {
      get { return spEffectId3_; }
      set {
        spEffectId3_ = value;
      }
    }

    /// <summary>Field number for the "SpEffectId4" field.</summary>
    public const int SpEffectId4FieldNumber = 15;
    private int spEffectId4_;
    public int SpEffectId4 {
      get { return spEffectId4_; }
      set {
        spEffectId4_ = value;
      }
    }

    /// <summary>Field number for the "Hit0_DmyPoly1" field.</summary>
    public const int Hit0DmyPoly1FieldNumber = 16;
    private int hit0DmyPoly1_;
    public int Hit0DmyPoly1 {
      get { return hit0DmyPoly1_; }
      set {
        hit0DmyPoly1_ = value;
      }
    }

    /// <summary>Field number for the "Hit1_DmyPoly1" field.</summary>
    public const int Hit1DmyPoly1FieldNumber = 17;
    private int hit1DmyPoly1_;
    public int Hit1DmyPoly1 {
      get { return hit1DmyPoly1_; }
      set {
        hit1DmyPoly1_ = value;
      }
    }

    /// <summary>Field number for the "Hit2_DmyPoly1" field.</summary>
    public const int Hit2DmyPoly1FieldNumber = 18;
    private int hit2DmyPoly1_;
    public int Hit2DmyPoly1 {
      get { return hit2DmyPoly1_; }
      set {
        hit2DmyPoly1_ = value;
      }
    }

    /// <summary>Field number for the "Hit3_DmyPoly1" field.</summary>
    public const int Hit3DmyPoly1FieldNumber = 19;
    private int hit3DmyPoly1_;
    public int Hit3DmyPoly1 {
      get { return hit3DmyPoly1_; }
      set {
        hit3DmyPoly1_ = value;
      }
    }

    /// <summary>Field number for the "Hit0_DmyPoly2" field.</summary>
    public const int Hit0DmyPoly2FieldNumber = 20;
    private int hit0DmyPoly2_;
    public int Hit0DmyPoly2 {
      get { return hit0DmyPoly2_; }
      set {
        hit0DmyPoly2_ = value;
      }
    }

    /// <summary>Field number for the "Hit1_DmyPoly2" field.</summary>
    public const int Hit1DmyPoly2FieldNumber = 21;
    private int hit1DmyPoly2_;
    public int Hit1DmyPoly2 {
      get { return hit1DmyPoly2_; }
      set {
        hit1DmyPoly2_ = value;
      }
    }

    /// <summary>Field number for the "Hit2_DmyPoly2" field.</summary>
    public const int Hit2DmyPoly2FieldNumber = 22;
    private int hit2DmyPoly2_;
    public int Hit2DmyPoly2 {
      get { return hit2DmyPoly2_; }
      set {
        hit2DmyPoly2_ = value;
      }
    }

    /// <summary>Field number for the "Hit3_DmyPoly2" field.</summary>
    public const int Hit3DmyPoly2FieldNumber = 23;
    private int hit3DmyPoly2_;
    public int Hit3DmyPoly2 {
      get { return hit3DmyPoly2_; }
      set {
        hit3DmyPoly2_ = value;
      }
    }

    /// <summary>Field number for the "BlowingCorrection" field.</summary>
    public const int BlowingCorrectionFieldNumber = 24;
    private uint blowingCorrection_;
    public uint BlowingCorrection {
      get { return blowingCorrection_; }
      set {
        blowingCorrection_ = value;
      }
    }

    /// <summary>Field number for the "AtkPhysCorrection" field.</summary>
    public const int AtkPhysCorrectionFieldNumber = 25;
    private uint atkPhysCorrection_;
    public uint AtkPhysCorrection {
      get { return atkPhysCorrection_; }
      set {
        atkPhysCorrection_ = value;
      }
    }

    /// <summary>Field number for the "AtkMagCorrection" field.</summary>
    public const int AtkMagCorrectionFieldNumber = 26;
    private uint atkMagCorrection_;
    public uint AtkMagCorrection {
      get { return atkMagCorrection_; }
      set {
        atkMagCorrection_ = value;
      }
    }

    /// <summary>Field number for the "AtkFireCorrection" field.</summary>
    public const int AtkFireCorrectionFieldNumber = 27;
    private uint atkFireCorrection_;
    public uint AtkFireCorrection {
      get { return atkFireCorrection_; }
      set {
        atkFireCorrection_ = value;
      }
    }

    /// <summary>Field number for the "AtkThunCorrection" field.</summary>
    public const int AtkThunCorrectionFieldNumber = 28;
    private uint atkThunCorrection_;
    public uint AtkThunCorrection {
      get { return atkThunCorrection_; }
      set {
        atkThunCorrection_ = value;
      }
    }

    /// <summary>Field number for the "AtkStamCorrection" field.</summary>
    public const int AtkStamCorrectionFieldNumber = 29;
    private uint atkStamCorrection_;
    public uint AtkStamCorrection {
      get { return atkStamCorrection_; }
      set {
        atkStamCorrection_ = value;
      }
    }

    /// <summary>Field number for the "GuardAtkRateCorrection" field.</summary>
    public const int GuardAtkRateCorrectionFieldNumber = 30;
    private uint guardAtkRateCorrection_;
    public uint GuardAtkRateCorrection {
      get { return guardAtkRateCorrection_; }
      set {
        guardAtkRateCorrection_ = value;
      }
    }

    /// <summary>Field number for the "GuardBreakCorrection" field.</summary>
    public const int GuardBreakCorrectionFieldNumber = 31;
    private uint guardBreakCorrection_;
    public uint GuardBreakCorrection {
      get { return guardBreakCorrection_; }
      set {
        guardBreakCorrection_ = value;
      }
    }

    /// <summary>Field number for the "AtkThrowEscapeCorrection" field.</summary>
    public const int AtkThrowEscapeCorrectionFieldNumber = 32;
    private uint atkThrowEscapeCorrection_;
    public uint AtkThrowEscapeCorrection {
      get { return atkThrowEscapeCorrection_; }
      set {
        atkThrowEscapeCorrection_ = value;
      }
    }

    /// <summary>Field number for the "AtkPhys" field.</summary>
    public const int AtkPhysFieldNumber = 33;
    private uint atkPhys_;
    public uint AtkPhys {
      get { return atkPhys_; }
      set {
        atkPhys_ = value;
      }
    }

    /// <summary>Field number for the "AtkMag" field.</summary>
    public const int AtkMagFieldNumber = 34;
    private uint atkMag_;
    public uint AtkMag {
      get { return atkMag_; }
      set {
        atkMag_ = value;
      }
    }

    /// <summary>Field number for the "AtkFire" field.</summary>
    public const int AtkFireFieldNumber = 35;
    private uint atkFire_;
    public uint AtkFire {
      get { return atkFire_; }
      set {
        atkFire_ = value;
      }
    }

    /// <summary>Field number for the "AtkThun" field.</summary>
    public const int AtkThunFieldNumber = 36;
    private uint atkThun_;
    public uint AtkThun {
      get { return atkThun_; }
      set {
        atkThun_ = value;
      }
    }

    /// <summary>Field number for the "AtkStam" field.</summary>
    public const int AtkStamFieldNumber = 37;
    private uint atkStam_;
    public uint AtkStam {
      get { return atkStam_; }
      set {
        atkStam_ = value;
      }
    }

    /// <summary>Field number for the "GuardAtkRate" field.</summary>
    public const int GuardAtkRateFieldNumber = 38;
    private uint guardAtkRate_;
    public uint GuardAtkRate {
      get { return guardAtkRate_; }
      set {
        guardAtkRate_ = value;
      }
    }

    /// <summary>Field number for the "GuardBreakRate" field.</summary>
    public const int GuardBreakRateFieldNumber = 39;
    private uint guardBreakRate_;
    public uint GuardBreakRate {
      get { return guardBreakRate_; }
      set {
        guardBreakRate_ = value;
      }
    }

    /// <summary>Field number for the "AtkSuperArmor" field.</summary>
    public const int AtkSuperArmorFieldNumber = 40;
    private uint atkSuperArmor_;
    public uint AtkSuperArmor {
      get { return atkSuperArmor_; }
      set {
        atkSuperArmor_ = value;
      }
    }

    /// <summary>Field number for the "AtkThrowEscape" field.</summary>
    public const int AtkThrowEscapeFieldNumber = 41;
    private uint atkThrowEscape_;
    public uint AtkThrowEscape {
      get { return atkThrowEscape_; }
      set {
        atkThrowEscape_ = value;
      }
    }

    /// <summary>Field number for the "AtkObj" field.</summary>
    public const int AtkObjFieldNumber = 42;
    private uint atkObj_;
    public uint AtkObj {
      get { return atkObj_; }
      set {
        atkObj_ = value;
      }
    }

    /// <summary>Field number for the "GuardStaminaCutRate" field.</summary>
    public const int GuardStaminaCutRateFieldNumber = 43;
    private int guardStaminaCutRate_;
    public int GuardStaminaCutRate {
      get { return guardStaminaCutRate_; }
      set {
        guardStaminaCutRate_ = value;
      }
    }

    /// <summary>Field number for the "GuardRate" field.</summary>
    public const int GuardRateFieldNumber = 44;
    private int guardRate_;
    public int GuardRate {
      get { return guardRate_; }
      set {
        guardRate_ = value;
      }
    }

    /// <summary>Field number for the "ThrowTypeId" field.</summary>
    public const int ThrowTypeIdFieldNumber = 45;
    private int throwTypeId_;
    public int ThrowTypeId {
      get { return throwTypeId_; }
      set {
        throwTypeId_ = value;
      }
    }

    /// <summary>Field number for the "Hit0_hitType" field.</summary>
    public const int Hit0HitTypeFieldNumber = 46;
    private uint hit0HitType_;
    public uint Hit0HitType {
      get { return hit0HitType_; }
      set {
        hit0HitType_ = value;
      }
    }

    /// <summary>Field number for the "Hit1_hitType" field.</summary>
    public const int Hit1HitTypeFieldNumber = 47;
    private uint hit1HitType_;
    public uint Hit1HitType {
      get { return hit1HitType_; }
      set {
        hit1HitType_ = value;
      }
    }

    /// <summary>Field number for the "Hit2_hitType" field.</summary>
    public const int Hit2HitTypeFieldNumber = 48;
    private uint hit2HitType_;
    public uint Hit2HitType {
      get { return hit2HitType_; }
      set {
        hit2HitType_ = value;
      }
    }

    /// <summary>Field number for the "Hit3_hitType" field.</summary>
    public const int Hit3HitTypeFieldNumber = 49;
    private uint hit3HitType_;
    public uint Hit3HitType {
      get { return hit3HitType_; }
      set {
        hit3HitType_ = value;
      }
    }

    /// <summary>Field number for the "Hit0_Priority" field.</summary>
    public const int Hit0PriorityFieldNumber = 50;
    private uint hit0Priority_;
    public uint Hit0Priority {
      get { return hit0Priority_; }
      set {
        hit0Priority_ = value;
      }
    }

    /// <summary>Field number for the "Hit1_Priority" field.</summary>
    public const int Hit1PriorityFieldNumber = 51;
    private uint hit1Priority_;
    public uint Hit1Priority {
      get { return hit1Priority_; }
      set {
        hit1Priority_ = value;
      }
    }

    /// <summary>Field number for the "Hit2_Priority" field.</summary>
    public const int Hit2PriorityFieldNumber = 52;
    private uint hit2Priority_;
    public uint Hit2Priority {
      get { return hit2Priority_; }
      set {
        hit2Priority_ = value;
      }
    }

    /// <summary>Field number for the "Hit3_Priority" field.</summary>
    public const int Hit3PriorityFieldNumber = 53;
    private uint hit3Priority_;
    public uint Hit3Priority {
      get { return hit3Priority_; }
      set {
        hit3Priority_ = value;
      }
    }

    /// <summary>Field number for the "DamageLevel" field.</summary>
    public const int DamageLevelFieldNumber = 54;
    private uint damageLevel_;
    public uint DamageLevel {
      get { return damageLevel_; }
      set {
        damageLevel_ = value;
      }
    }

    /// <summary>Field number for the "MapHitType" field.</summary>
    public const int MapHitTypeFieldNumber = 55;
    private uint mapHitType_;
    public uint MapHitType {
      get { return mapHitType_; }
      set {
        mapHitType_ = value;
      }
    }

    /// <summary>Field number for the "GuardCutCancelRate" field.</summary>
    public const int GuardCutCancelRateFieldNumber = 56;
    private int guardCutCancelRate_;
    public int GuardCutCancelRate {
      get { return guardCutCancelRate_; }
      set {
        guardCutCancelRate_ = value;
      }
    }

    /// <summary>Field number for the "AtkAttribute" field.</summary>
    public const int AtkAttributeFieldNumber = 57;
    private uint atkAttribute_;
    public uint AtkAttribute {
      get { return atkAttribute_; }
      set {
        atkAttribute_ = value;
      }
    }

    /// <summary>Field number for the "SpecialAttributes" field.</summary>
    public const int SpecialAttributesFieldNumber = 58;
    private uint specialAttributes_;
    public uint SpecialAttributes {
      get { return specialAttributes_; }
      set {
        specialAttributes_ = value;
      }
    }

    /// <summary>Field number for the "AttackType" field.</summary>
    public const int AttackTypeFieldNumber = 59;
    private uint attackType_;
    public uint AttackType {
      get { return attackType_; }
      set {
        attackType_ = value;
      }
    }

    /// <summary>Field number for the "AtkMaterial" field.</summary>
    public const int AtkMaterialFieldNumber = 60;
    private uint atkMaterial_;
    public uint AtkMaterial {
      get { return atkMaterial_; }
      set {
        atkMaterial_ = value;
      }
    }

    /// <summary>Field number for the "AtkSize" field.</summary>
    public const int AtkSizeFieldNumber = 61;
    private uint atkSize_;
    public uint AtkSize {
      get { return atkSize_; }
      set {
        atkSize_ = value;
      }
    }

    /// <summary>Field number for the "DefMaterial" field.</summary>
    public const int DefMaterialFieldNumber = 62;
    private uint defMaterial_;
    public uint DefMaterial {
      get { return defMaterial_; }
      set {
        defMaterial_ = value;
      }
    }

    /// <summary>Field number for the "DefSfxMaterial" field.</summary>
    public const int DefSfxMaterialFieldNumber = 63;
    private uint defSfxMaterial_;
    public uint DefSfxMaterial {
      get { return defSfxMaterial_; }
      set {
        defSfxMaterial_ = value;
      }
    }

    /// <summary>Field number for the "HitSourceType" field.</summary>
    public const int HitSourceTypeFieldNumber = 64;
    private uint hitSourceType_;
    public uint HitSourceType {
      get { return hitSourceType_; }
      set {
        hitSourceType_ = value;
      }
    }

    /// <summary>Field number for the "ThrowFlag" field.</summary>
    public const int ThrowFlagFieldNumber = 65;
    private uint throwFlag_;
    public uint ThrowFlag {
      get { return throwFlag_; }
      set {
        throwFlag_ = value;
      }
    }

    /// <summary>Field number for the "BitField" field.</summary>
    public const int BitFieldFieldNumber = 66;
    private uint bitField_;
    public uint BitField {
      get { return bitField_; }
      set {
        bitField_ = value;
      }
    }

    /// <summary>Field number for the "Unknown0" field.</summary>
    public const int Unknown0FieldNumber = 67;
    private uint unknown0_;
    public uint Unknown0 {
      get { return unknown0_; }
      set {
        unknown0_ = value;
      }
    }

    /// <summary>Field number for the "Unknown1" field.</summary>
    public const int Unknown1FieldNumber = 68;
    private uint unknown1_;
    public uint Unknown1 {
      get { return unknown1_; }
      set {
        unknown1_ = value;
      }
    }

    /// <summary>Field number for the "Unknown2" field.</summary>
    public const int Unknown2FieldNumber = 69;
    private uint unknown2_;
    public uint Unknown2 {
      get { return unknown2_; }
      set {
        unknown2_ = value;
      }
    }

    /// <summary>Field number for the "Unknown3" field.</summary>
    public const int Unknown3FieldNumber = 70;
    private uint unknown3_;
    public uint Unknown3 {
      get { return unknown3_; }
      set {
        unknown3_ = value;
      }
    }

    /// <summary>Field number for the "Unknown4" field.</summary>
    public const int Unknown4FieldNumber = 71;
    private uint unknown4_;
    public uint Unknown4 {
      get { return unknown4_; }
      set {
        unknown4_ = value;
      }
    }

    /// <summary>Field number for the "Unknown5" field.</summary>
    public const int Unknown5FieldNumber = 72;
    private uint unknown5_;
    public uint Unknown5 {
      get { return unknown5_; }
      set {
        unknown5_ = value;
      }
    }

    /// <summary>Field number for the "Unknown6" field.</summary>
    public const int Unknown6FieldNumber = 73;
    private uint unknown6_;
    public uint Unknown6 {
      get { return unknown6_; }
      set {
        unknown6_ = value;
      }
    }

    /// <summary>Field number for the "Unknown7" field.</summary>
    public const int Unknown7FieldNumber = 74;
    private uint unknown7_;
    public uint Unknown7 {
      get { return unknown7_; }
      set {
        unknown7_ = value;
      }
    }

    /// <summary>Field number for the "Unknown8" field.</summary>
    public const int Unknown8FieldNumber = 75;
    private uint unknown8_;
    public uint Unknown8 {
      get { return unknown8_; }
      set {
        unknown8_ = value;
      }
    }

    /// <summary>Field number for the "Unknown9" field.</summary>
    public const int Unknown9FieldNumber = 76;
    private uint unknown9_;
    public uint Unknown9 {
      get { return unknown9_; }
      set {
        unknown9_ = value;
      }
    }

    /// <summary>Field number for the "Unknown10" field.</summary>
    public const int Unknown10FieldNumber = 77;
    private uint unknown10_;
    public uint Unknown10 {
      get { return unknown10_; }
      set {
        unknown10_ = value;
      }
    }

    /// <summary>Field number for the "Unknown11" field.</summary>
    public const int Unknown11FieldNumber = 78;
    private uint unknown11_;
    public uint Unknown11 {
      get { return unknown11_; }
      set {
        unknown11_ = value;
      }
    }

    /// <summary>Field number for the "Unknown12" field.</summary>
    public const int Unknown12FieldNumber = 79;
    private uint unknown12_;
    public uint Unknown12 {
      get { return unknown12_; }
      set {
        unknown12_ = value;
      }
    }

    /// <summary>Field number for the "Unknown13" field.</summary>
    public const int Unknown13FieldNumber = 80;
    private uint unknown13_;
    public uint Unknown13 {
      get { return unknown13_; }
      set {
        unknown13_ = value;
      }
    }

    /// <summary>Field number for the "Unknown14" field.</summary>
    public const int Unknown14FieldNumber = 81;
    private uint unknown14_;
    public uint Unknown14 {
      get { return unknown14_; }
      set {
        unknown14_ = value;
      }
    }

    /// <summary>Field number for the "Unknown15" field.</summary>
    public const int Unknown15FieldNumber = 82;
    private uint unknown15_;
    public uint Unknown15 {
      get { return unknown15_; }
      set {
        unknown15_ = value;
      }
    }

    /// <summary>Field number for the "Unknown16" field.</summary>
    public const int Unknown16FieldNumber = 83;
    private uint unknown16_;
    public uint Unknown16 {
      get { return unknown16_; }
      set {
        unknown16_ = value;
      }
    }

    /// <summary>Field number for the "Unknown17" field.</summary>
    public const int Unknown17FieldNumber = 84;
    private uint unknown17_;
    public uint Unknown17 {
      get { return unknown17_; }
      set {
        unknown17_ = value;
      }
    }

    /// <summary>Field number for the "Unknown18" field.</summary>
    public const int Unknown18FieldNumber = 85;
    private uint unknown18_;
    public uint Unknown18 {
      get { return unknown18_; }
      set {
        unknown18_ = value;
      }
    }

    /// <summary>Field number for the "Unknown19" field.</summary>
    public const int Unknown19FieldNumber = 86;
    private uint unknown19_;
    public uint Unknown19 {
      get { return unknown19_; }
      set {
        unknown19_ = value;
      }
    }

    /// <summary>Field number for the "Unknown20" field.</summary>
    public const int Unknown20FieldNumber = 87;
    private uint unknown20_;
    public uint Unknown20 {
      get { return unknown20_; }
      set {
        unknown20_ = value;
      }
    }

    /// <summary>Field number for the "Unknown21" field.</summary>
    public const int Unknown21FieldNumber = 88;
    private uint unknown21_;
    public uint Unknown21 {
      get { return unknown21_; }
      set {
        unknown21_ = value;
      }
    }

    /// <summary>Field number for the "Unknown22" field.</summary>
    public const int Unknown22FieldNumber = 89;
    private uint unknown22_;
    public uint Unknown22 {
      get { return unknown22_; }
      set {
        unknown22_ = value;
      }
    }

    /// <summary>Field number for the "Unknown23" field.</summary>
    public const int Unknown23FieldNumber = 90;
    private uint unknown23_;
    public uint Unknown23 {
      get { return unknown23_; }
      set {
        unknown23_ = value;
      }
    }

    /// <summary>Field number for the "Unknown24" field.</summary>
    public const int Unknown24FieldNumber = 91;
    private uint unknown24_;
    public uint Unknown24 {
      get { return unknown24_; }
      set {
        unknown24_ = value;
      }
    }

    /// <summary>Field number for the "Unknown25" field.</summary>
    public const int Unknown25FieldNumber = 92;
    private uint unknown25_;
    public uint Unknown25 {
      get { return unknown25_; }
      set {
        unknown25_ = value;
      }
    }

    /// <summary>Field number for the "Unknown26" field.</summary>
    public const int Unknown26FieldNumber = 93;
    private uint unknown26_;
    public uint Unknown26 {
      get { return unknown26_; }
      set {
        unknown26_ = value;
      }
    }

    /// <summary>Field number for the "Unknown27" field.</summary>
    public const int Unknown27FieldNumber = 94;
    private uint unknown27_;
    public uint Unknown27 {
      get { return unknown27_; }
      set {
        unknown27_ = value;
      }
    }

    /// <summary>Field number for the "Unknown28" field.</summary>
    public const int Unknown28FieldNumber = 95;
    private uint unknown28_;
    public uint Unknown28 {
      get { return unknown28_; }
      set {
        unknown28_ = value;
      }
    }

    /// <summary>Field number for the "Unknown29" field.</summary>
    public const int Unknown29FieldNumber = 96;
    private uint unknown29_;
    public uint Unknown29 {
      get { return unknown29_; }
      set {
        unknown29_ = value;
      }
    }

    /// <summary>Field number for the "Unknown30" field.</summary>
    public const int Unknown30FieldNumber = 97;
    private uint unknown30_;
    public uint Unknown30 {
      get { return unknown30_; }
      set {
        unknown30_ = value;
      }
    }

    /// <summary>Field number for the "Unknown31" field.</summary>
    public const int Unknown31FieldNumber = 98;
    private uint unknown31_;
    public uint Unknown31 {
      get { return unknown31_; }
      set {
        unknown31_ = value;
      }
    }

    /// <summary>Field number for the "Unknown32" field.</summary>
    public const int Unknown32FieldNumber = 99;
    private uint unknown32_;
    public uint Unknown32 {
      get { return unknown32_; }
      set {
        unknown32_ = value;
      }
    }

    /// <summary>Field number for the "Unknown33" field.</summary>
    public const int Unknown33FieldNumber = 100;
    private uint unknown33_;
    public uint Unknown33 {
      get { return unknown33_; }
      set {
        unknown33_ = value;
      }
    }

    /// <summary>Field number for the "Unknown34" field.</summary>
    public const int Unknown34FieldNumber = 101;
    private uint unknown34_;
    public uint Unknown34 {
      get { return unknown34_; }
      set {
        unknown34_ = value;
      }
    }

    /// <summary>Field number for the "Unknown35" field.</summary>
    public const int Unknown35FieldNumber = 102;
    private uint unknown35_;
    public uint Unknown35 {
      get { return unknown35_; }
      set {
        unknown35_ = value;
      }
    }

    /// <summary>Field number for the "Unknown36" field.</summary>
    public const int Unknown36FieldNumber = 103;
    private uint unknown36_;
    public uint Unknown36 {
      get { return unknown36_; }
      set {
        unknown36_ = value;
      }
    }

    /// <summary>Field number for the "Unknown37" field.</summary>
    public const int Unknown37FieldNumber = 104;
    private uint unknown37_;
    public uint Unknown37 {
      get { return unknown37_; }
      set {
        unknown37_ = value;
      }
    }

    /// <summary>Field number for the "Unknown38" field.</summary>
    public const int Unknown38FieldNumber = 105;
    private uint unknown38_;
    public uint Unknown38 {
      get { return unknown38_; }
      set {
        unknown38_ = value;
      }
    }

    /// <summary>Field number for the "Unknown39" field.</summary>
    public const int Unknown39FieldNumber = 106;
    private uint unknown39_;
    public uint Unknown39 {
      get { return unknown39_; }
      set {
        unknown39_ = value;
      }
    }

    /// <summary>Field number for the "Unknown40" field.</summary>
    public const int Unknown40FieldNumber = 107;
    private uint unknown40_;
    public uint Unknown40 {
      get { return unknown40_; }
      set {
        unknown40_ = value;
      }
    }

    /// <summary>Field number for the "Unknown41" field.</summary>
    public const int Unknown41FieldNumber = 108;
    private uint unknown41_;
    public uint Unknown41 {
      get { return unknown41_; }
      set {
        unknown41_ = value;
      }
    }

    /// <summary>Field number for the "Unknown42" field.</summary>
    public const int Unknown42FieldNumber = 109;
    private uint unknown42_;
    public uint Unknown42 {
      get { return unknown42_; }
      set {
        unknown42_ = value;
      }
    }

    /// <summary>Field number for the "Unknown43" field.</summary>
    public const int Unknown43FieldNumber = 110;
    private uint unknown43_;
    public uint Unknown43 {
      get { return unknown43_; }
      set {
        unknown43_ = value;
      }
    }

    /// <summary>Field number for the "Unknown44" field.</summary>
    public const int Unknown44FieldNumber = 111;
    private uint unknown44_;
    public uint Unknown44 {
      get { return unknown44_; }
      set {
        unknown44_ = value;
      }
    }

    /// <summary>Field number for the "Unknown45" field.</summary>
    public const int Unknown45FieldNumber = 112;
    private uint unknown45_;
    public uint Unknown45 {
      get { return unknown45_; }
      set {
        unknown45_ = value;
      }
    }

    /// <summary>Field number for the "Unknown46" field.</summary>
    public const int Unknown46FieldNumber = 113;
    private uint unknown46_;
    public uint Unknown46 {
      get { return unknown46_; }
      set {
        unknown46_ = value;
      }
    }

    /// <summary>Field number for the "Unknown47" field.</summary>
    public const int Unknown47FieldNumber = 114;
    private uint unknown47_;
    public uint Unknown47 {
      get { return unknown47_; }
      set {
        unknown47_ = value;
      }
    }

    /// <summary>Field number for the "Unknown48" field.</summary>
    public const int Unknown48FieldNumber = 115;
    private uint unknown48_;
    public uint Unknown48 {
      get { return unknown48_; }
      set {
        unknown48_ = value;
      }
    }

    /// <summary>Field number for the "Unknown49" field.</summary>
    public const int Unknown49FieldNumber = 116;
    private uint unknown49_;
    public uint Unknown49 {
      get { return unknown49_; }
      set {
        unknown49_ = value;
      }
    }

    /// <summary>Field number for the "Unknown50" field.</summary>
    public const int Unknown50FieldNumber = 117;
    private uint unknown50_;
    public uint Unknown50 {
      get { return unknown50_; }
      set {
        unknown50_ = value;
      }
    }

    /// <summary>Field number for the "Unknown51" field.</summary>
    public const int Unknown51FieldNumber = 118;
    private uint unknown51_;
    public uint Unknown51 {
      get { return unknown51_; }
      set {
        unknown51_ = value;
      }
    }

    /// <summary>Field number for the "Unknown52" field.</summary>
    public const int Unknown52FieldNumber = 119;
    private uint unknown52_;
    public uint Unknown52 {
      get { return unknown52_; }
      set {
        unknown52_ = value;
      }
    }

    /// <summary>Field number for the "Unknown53" field.</summary>
    public const int Unknown53FieldNumber = 120;
    private uint unknown53_;
    public uint Unknown53 {
      get { return unknown53_; }
      set {
        unknown53_ = value;
      }
    }

    /// <summary>Field number for the "Unknown54" field.</summary>
    public const int Unknown54FieldNumber = 121;
    private uint unknown54_;
    public uint Unknown54 {
      get { return unknown54_; }
      set {
        unknown54_ = value;
      }
    }

    /// <summary>Field number for the "Unknown55" field.</summary>
    public const int Unknown55FieldNumber = 122;
    private uint unknown55_;
    public uint Unknown55 {
      get { return unknown55_; }
      set {
        unknown55_ = value;
      }
    }

    /// <summary>Field number for the "Unknown56" field.</summary>
    public const int Unknown56FieldNumber = 123;
    private uint unknown56_;
    public uint Unknown56 {
      get { return unknown56_; }
      set {
        unknown56_ = value;
      }
    }

    /// <summary>Field number for the "Unknown57" field.</summary>
    public const int Unknown57FieldNumber = 124;
    private uint unknown57_;
    public uint Unknown57 {
      get { return unknown57_; }
      set {
        unknown57_ = value;
      }
    }

    /// <summary>Field number for the "Unknown58" field.</summary>
    public const int Unknown58FieldNumber = 125;
    private uint unknown58_;
    public uint Unknown58 {
      get { return unknown58_; }
      set {
        unknown58_ = value;
      }
    }

    /// <summary>Field number for the "Unknown59" field.</summary>
    public const int Unknown59FieldNumber = 126;
    private uint unknown59_;
    public uint Unknown59 {
      get { return unknown59_; }
      set {
        unknown59_ = value;
      }
    }

    /// <summary>Field number for the "Unknown60" field.</summary>
    public const int Unknown60FieldNumber = 127;
    private uint unknown60_;
    public uint Unknown60 {
      get { return unknown60_; }
      set {
        unknown60_ = value;
      }
    }

    /// <summary>Field number for the "Unknown61" field.</summary>
    public const int Unknown61FieldNumber = 128;
    private uint unknown61_;
    public uint Unknown61 {
      get { return unknown61_; }
      set {
        unknown61_ = value;
      }
    }

    /// <summary>Field number for the "Unknown62" field.</summary>
    public const int Unknown62FieldNumber = 129;
    private uint unknown62_;
    public uint Unknown62 {
      get { return unknown62_; }
      set {
        unknown62_ = value;
      }
    }

    /// <summary>Field number for the "Unknown63" field.</summary>
    public const int Unknown63FieldNumber = 130;
    private uint unknown63_;
    public uint Unknown63 {
      get { return unknown63_; }
      set {
        unknown63_ = value;
      }
    }

    /// <summary>Field number for the "Unknown64" field.</summary>
    public const int Unknown64FieldNumber = 131;
    private uint unknown64_;
    public uint Unknown64 {
      get { return unknown64_; }
      set {
        unknown64_ = value;
      }
    }

    /// <summary>Field number for the "Unknown65" field.</summary>
    public const int Unknown65FieldNumber = 132;
    private uint unknown65_;
    public uint Unknown65 {
      get { return unknown65_; }
      set {
        unknown65_ = value;
      }
    }

    /// <summary>Field number for the "Unknown66" field.</summary>
    public const int Unknown66FieldNumber = 133;
    private uint unknown66_;
    public uint Unknown66 {
      get { return unknown66_; }
      set {
        unknown66_ = value;
      }
    }

    /// <summary>Field number for the "Unknown67" field.</summary>
    public const int Unknown67FieldNumber = 134;
    private uint unknown67_;
    public uint Unknown67 {
      get { return unknown67_; }
      set {
        unknown67_ = value;
      }
    }

    /// <summary>Field number for the "Unknown68" field.</summary>
    public const int Unknown68FieldNumber = 135;
    private uint unknown68_;
    public uint Unknown68 {
      get { return unknown68_; }
      set {
        unknown68_ = value;
      }
    }

    /// <summary>Field number for the "Unknown69" field.</summary>
    public const int Unknown69FieldNumber = 136;
    private uint unknown69_;
    public uint Unknown69 {
      get { return unknown69_; }
      set {
        unknown69_ = value;
      }
    }

    /// <summary>Field number for the "Unknown70" field.</summary>
    public const int Unknown70FieldNumber = 137;
    private uint unknown70_;
    public uint Unknown70 {
      get { return unknown70_; }
      set {
        unknown70_ = value;
      }
    }

    /// <summary>Field number for the "Unknown71" field.</summary>
    public const int Unknown71FieldNumber = 138;
    private uint unknown71_;
    public uint Unknown71 {
      get { return unknown71_; }
      set {
        unknown71_ = value;
      }
    }

    /// <summary>Field number for the "Unknown72" field.</summary>
    public const int Unknown72FieldNumber = 139;
    private uint unknown72_;
    public uint Unknown72 {
      get { return unknown72_; }
      set {
        unknown72_ = value;
      }
    }

    /// <summary>Field number for the "Unknown73" field.</summary>
    public const int Unknown73FieldNumber = 140;
    private uint unknown73_;
    public uint Unknown73 {
      get { return unknown73_; }
      set {
        unknown73_ = value;
      }
    }

    /// <summary>Field number for the "Unknown74" field.</summary>
    public const int Unknown74FieldNumber = 141;
    private uint unknown74_;
    public uint Unknown74 {
      get { return unknown74_; }
      set {
        unknown74_ = value;
      }
    }

    /// <summary>Field number for the "Unknown75" field.</summary>
    public const int Unknown75FieldNumber = 142;
    private uint unknown75_;
    public uint Unknown75 {
      get { return unknown75_; }
      set {
        unknown75_ = value;
      }
    }

    /// <summary>Field number for the "Unknown76" field.</summary>
    public const int Unknown76FieldNumber = 143;
    private uint unknown76_;
    public uint Unknown76 {
      get { return unknown76_; }
      set {
        unknown76_ = value;
      }
    }

    /// <summary>Field number for the "Unknown77" field.</summary>
    public const int Unknown77FieldNumber = 144;
    private uint unknown77_;
    public uint Unknown77 {
      get { return unknown77_; }
      set {
        unknown77_ = value;
      }
    }

    /// <summary>Field number for the "Unknown78" field.</summary>
    public const int Unknown78FieldNumber = 145;
    private uint unknown78_;
    public uint Unknown78 {
      get { return unknown78_; }
      set {
        unknown78_ = value;
      }
    }

    /// <summary>Field number for the "Unknown79" field.</summary>
    public const int Unknown79FieldNumber = 146;
    private uint unknown79_;
    public uint Unknown79 {
      get { return unknown79_; }
      set {
        unknown79_ = value;
      }
    }

    /// <summary>Field number for the "Unknown80" field.</summary>
    public const int Unknown80FieldNumber = 147;
    private uint unknown80_;
    public uint Unknown80 {
      get { return unknown80_; }
      set {
        unknown80_ = value;
      }
    }

    /// <summary>Field number for the "Unknown81" field.</summary>
    public const int Unknown81FieldNumber = 148;
    private uint unknown81_;
    public uint Unknown81 {
      get { return unknown81_; }
      set {
        unknown81_ = value;
      }
    }

    /// <summary>Field number for the "Unknown82" field.</summary>
    public const int Unknown82FieldNumber = 149;
    private uint unknown82_;
    public uint Unknown82 {
      get { return unknown82_; }
      set {
        unknown82_ = value;
      }
    }

    /// <summary>Field number for the "Unknown83" field.</summary>
    public const int Unknown83FieldNumber = 150;
    private uint unknown83_;
    public uint Unknown83 {
      get { return unknown83_; }
      set {
        unknown83_ = value;
      }
    }

    /// <summary>Field number for the "Unknown84" field.</summary>
    public const int Unknown84FieldNumber = 151;
    private uint unknown84_;
    public uint Unknown84 {
      get { return unknown84_; }
      set {
        unknown84_ = value;
      }
    }

    /// <summary>Field number for the "Unknown85" field.</summary>
    public const int Unknown85FieldNumber = 152;
    private uint unknown85_;
    public uint Unknown85 {
      get { return unknown85_; }
      set {
        unknown85_ = value;
      }
    }

    /// <summary>Field number for the "Unknown86" field.</summary>
    public const int Unknown86FieldNumber = 153;
    private uint unknown86_;
    public uint Unknown86 {
      get { return unknown86_; }
      set {
        unknown86_ = value;
      }
    }

    /// <summary>Field number for the "Unknown87" field.</summary>
    public const int Unknown87FieldNumber = 154;
    private uint unknown87_;
    public uint Unknown87 {
      get { return unknown87_; }
      set {
        unknown87_ = value;
      }
    }

    /// <summary>Field number for the "Unknown88" field.</summary>
    public const int Unknown88FieldNumber = 155;
    private uint unknown88_;
    public uint Unknown88 {
      get { return unknown88_; }
      set {
        unknown88_ = value;
      }
    }

    /// <summary>Field number for the "Unknown89" field.</summary>
    public const int Unknown89FieldNumber = 156;
    private uint unknown89_;
    public uint Unknown89 {
      get { return unknown89_; }
      set {
        unknown89_ = value;
      }
    }

    /// <summary>Field number for the "Unknown90" field.</summary>
    public const int Unknown90FieldNumber = 157;
    private uint unknown90_;
    public uint Unknown90 {
      get { return unknown90_; }
      set {
        unknown90_ = value;
      }
    }

    /// <summary>Field number for the "Unknown91" field.</summary>
    public const int Unknown91FieldNumber = 158;
    private uint unknown91_;
    public uint Unknown91 {
      get { return unknown91_; }
      set {
        unknown91_ = value;
      }
    }

    /// <summary>Field number for the "Unknown92" field.</summary>
    public const int Unknown92FieldNumber = 159;
    private uint unknown92_;
    public uint Unknown92 {
      get { return unknown92_; }
      set {
        unknown92_ = value;
      }
    }

    /// <summary>Field number for the "Unknown93" field.</summary>
    public const int Unknown93FieldNumber = 160;
    private uint unknown93_;
    public uint Unknown93 {
      get { return unknown93_; }
      set {
        unknown93_ = value;
      }
    }

    /// <summary>Field number for the "Unknown94" field.</summary>
    public const int Unknown94FieldNumber = 161;
    private uint unknown94_;
    public uint Unknown94 {
      get { return unknown94_; }
      set {
        unknown94_ = value;
      }
    }

    /// <summary>Field number for the "Unknown95" field.</summary>
    public const int Unknown95FieldNumber = 162;
    private uint unknown95_;
    public uint Unknown95 {
      get { return unknown95_; }
      set {
        unknown95_ = value;
      }
    }

    /// <summary>Field number for the "Unknown96" field.</summary>
    public const int Unknown96FieldNumber = 163;
    private uint unknown96_;
    public uint Unknown96 {
      get { return unknown96_; }
      set {
        unknown96_ = value;
      }
    }

    /// <summary>Field number for the "Unknown97" field.</summary>
    public const int Unknown97FieldNumber = 164;
    private uint unknown97_;
    public uint Unknown97 {
      get { return unknown97_; }
      set {
        unknown97_ = value;
      }
    }

    /// <summary>Field number for the "Unknown98" field.</summary>
    public const int Unknown98FieldNumber = 165;
    private uint unknown98_;
    public uint Unknown98 {
      get { return unknown98_; }
      set {
        unknown98_ = value;
      }
    }

    /// <summary>Field number for the "Unknown99" field.</summary>
    public const int Unknown99FieldNumber = 166;
    private uint unknown99_;
    public uint Unknown99 {
      get { return unknown99_; }
      set {
        unknown99_ = value;
      }
    }

    /// <summary>Field number for the "Unknown100" field.</summary>
    public const int Unknown100FieldNumber = 167;
    private uint unknown100_;
    public uint Unknown100 {
      get { return unknown100_; }
      set {
        unknown100_ = value;
      }
    }

    /// <summary>Field number for the "Unknown101" field.</summary>
    public const int Unknown101FieldNumber = 168;
    private uint unknown101_;
    public uint Unknown101 {
      get { return unknown101_; }
      set {
        unknown101_ = value;
      }
    }

    /// <summary>Field number for the "Unknown102" field.</summary>
    public const int Unknown102FieldNumber = 169;
    private uint unknown102_;
    public uint Unknown102 {
      get { return unknown102_; }
      set {
        unknown102_ = value;
      }
    }

    /// <summary>Field number for the "Unknown103" field.</summary>
    public const int Unknown103FieldNumber = 170;
    private uint unknown103_;
    public uint Unknown103 {
      get { return unknown103_; }
      set {
        unknown103_ = value;
      }
    }

    /// <summary>Field number for the "Unknown104" field.</summary>
    public const int Unknown104FieldNumber = 171;
    private uint unknown104_;
    public uint Unknown104 {
      get { return unknown104_; }
      set {
        unknown104_ = value;
      }
    }

    /// <summary>Field number for the "Unknown105" field.</summary>
    public const int Unknown105FieldNumber = 172;
    private uint unknown105_;
    public uint Unknown105 {
      get { return unknown105_; }
      set {
        unknown105_ = value;
      }
    }

    /// <summary>Field number for the "Unknown106" field.</summary>
    public const int Unknown106FieldNumber = 173;
    private uint unknown106_;
    public uint Unknown106 {
      get { return unknown106_; }
      set {
        unknown106_ = value;
      }
    }

    /// <summary>Field number for the "Unknown107" field.</summary>
    public const int Unknown107FieldNumber = 174;
    private uint unknown107_;
    public uint Unknown107 {
      get { return unknown107_; }
      set {
        unknown107_ = value;
      }
    }

    /// <summary>Field number for the "Unknown108" field.</summary>
    public const int Unknown108FieldNumber = 175;
    private uint unknown108_;
    public uint Unknown108 {
      get { return unknown108_; }
      set {
        unknown108_ = value;
      }
    }

    /// <summary>Field number for the "Unknown109" field.</summary>
    public const int Unknown109FieldNumber = 176;
    private uint unknown109_;
    public uint Unknown109 {
      get { return unknown109_; }
      set {
        unknown109_ = value;
      }
    }

    /// <summary>Field number for the "Unknown110" field.</summary>
    public const int Unknown110FieldNumber = 177;
    private uint unknown110_;
    public uint Unknown110 {
      get { return unknown110_; }
      set {
        unknown110_ = value;
      }
    }

    /// <summary>Field number for the "Unknown111" field.</summary>
    public const int Unknown111FieldNumber = 178;
    private uint unknown111_;
    public uint Unknown111 {
      get { return unknown111_; }
      set {
        unknown111_ = value;
      }
    }

    /// <summary>Field number for the "Unknown112" field.</summary>
    public const int Unknown112FieldNumber = 179;
    private uint unknown112_;
    public uint Unknown112 {
      get { return unknown112_; }
      set {
        unknown112_ = value;
      }
    }

    /// <summary>Field number for the "Unknown113" field.</summary>
    public const int Unknown113FieldNumber = 180;
    private uint unknown113_;
    public uint Unknown113 {
      get { return unknown113_; }
      set {
        unknown113_ = value;
      }
    }

    /// <summary>Field number for the "Unknown114" field.</summary>
    public const int Unknown114FieldNumber = 181;
    private uint unknown114_;
    public uint Unknown114 {
      get { return unknown114_; }
      set {
        unknown114_ = value;
      }
    }

    /// <summary>Field number for the "Unknown115" field.</summary>
    public const int Unknown115FieldNumber = 182;
    private uint unknown115_;
    public uint Unknown115 {
      get { return unknown115_; }
      set {
        unknown115_ = value;
      }
    }

    /// <summary>Field number for the "Unknown116" field.</summary>
    public const int Unknown116FieldNumber = 183;
    private uint unknown116_;
    public uint Unknown116 {
      get { return unknown116_; }
      set {
        unknown116_ = value;
      }
    }

    /// <summary>Field number for the "Unknown117" field.</summary>
    public const int Unknown117FieldNumber = 184;
    private uint unknown117_;
    public uint Unknown117 {
      get { return unknown117_; }
      set {
        unknown117_ = value;
      }
    }

    /// <summary>Field number for the "Unknown118" field.</summary>
    public const int Unknown118FieldNumber = 185;
    private uint unknown118_;
    public uint Unknown118 {
      get { return unknown118_; }
      set {
        unknown118_ = value;
      }
    }

    /// <summary>Field number for the "Unknown119" field.</summary>
    public const int Unknown119FieldNumber = 186;
    private uint unknown119_;
    public uint Unknown119 {
      get { return unknown119_; }
      set {
        unknown119_ = value;
      }
    }

    /// <summary>Field number for the "Unknown120" field.</summary>
    public const int Unknown120FieldNumber = 187;
    private uint unknown120_;
    public uint Unknown120 {
      get { return unknown120_; }
      set {
        unknown120_ = value;
      }
    }

    /// <summary>Field number for the "Unknown121" field.</summary>
    public const int Unknown121FieldNumber = 188;
    private uint unknown121_;
    public uint Unknown121 {
      get { return unknown121_; }
      set {
        unknown121_ = value;
      }
    }

    /// <summary>Field number for the "Unknown122" field.</summary>
    public const int Unknown122FieldNumber = 189;
    private uint unknown122_;
    public uint Unknown122 {
      get { return unknown122_; }
      set {
        unknown122_ = value;
      }
    }

    /// <summary>Field number for the "Unknown123" field.</summary>
    public const int Unknown123FieldNumber = 190;
    private uint unknown123_;
    public uint Unknown123 {
      get { return unknown123_; }
      set {
        unknown123_ = value;
      }
    }

    /// <summary>Field number for the "Unknown124" field.</summary>
    public const int Unknown124FieldNumber = 191;
    private uint unknown124_;
    public uint Unknown124 {
      get { return unknown124_; }
      set {
        unknown124_ = value;
      }
    }

    /// <summary>Field number for the "Unknown125" field.</summary>
    public const int Unknown125FieldNumber = 192;
    private uint unknown125_;
    public uint Unknown125 {
      get { return unknown125_; }
      set {
        unknown125_ = value;
      }
    }

    /// <summary>Field number for the "Unknown126" field.</summary>
    public const int Unknown126FieldNumber = 193;
    private uint unknown126_;
    public uint Unknown126 {
      get { return unknown126_; }
      set {
        unknown126_ = value;
      }
    }

    /// <summary>Field number for the "Unknown127" field.</summary>
    public const int Unknown127FieldNumber = 194;
    private uint unknown127_;
    public uint Unknown127 {
      get { return unknown127_; }
      set {
        unknown127_ = value;
      }
    }

    /// <summary>Field number for the "Unknown128" field.</summary>
    public const int Unknown128FieldNumber = 195;
    private uint unknown128_;
    public uint Unknown128 {
      get { return unknown128_; }
      set {
        unknown128_ = value;
      }
    }

    /// <summary>Field number for the "Unknown129" field.</summary>
    public const int Unknown129FieldNumber = 196;
    private uint unknown129_;
    public uint Unknown129 {
      get { return unknown129_; }
      set {
        unknown129_ = value;
      }
    }

    /// <summary>Field number for the "Unknown130" field.</summary>
    public const int Unknown130FieldNumber = 197;
    private uint unknown130_;
    public uint Unknown130 {
      get { return unknown130_; }
      set {
        unknown130_ = value;
      }
    }

    /// <summary>Field number for the "Unknown131" field.</summary>
    public const int Unknown131FieldNumber = 198;
    private uint unknown131_;
    public uint Unknown131 {
      get { return unknown131_; }
      set {
        unknown131_ = value;
      }
    }

    /// <summary>Field number for the "Unknown132" field.</summary>
    public const int Unknown132FieldNumber = 199;
    private uint unknown132_;
    public uint Unknown132 {
      get { return unknown132_; }
      set {
        unknown132_ = value;
      }
    }

    /// <summary>Field number for the "Unknown133" field.</summary>
    public const int Unknown133FieldNumber = 200;
    private uint unknown133_;
    public uint Unknown133 {
      get { return unknown133_; }
      set {
        unknown133_ = value;
      }
    }

    /// <summary>Field number for the "Unknown134" field.</summary>
    public const int Unknown134FieldNumber = 201;
    private uint unknown134_;
    public uint Unknown134 {
      get { return unknown134_; }
      set {
        unknown134_ = value;
      }
    }

    /// <summary>Field number for the "Unknown135" field.</summary>
    public const int Unknown135FieldNumber = 202;
    private uint unknown135_;
    public uint Unknown135 {
      get { return unknown135_; }
      set {
        unknown135_ = value;
      }
    }

    /// <summary>Field number for the "Unknown136" field.</summary>
    public const int Unknown136FieldNumber = 203;
    private uint unknown136_;
    public uint Unknown136 {
      get { return unknown136_; }
      set {
        unknown136_ = value;
      }
    }

    /// <summary>Field number for the "Unknown137" field.</summary>
    public const int Unknown137FieldNumber = 204;
    private uint unknown137_;
    public uint Unknown137 {
      get { return unknown137_; }
      set {
        unknown137_ = value;
      }
    }

    /// <summary>Field number for the "Unknown138" field.</summary>
    public const int Unknown138FieldNumber = 205;
    private uint unknown138_;
    public uint Unknown138 {
      get { return unknown138_; }
      set {
        unknown138_ = value;
      }
    }

    /// <summary>Field number for the "Unknown139" field.</summary>
    public const int Unknown139FieldNumber = 206;
    private uint unknown139_;
    public uint Unknown139 {
      get { return unknown139_; }
      set {
        unknown139_ = value;
      }
    }

    /// <summary>Field number for the "Unknown140" field.</summary>
    public const int Unknown140FieldNumber = 207;
    private uint unknown140_;
    public uint Unknown140 {
      get { return unknown140_; }
      set {
        unknown140_ = value;
      }
    }

    /// <summary>Field number for the "Unknown141" field.</summary>
    public const int Unknown141FieldNumber = 208;
    private uint unknown141_;
    public uint Unknown141 {
      get { return unknown141_; }
      set {
        unknown141_ = value;
      }
    }

    /// <summary>Field number for the "Unknown142" field.</summary>
    public const int Unknown142FieldNumber = 209;
    private uint unknown142_;
    public uint Unknown142 {
      get { return unknown142_; }
      set {
        unknown142_ = value;
      }
    }

    /// <summary>Field number for the "Unknown143" field.</summary>
    public const int Unknown143FieldNumber = 210;
    private uint unknown143_;
    public uint Unknown143 {
      get { return unknown143_; }
      set {
        unknown143_ = value;
      }
    }

    /// <summary>Field number for the "Unknown144" field.</summary>
    public const int Unknown144FieldNumber = 211;
    private uint unknown144_;
    public uint Unknown144 {
      get { return unknown144_; }
      set {
        unknown144_ = value;
      }
    }

    /// <summary>Field number for the "Unknown145" field.</summary>
    public const int Unknown145FieldNumber = 212;
    private uint unknown145_;
    public uint Unknown145 {
      get { return unknown145_; }
      set {
        unknown145_ = value;
      }
    }

    /// <summary>Field number for the "Unknown146" field.</summary>
    public const int Unknown146FieldNumber = 213;
    private uint unknown146_;
    public uint Unknown146 {
      get { return unknown146_; }
      set {
        unknown146_ = value;
      }
    }

    /// <summary>Field number for the "Unknown147" field.</summary>
    public const int Unknown147FieldNumber = 214;
    private uint unknown147_;
    public uint Unknown147 {
      get { return unknown147_; }
      set {
        unknown147_ = value;
      }
    }

    /// <summary>Field number for the "Unknown148" field.</summary>
    public const int Unknown148FieldNumber = 215;
    private uint unknown148_;
    public uint Unknown148 {
      get { return unknown148_; }
      set {
        unknown148_ = value;
      }
    }

    /// <summary>Field number for the "Unknown149" field.</summary>
    public const int Unknown149FieldNumber = 216;
    private uint unknown149_;
    public uint Unknown149 {
      get { return unknown149_; }
      set {
        unknown149_ = value;
      }
    }

    /// <summary>Field number for the "Unknown150" field.</summary>
    public const int Unknown150FieldNumber = 217;
    private uint unknown150_;
    public uint Unknown150 {
      get { return unknown150_; }
      set {
        unknown150_ = value;
      }
    }

    /// <summary>Field number for the "Unknown151" field.</summary>
    public const int Unknown151FieldNumber = 218;
    private uint unknown151_;
    public uint Unknown151 {
      get { return unknown151_; }
      set {
        unknown151_ = value;
      }
    }

    /// <summary>Field number for the "Unknown152" field.</summary>
    public const int Unknown152FieldNumber = 219;
    private uint unknown152_;
    public uint Unknown152 {
      get { return unknown152_; }
      set {
        unknown152_ = value;
      }
    }

    /// <summary>Field number for the "Unknown153" field.</summary>
    public const int Unknown153FieldNumber = 220;
    private uint unknown153_;
    public uint Unknown153 {
      get { return unknown153_; }
      set {
        unknown153_ = value;
      }
    }

    /// <summary>Field number for the "Unknown154" field.</summary>
    public const int Unknown154FieldNumber = 221;
    private uint unknown154_;
    public uint Unknown154 {
      get { return unknown154_; }
      set {
        unknown154_ = value;
      }
    }

    /// <summary>Field number for the "Unknown155" field.</summary>
    public const int Unknown155FieldNumber = 222;
    private uint unknown155_;
    public uint Unknown155 {
      get { return unknown155_; }
      set {
        unknown155_ = value;
      }
    }

    /// <summary>Field number for the "Unknown156" field.</summary>
    public const int Unknown156FieldNumber = 223;
    private uint unknown156_;
    public uint Unknown156 {
      get { return unknown156_; }
      set {
        unknown156_ = value;
      }
    }

    /// <summary>Field number for the "Unknown157" field.</summary>
    public const int Unknown157FieldNumber = 224;
    private uint unknown157_;
    public uint Unknown157 {
      get { return unknown157_; }
      set {
        unknown157_ = value;
      }
    }

    /// <summary>Field number for the "Unknown158" field.</summary>
    public const int Unknown158FieldNumber = 225;
    private uint unknown158_;
    public uint Unknown158 {
      get { return unknown158_; }
      set {
        unknown158_ = value;
      }
    }

    /// <summary>Field number for the "Unknown159" field.</summary>
    public const int Unknown159FieldNumber = 226;
    private uint unknown159_;
    public uint Unknown159 {
      get { return unknown159_; }
      set {
        unknown159_ = value;
      }
    }

    /// <summary>Field number for the "Unknown160" field.</summary>
    public const int Unknown160FieldNumber = 227;
    private uint unknown160_;
    public uint Unknown160 {
      get { return unknown160_; }
      set {
        unknown160_ = value;
      }
    }

    /// <summary>Field number for the "Unknown161" field.</summary>
    public const int Unknown161FieldNumber = 228;
    private uint unknown161_;
    public uint Unknown161 {
      get { return unknown161_; }
      set {
        unknown161_ = value;
      }
    }

    /// <summary>Field number for the "Unknown162" field.</summary>
    public const int Unknown162FieldNumber = 229;
    private uint unknown162_;
    public uint Unknown162 {
      get { return unknown162_; }
      set {
        unknown162_ = value;
      }
    }

    /// <summary>Field number for the "Unknown163" field.</summary>
    public const int Unknown163FieldNumber = 230;
    private uint unknown163_;
    public uint Unknown163 {
      get { return unknown163_; }
      set {
        unknown163_ = value;
      }
    }

    /// <summary>Field number for the "Unknown164" field.</summary>
    public const int Unknown164FieldNumber = 231;
    private uint unknown164_;
    public uint Unknown164 {
      get { return unknown164_; }
      set {
        unknown164_ = value;
      }
    }

    /// <summary>Field number for the "Unknown165" field.</summary>
    public const int Unknown165FieldNumber = 232;
    private uint unknown165_;
    public uint Unknown165 {
      get { return unknown165_; }
      set {
        unknown165_ = value;
      }
    }

    /// <summary>Field number for the "Unknown166" field.</summary>
    public const int Unknown166FieldNumber = 233;
    private uint unknown166_;
    public uint Unknown166 {
      get { return unknown166_; }
      set {
        unknown166_ = value;
      }
    }

    /// <summary>Field number for the "Unknown167" field.</summary>
    public const int Unknown167FieldNumber = 234;
    private uint unknown167_;
    public uint Unknown167 {
      get { return unknown167_; }
      set {
        unknown167_ = value;
      }
    }

    /// <summary>Field number for the "Unknown168" field.</summary>
    public const int Unknown168FieldNumber = 235;
    private uint unknown168_;
    public uint Unknown168 {
      get { return unknown168_; }
      set {
        unknown168_ = value;
      }
    }

    /// <summary>Field number for the "Unknown169" field.</summary>
    public const int Unknown169FieldNumber = 236;
    private uint unknown169_;
    public uint Unknown169 {
      get { return unknown169_; }
      set {
        unknown169_ = value;
      }
    }

    /// <summary>Field number for the "Unknown170" field.</summary>
    public const int Unknown170FieldNumber = 237;
    private uint unknown170_;
    public uint Unknown170 {
      get { return unknown170_; }
      set {
        unknown170_ = value;
      }
    }

    /// <summary>Field number for the "Unknown171" field.</summary>
    public const int Unknown171FieldNumber = 238;
    private uint unknown171_;
    public uint Unknown171 {
      get { return unknown171_; }
      set {
        unknown171_ = value;
      }
    }

    /// <summary>Field number for the "Unknown172" field.</summary>
    public const int Unknown172FieldNumber = 239;
    private uint unknown172_;
    public uint Unknown172 {
      get { return unknown172_; }
      set {
        unknown172_ = value;
      }
    }

    /// <summary>Field number for the "Unknown173" field.</summary>
    public const int Unknown173FieldNumber = 240;
    private uint unknown173_;
    public uint Unknown173 {
      get { return unknown173_; }
      set {
        unknown173_ = value;
      }
    }

    /// <summary>Field number for the "Unknown174" field.</summary>
    public const int Unknown174FieldNumber = 241;
    private uint unknown174_;
    public uint Unknown174 {
      get { return unknown174_; }
      set {
        unknown174_ = value;
      }
    }

    /// <summary>Field number for the "Unknown175" field.</summary>
    public const int Unknown175FieldNumber = 242;
    private uint unknown175_;
    public uint Unknown175 {
      get { return unknown175_; }
      set {
        unknown175_ = value;
      }
    }

    /// <summary>Field number for the "Unknown176" field.</summary>
    public const int Unknown176FieldNumber = 243;
    private uint unknown176_;
    public uint Unknown176 {
      get { return unknown176_; }
      set {
        unknown176_ = value;
      }
    }

    /// <summary>Field number for the "Unknown177" field.</summary>
    public const int Unknown177FieldNumber = 244;
    private uint unknown177_;
    public uint Unknown177 {
      get { return unknown177_; }
      set {
        unknown177_ = value;
      }
    }

    /// <summary>Field number for the "Unknown178" field.</summary>
    public const int Unknown178FieldNumber = 245;
    private uint unknown178_;
    public uint Unknown178 {
      get { return unknown178_; }
      set {
        unknown178_ = value;
      }
    }

    /// <summary>Field number for the "Unknown179" field.</summary>
    public const int Unknown179FieldNumber = 246;
    private uint unknown179_;
    public uint Unknown179 {
      get { return unknown179_; }
      set {
        unknown179_ = value;
      }
    }

    /// <summary>Field number for the "Unknown180" field.</summary>
    public const int Unknown180FieldNumber = 247;
    private uint unknown180_;
    public uint Unknown180 {
      get { return unknown180_; }
      set {
        unknown180_ = value;
      }
    }

    /// <summary>Field number for the "Unknown181" field.</summary>
    public const int Unknown181FieldNumber = 248;
    private uint unknown181_;
    public uint Unknown181 {
      get { return unknown181_; }
      set {
        unknown181_ = value;
      }
    }

    /// <summary>Field number for the "Unknown182" field.</summary>
    public const int Unknown182FieldNumber = 249;
    private uint unknown182_;
    public uint Unknown182 {
      get { return unknown182_; }
      set {
        unknown182_ = value;
      }
    }

    /// <summary>Field number for the "Unknown183" field.</summary>
    public const int Unknown183FieldNumber = 250;
    private uint unknown183_;
    public uint Unknown183 {
      get { return unknown183_; }
      set {
        unknown183_ = value;
      }
    }

    /// <summary>Field number for the "Unknown184" field.</summary>
    public const int Unknown184FieldNumber = 251;
    private uint unknown184_;
    public uint Unknown184 {
      get { return unknown184_; }
      set {
        unknown184_ = value;
      }
    }

    /// <summary>Field number for the "Unknown185" field.</summary>
    public const int Unknown185FieldNumber = 252;
    private uint unknown185_;
    public uint Unknown185 {
      get { return unknown185_; }
      set {
        unknown185_ = value;
      }
    }

    /// <summary>Field number for the "Unknown186" field.</summary>
    public const int Unknown186FieldNumber = 253;
    private uint unknown186_;
    public uint Unknown186 {
      get { return unknown186_; }
      set {
        unknown186_ = value;
      }
    }

    /// <summary>Field number for the "Unknown187" field.</summary>
    public const int Unknown187FieldNumber = 254;
    private uint unknown187_;
    public uint Unknown187 {
      get { return unknown187_; }
      set {
        unknown187_ = value;
      }
    }

    /// <summary>Field number for the "Unknown188" field.</summary>
    public const int Unknown188FieldNumber = 255;
    private uint unknown188_;
    public uint Unknown188 {
      get { return unknown188_; }
      set {
        unknown188_ = value;
      }
    }

    /// <summary>Field number for the "Unknown189" field.</summary>
    public const int Unknown189FieldNumber = 256;
    private uint unknown189_;
    public uint Unknown189 {
      get { return unknown189_; }
      set {
        unknown189_ = value;
      }
    }

    /// <summary>Field number for the "Unknown190" field.</summary>
    public const int Unknown190FieldNumber = 257;
    private uint unknown190_;
    public uint Unknown190 {
      get { return unknown190_; }
      set {
        unknown190_ = value;
      }
    }

    /// <summary>Field number for the "Unknown191" field.</summary>
    public const int Unknown191FieldNumber = 258;
    private uint unknown191_;
    public uint Unknown191 {
      get { return unknown191_; }
      set {
        unknown191_ = value;
      }
    }

    /// <summary>Field number for the "Unknown192" field.</summary>
    public const int Unknown192FieldNumber = 259;
    private uint unknown192_;
    public uint Unknown192 {
      get { return unknown192_; }
      set {
        unknown192_ = value;
      }
    }

    /// <summary>Field number for the "Unknown193" field.</summary>
    public const int Unknown193FieldNumber = 260;
    private uint unknown193_;
    public uint Unknown193 {
      get { return unknown193_; }
      set {
        unknown193_ = value;
      }
    }

    /// <summary>Field number for the "Unknown194" field.</summary>
    public const int Unknown194FieldNumber = 261;
    private uint unknown194_;
    public uint Unknown194 {
      get { return unknown194_; }
      set {
        unknown194_ = value;
      }
    }

    /// <summary>Field number for the "Unknown195" field.</summary>
    public const int Unknown195FieldNumber = 262;
    private uint unknown195_;
    public uint Unknown195 {
      get { return unknown195_; }
      set {
        unknown195_ = value;
      }
    }

    /// <summary>Field number for the "Unknown196" field.</summary>
    public const int Unknown196FieldNumber = 263;
    private uint unknown196_;
    public uint Unknown196 {
      get { return unknown196_; }
      set {
        unknown196_ = value;
      }
    }

    /// <summary>Field number for the "Unknown197" field.</summary>
    public const int Unknown197FieldNumber = 264;
    private uint unknown197_;
    public uint Unknown197 {
      get { return unknown197_; }
      set {
        unknown197_ = value;
      }
    }

    /// <summary>Field number for the "Unknown198" field.</summary>
    public const int Unknown198FieldNumber = 265;
    private uint unknown198_;
    public uint Unknown198 {
      get { return unknown198_; }
      set {
        unknown198_ = value;
      }
    }

    /// <summary>Field number for the "Unknown199" field.</summary>
    public const int Unknown199FieldNumber = 266;
    private uint unknown199_;
    public uint Unknown199 {
      get { return unknown199_; }
      set {
        unknown199_ = value;
      }
    }

    /// <summary>Field number for the "Unknown200" field.</summary>
    public const int Unknown200FieldNumber = 267;
    private uint unknown200_;
    public uint Unknown200 {
      get { return unknown200_; }
      set {
        unknown200_ = value;
      }
    }

    /// <summary>Field number for the "Unknown201" field.</summary>
    public const int Unknown201FieldNumber = 268;
    private uint unknown201_;
    public uint Unknown201 {
      get { return unknown201_; }
      set {
        unknown201_ = value;
      }
    }

    /// <summary>Field number for the "Unknown202" field.</summary>
    public const int Unknown202FieldNumber = 269;
    private uint unknown202_;
    public uint Unknown202 {
      get { return unknown202_; }
      set {
        unknown202_ = value;
      }
    }

    /// <summary>Field number for the "Unknown203" field.</summary>
    public const int Unknown203FieldNumber = 270;
    private uint unknown203_;
    public uint Unknown203 {
      get { return unknown203_; }
      set {
        unknown203_ = value;
      }
    }

    /// <summary>Field number for the "Unknown204" field.</summary>
    public const int Unknown204FieldNumber = 271;
    private uint unknown204_;
    public uint Unknown204 {
      get { return unknown204_; }
      set {
        unknown204_ = value;
      }
    }

    /// <summary>Field number for the "Unknown205" field.</summary>
    public const int Unknown205FieldNumber = 272;
    private uint unknown205_;
    public uint Unknown205 {
      get { return unknown205_; }
      set {
        unknown205_ = value;
      }
    }

    /// <summary>Field number for the "Unknown206" field.</summary>
    public const int Unknown206FieldNumber = 273;
    private uint unknown206_;
    public uint Unknown206 {
      get { return unknown206_; }
      set {
        unknown206_ = value;
      }
    }

    /// <summary>Field number for the "Unknown207" field.</summary>
    public const int Unknown207FieldNumber = 274;
    private uint unknown207_;
    public uint Unknown207 {
      get { return unknown207_; }
      set {
        unknown207_ = value;
      }
    }

    /// <summary>Field number for the "Unknown208" field.</summary>
    public const int Unknown208FieldNumber = 275;
    private uint unknown208_;
    public uint Unknown208 {
      get { return unknown208_; }
      set {
        unknown208_ = value;
      }
    }

    /// <summary>Field number for the "Unknown209" field.</summary>
    public const int Unknown209FieldNumber = 276;
    private uint unknown209_;
    public uint Unknown209 {
      get { return unknown209_; }
      set {
        unknown209_ = value;
      }
    }

    /// <summary>Field number for the "Unknown210" field.</summary>
    public const int Unknown210FieldNumber = 277;
    private uint unknown210_;
    public uint Unknown210 {
      get { return unknown210_; }
      set {
        unknown210_ = value;
      }
    }

    /// <summary>Field number for the "Unknown211" field.</summary>
    public const int Unknown211FieldNumber = 278;
    private uint unknown211_;
    public uint Unknown211 {
      get { return unknown211_; }
      set {
        unknown211_ = value;
      }
    }

    /// <summary>Field number for the "Unknown212" field.</summary>
    public const int Unknown212FieldNumber = 279;
    private uint unknown212_;
    public uint Unknown212 {
      get { return unknown212_; }
      set {
        unknown212_ = value;
      }
    }

    /// <summary>Field number for the "Unknown213" field.</summary>
    public const int Unknown213FieldNumber = 280;
    private uint unknown213_;
    public uint Unknown213 {
      get { return unknown213_; }
      set {
        unknown213_ = value;
      }
    }

    /// <summary>Field number for the "Unknown214" field.</summary>
    public const int Unknown214FieldNumber = 281;
    private uint unknown214_;
    public uint Unknown214 {
      get { return unknown214_; }
      set {
        unknown214_ = value;
      }
    }

    /// <summary>Field number for the "Unknown215" field.</summary>
    public const int Unknown215FieldNumber = 282;
    private uint unknown215_;
    public uint Unknown215 {
      get { return unknown215_; }
      set {
        unknown215_ = value;
      }
    }

    /// <summary>Field number for the "Unknown216" field.</summary>
    public const int Unknown216FieldNumber = 283;
    private uint unknown216_;
    public uint Unknown216 {
      get { return unknown216_; }
      set {
        unknown216_ = value;
      }
    }

    /// <summary>Field number for the "Unknown217" field.</summary>
    public const int Unknown217FieldNumber = 284;
    private uint unknown217_;
    public uint Unknown217 {
      get { return unknown217_; }
      set {
        unknown217_ = value;
      }
    }

    /// <summary>Field number for the "Unknown218" field.</summary>
    public const int Unknown218FieldNumber = 285;
    private uint unknown218_;
    public uint Unknown218 {
      get { return unknown218_; }
      set {
        unknown218_ = value;
      }
    }

    /// <summary>Field number for the "Unknown219" field.</summary>
    public const int Unknown219FieldNumber = 286;
    private uint unknown219_;
    public uint Unknown219 {
      get { return unknown219_; }
      set {
        unknown219_ = value;
      }
    }

    /// <summary>Field number for the "Unknown220" field.</summary>
    public const int Unknown220FieldNumber = 287;
    private uint unknown220_;
    public uint Unknown220 {
      get { return unknown220_; }
      set {
        unknown220_ = value;
      }
    }

    /// <summary>Field number for the "Unknown221" field.</summary>
    public const int Unknown221FieldNumber = 288;
    private uint unknown221_;
    public uint Unknown221 {
      get { return unknown221_; }
      set {
        unknown221_ = value;
      }
    }

    /// <summary>Field number for the "Unknown222" field.</summary>
    public const int Unknown222FieldNumber = 289;
    private uint unknown222_;
    public uint Unknown222 {
      get { return unknown222_; }
      set {
        unknown222_ = value;
      }
    }

    /// <summary>Field number for the "Unknown223" field.</summary>
    public const int Unknown223FieldNumber = 290;
    private uint unknown223_;
    public uint Unknown223 {
      get { return unknown223_; }
      set {
        unknown223_ = value;
      }
    }

    /// <summary>Field number for the "Unknown224" field.</summary>
    public const int Unknown224FieldNumber = 291;
    private uint unknown224_;
    public uint Unknown224 {
      get { return unknown224_; }
      set {
        unknown224_ = value;
      }
    }

    /// <summary>Field number for the "Unknown225" field.</summary>
    public const int Unknown225FieldNumber = 292;
    private uint unknown225_;
    public uint Unknown225 {
      get { return unknown225_; }
      set {
        unknown225_ = value;
      }
    }

    /// <summary>Field number for the "Unknown226" field.</summary>
    public const int Unknown226FieldNumber = 293;
    private uint unknown226_;
    public uint Unknown226 {
      get { return unknown226_; }
      set {
        unknown226_ = value;
      }
    }

    /// <summary>Field number for the "Unknown227" field.</summary>
    public const int Unknown227FieldNumber = 294;
    private uint unknown227_;
    public uint Unknown227 {
      get { return unknown227_; }
      set {
        unknown227_ = value;
      }
    }

    /// <summary>Field number for the "Unknown228" field.</summary>
    public const int Unknown228FieldNumber = 295;
    private uint unknown228_;
    public uint Unknown228 {
      get { return unknown228_; }
      set {
        unknown228_ = value;
      }
    }

    /// <summary>Field number for the "Unknown229" field.</summary>
    public const int Unknown229FieldNumber = 296;
    private uint unknown229_;
    public uint Unknown229 {
      get { return unknown229_; }
      set {
        unknown229_ = value;
      }
    }

    /// <summary>Field number for the "Unknown230" field.</summary>
    public const int Unknown230FieldNumber = 297;
    private uint unknown230_;
    public uint Unknown230 {
      get { return unknown230_; }
      set {
        unknown230_ = value;
      }
    }

    /// <summary>Field number for the "Unknown231" field.</summary>
    public const int Unknown231FieldNumber = 298;
    private uint unknown231_;
    public uint Unknown231 {
      get { return unknown231_; }
      set {
        unknown231_ = value;
      }
    }

    /// <summary>Field number for the "Unknown232" field.</summary>
    public const int Unknown232FieldNumber = 299;
    private uint unknown232_;
    public uint Unknown232 {
      get { return unknown232_; }
      set {
        unknown232_ = value;
      }
    }

    /// <summary>Field number for the "Unknown233" field.</summary>
    public const int Unknown233FieldNumber = 300;
    private uint unknown233_;
    public uint Unknown233 {
      get { return unknown233_; }
      set {
        unknown233_ = value;
      }
    }

    /// <summary>Field number for the "Unknown234" field.</summary>
    public const int Unknown234FieldNumber = 301;
    private uint unknown234_;
    public uint Unknown234 {
      get { return unknown234_; }
      set {
        unknown234_ = value;
      }
    }

    /// <summary>Field number for the "Unknown235" field.</summary>
    public const int Unknown235FieldNumber = 302;
    private uint unknown235_;
    public uint Unknown235 {
      get { return unknown235_; }
      set {
        unknown235_ = value;
      }
    }

    /// <summary>Field number for the "Unknown236" field.</summary>
    public const int Unknown236FieldNumber = 303;
    private uint unknown236_;
    public uint Unknown236 {
      get { return unknown236_; }
      set {
        unknown236_ = value;
      }
    }

    /// <summary>Field number for the "Unknown237" field.</summary>
    public const int Unknown237FieldNumber = 304;
    private uint unknown237_;
    public uint Unknown237 {
      get { return unknown237_; }
      set {
        unknown237_ = value;
      }
    }

    /// <summary>Field number for the "Unknown238" field.</summary>
    public const int Unknown238FieldNumber = 305;
    private uint unknown238_;
    public uint Unknown238 {
      get { return unknown238_; }
      set {
        unknown238_ = value;
      }
    }

    /// <summary>Field number for the "Unknown239" field.</summary>
    public const int Unknown239FieldNumber = 306;
    private uint unknown239_;
    public uint Unknown239 {
      get { return unknown239_; }
      set {
        unknown239_ = value;
      }
    }

    /// <summary>Field number for the "Unknown240" field.</summary>
    public const int Unknown240FieldNumber = 307;
    private uint unknown240_;
    public uint Unknown240 {
      get { return unknown240_; }
      set {
        unknown240_ = value;
      }
    }

    /// <summary>Field number for the "Unknown241" field.</summary>
    public const int Unknown241FieldNumber = 308;
    private uint unknown241_;
    public uint Unknown241 {
      get { return unknown241_; }
      set {
        unknown241_ = value;
      }
    }

    /// <summary>Field number for the "Unknown242" field.</summary>
    public const int Unknown242FieldNumber = 309;
    private uint unknown242_;
    public uint Unknown242 {
      get { return unknown242_; }
      set {
        unknown242_ = value;
      }
    }

    /// <summary>Field number for the "Unknown243" field.</summary>
    public const int Unknown243FieldNumber = 310;
    private uint unknown243_;
    public uint Unknown243 {
      get { return unknown243_; }
      set {
        unknown243_ = value;
      }
    }

    /// <summary>Field number for the "Unknown244" field.</summary>
    public const int Unknown244FieldNumber = 311;
    private uint unknown244_;
    public uint Unknown244 {
      get { return unknown244_; }
      set {
        unknown244_ = value;
      }
    }

    /// <summary>Field number for the "Unknown245" field.</summary>
    public const int Unknown245FieldNumber = 312;
    private uint unknown245_;
    public uint Unknown245 {
      get { return unknown245_; }
      set {
        unknown245_ = value;
      }
    }

    /// <summary>Field number for the "Unknown246" field.</summary>
    public const int Unknown246FieldNumber = 313;
    private uint unknown246_;
    public uint Unknown246 {
      get { return unknown246_; }
      set {
        unknown246_ = value;
      }
    }

    /// <summary>Field number for the "Unknown247" field.</summary>
    public const int Unknown247FieldNumber = 314;
    private uint unknown247_;
    public uint Unknown247 {
      get { return unknown247_; }
      set {
        unknown247_ = value;
      }
    }

    /// <summary>Field number for the "Unknown248" field.</summary>
    public const int Unknown248FieldNumber = 315;
    private uint unknown248_;
    public uint Unknown248 {
      get { return unknown248_; }
      set {
        unknown248_ = value;
      }
    }

    /// <summary>Field number for the "Unknown249" field.</summary>
    public const int Unknown249FieldNumber = 316;
    private uint unknown249_;
    public uint Unknown249 {
      get { return unknown249_; }
      set {
        unknown249_ = value;
      }
    }

    /// <summary>Field number for the "Unknown250" field.</summary>
    public const int Unknown250FieldNumber = 317;
    private uint unknown250_;
    public uint Unknown250 {
      get { return unknown250_; }
      set {
        unknown250_ = value;
      }
    }

    /// <summary>Field number for the "Unknown251" field.</summary>
    public const int Unknown251FieldNumber = 318;
    private uint unknown251_;
    public uint Unknown251 {
      get { return unknown251_; }
      set {
        unknown251_ = value;
      }
    }

    /// <summary>Field number for the "Unknown252" field.</summary>
    public const int Unknown252FieldNumber = 319;
    private uint unknown252_;
    public uint Unknown252 {
      get { return unknown252_; }
      set {
        unknown252_ = value;
      }
    }

    /// <summary>Field number for the "Unknown253" field.</summary>
    public const int Unknown253FieldNumber = 320;
    private uint unknown253_;
    public uint Unknown253 {
      get { return unknown253_; }
      set {
        unknown253_ = value;
      }
    }

    /// <summary>Field number for the "Unknown254" field.</summary>
    public const int Unknown254FieldNumber = 321;
    private uint unknown254_;
    public uint Unknown254 {
      get { return unknown254_; }
      set {
        unknown254_ = value;
      }
    }

    /// <summary>Field number for the "Unknown255" field.</summary>
    public const int Unknown255FieldNumber = 322;
    private uint unknown255_;
    public uint Unknown255 {
      get { return unknown255_; }
      set {
        unknown255_ = value;
      }
    }

    /// <summary>Field number for the "Unknown256" field.</summary>
    public const int Unknown256FieldNumber = 323;
    private uint unknown256_;
    public uint Unknown256 {
      get { return unknown256_; }
      set {
        unknown256_ = value;
      }
    }

    /// <summary>Field number for the "Unknown257" field.</summary>
    public const int Unknown257FieldNumber = 324;
    private uint unknown257_;
    public uint Unknown257 {
      get { return unknown257_; }
      set {
        unknown257_ = value;
      }
    }

    /// <summary>Field number for the "Unknown258" field.</summary>
    public const int Unknown258FieldNumber = 325;
    private uint unknown258_;
    public uint Unknown258 {
      get { return unknown258_; }
      set {
        unknown258_ = value;
      }
    }

    /// <summary>Field number for the "Unknown259" field.</summary>
    public const int Unknown259FieldNumber = 326;
    private uint unknown259_;
    public uint Unknown259 {
      get { return unknown259_; }
      set {
        unknown259_ = value;
      }
    }

    /// <summary>Field number for the "Unknown260" field.</summary>
    public const int Unknown260FieldNumber = 327;
    private uint unknown260_;
    public uint Unknown260 {
      get { return unknown260_; }
      set {
        unknown260_ = value;
      }
    }

    /// <summary>Field number for the "Unknown261" field.</summary>
    public const int Unknown261FieldNumber = 328;
    private uint unknown261_;
    public uint Unknown261 {
      get { return unknown261_; }
      set {
        unknown261_ = value;
      }
    }

    /// <summary>Field number for the "Unknown262" field.</summary>
    public const int Unknown262FieldNumber = 329;
    private uint unknown262_;
    public uint Unknown262 {
      get { return unknown262_; }
      set {
        unknown262_ = value;
      }
    }

    /// <summary>Field number for the "Unknown263" field.</summary>
    public const int Unknown263FieldNumber = 330;
    private uint unknown263_;
    public uint Unknown263 {
      get { return unknown263_; }
      set {
        unknown263_ = value;
      }
    }

    /// <summary>Field number for the "Unknown264" field.</summary>
    public const int Unknown264FieldNumber = 331;
    private uint unknown264_;
    public uint Unknown264 {
      get { return unknown264_; }
      set {
        unknown264_ = value;
      }
    }

    /// <summary>Field number for the "AtkDarkCorrection" field.</summary>
    public const int AtkDarkCorrectionFieldNumber = 332;
    private uint atkDarkCorrection_;
    public uint AtkDarkCorrection {
      get { return atkDarkCorrection_; }
      set {
        atkDarkCorrection_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as AtkParam);
    }

    public bool Equals(AtkParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Index != other.Index) return false;
      if (Offset != other.Offset) return false;
      if (Hit0Radius != other.Hit0Radius) return false;
      if (Hit1Radius != other.Hit1Radius) return false;
      if (Hit2Radius != other.Hit2Radius) return false;
      if (Hit3Radius != other.Hit3Radius) return false;
      if (KnockbackDist != other.KnockbackDist) return false;
      if (HitStopTime != other.HitStopTime) return false;
      if (SpEffectId0 != other.SpEffectId0) return false;
      if (SpEffectId1 != other.SpEffectId1) return false;
      if (SpEffectId2 != other.SpEffectId2) return false;
      if (SpEffectId3 != other.SpEffectId3) return false;
      if (SpEffectId4 != other.SpEffectId4) return false;
      if (Hit0DmyPoly1 != other.Hit0DmyPoly1) return false;
      if (Hit1DmyPoly1 != other.Hit1DmyPoly1) return false;
      if (Hit2DmyPoly1 != other.Hit2DmyPoly1) return false;
      if (Hit3DmyPoly1 != other.Hit3DmyPoly1) return false;
      if (Hit0DmyPoly2 != other.Hit0DmyPoly2) return false;
      if (Hit1DmyPoly2 != other.Hit1DmyPoly2) return false;
      if (Hit2DmyPoly2 != other.Hit2DmyPoly2) return false;
      if (Hit3DmyPoly2 != other.Hit3DmyPoly2) return false;
      if (BlowingCorrection != other.BlowingCorrection) return false;
      if (AtkPhysCorrection != other.AtkPhysCorrection) return false;
      if (AtkMagCorrection != other.AtkMagCorrection) return false;
      if (AtkFireCorrection != other.AtkFireCorrection) return false;
      if (AtkThunCorrection != other.AtkThunCorrection) return false;
      if (AtkStamCorrection != other.AtkStamCorrection) return false;
      if (GuardAtkRateCorrection != other.GuardAtkRateCorrection) return false;
      if (GuardBreakCorrection != other.GuardBreakCorrection) return false;
      if (AtkThrowEscapeCorrection != other.AtkThrowEscapeCorrection) return false;
      if (AtkPhys != other.AtkPhys) return false;
      if (AtkMag != other.AtkMag) return false;
      if (AtkFire != other.AtkFire) return false;
      if (AtkThun != other.AtkThun) return false;
      if (AtkStam != other.AtkStam) return false;
      if (GuardAtkRate != other.GuardAtkRate) return false;
      if (GuardBreakRate != other.GuardBreakRate) return false;
      if (AtkSuperArmor != other.AtkSuperArmor) return false;
      if (AtkThrowEscape != other.AtkThrowEscape) return false;
      if (AtkObj != other.AtkObj) return false;
      if (GuardStaminaCutRate != other.GuardStaminaCutRate) return false;
      if (GuardRate != other.GuardRate) return false;
      if (ThrowTypeId != other.ThrowTypeId) return false;
      if (Hit0HitType != other.Hit0HitType) return false;
      if (Hit1HitType != other.Hit1HitType) return false;
      if (Hit2HitType != other.Hit2HitType) return false;
      if (Hit3HitType != other.Hit3HitType) return false;
      if (Hit0Priority != other.Hit0Priority) return false;
      if (Hit1Priority != other.Hit1Priority) return false;
      if (Hit2Priority != other.Hit2Priority) return false;
      if (Hit3Priority != other.Hit3Priority) return false;
      if (DamageLevel != other.DamageLevel) return false;
      if (MapHitType != other.MapHitType) return false;
      if (GuardCutCancelRate != other.GuardCutCancelRate) return false;
      if (AtkAttribute != other.AtkAttribute) return false;
      if (SpecialAttributes != other.SpecialAttributes) return false;
      if (AttackType != other.AttackType) return false;
      if (AtkMaterial != other.AtkMaterial) return false;
      if (AtkSize != other.AtkSize) return false;
      if (DefMaterial != other.DefMaterial) return false;
      if (DefSfxMaterial != other.DefSfxMaterial) return false;
      if (HitSourceType != other.HitSourceType) return false;
      if (ThrowFlag != other.ThrowFlag) return false;
      if (BitField != other.BitField) return false;
      if (Unknown0 != other.Unknown0) return false;
      if (Unknown1 != other.Unknown1) return false;
      if (Unknown2 != other.Unknown2) return false;
      if (Unknown3 != other.Unknown3) return false;
      if (Unknown4 != other.Unknown4) return false;
      if (Unknown5 != other.Unknown5) return false;
      if (Unknown6 != other.Unknown6) return false;
      if (Unknown7 != other.Unknown7) return false;
      if (Unknown8 != other.Unknown8) return false;
      if (Unknown9 != other.Unknown9) return false;
      if (Unknown10 != other.Unknown10) return false;
      if (Unknown11 != other.Unknown11) return false;
      if (Unknown12 != other.Unknown12) return false;
      if (Unknown13 != other.Unknown13) return false;
      if (Unknown14 != other.Unknown14) return false;
      if (Unknown15 != other.Unknown15) return false;
      if (Unknown16 != other.Unknown16) return false;
      if (Unknown17 != other.Unknown17) return false;
      if (Unknown18 != other.Unknown18) return false;
      if (Unknown19 != other.Unknown19) return false;
      if (Unknown20 != other.Unknown20) return false;
      if (Unknown21 != other.Unknown21) return false;
      if (Unknown22 != other.Unknown22) return false;
      if (Unknown23 != other.Unknown23) return false;
      if (Unknown24 != other.Unknown24) return false;
      if (Unknown25 != other.Unknown25) return false;
      if (Unknown26 != other.Unknown26) return false;
      if (Unknown27 != other.Unknown27) return false;
      if (Unknown28 != other.Unknown28) return false;
      if (Unknown29 != other.Unknown29) return false;
      if (Unknown30 != other.Unknown30) return false;
      if (Unknown31 != other.Unknown31) return false;
      if (Unknown32 != other.Unknown32) return false;
      if (Unknown33 != other.Unknown33) return false;
      if (Unknown34 != other.Unknown34) return false;
      if (Unknown35 != other.Unknown35) return false;
      if (Unknown36 != other.Unknown36) return false;
      if (Unknown37 != other.Unknown37) return false;
      if (Unknown38 != other.Unknown38) return false;
      if (Unknown39 != other.Unknown39) return false;
      if (Unknown40 != other.Unknown40) return false;
      if (Unknown41 != other.Unknown41) return false;
      if (Unknown42 != other.Unknown42) return false;
      if (Unknown43 != other.Unknown43) return false;
      if (Unknown44 != other.Unknown44) return false;
      if (Unknown45 != other.Unknown45) return false;
      if (Unknown46 != other.Unknown46) return false;
      if (Unknown47 != other.Unknown47) return false;
      if (Unknown48 != other.Unknown48) return false;
      if (Unknown49 != other.Unknown49) return false;
      if (Unknown50 != other.Unknown50) return false;
      if (Unknown51 != other.Unknown51) return false;
      if (Unknown52 != other.Unknown52) return false;
      if (Unknown53 != other.Unknown53) return false;
      if (Unknown54 != other.Unknown54) return false;
      if (Unknown55 != other.Unknown55) return false;
      if (Unknown56 != other.Unknown56) return false;
      if (Unknown57 != other.Unknown57) return false;
      if (Unknown58 != other.Unknown58) return false;
      if (Unknown59 != other.Unknown59) return false;
      if (Unknown60 != other.Unknown60) return false;
      if (Unknown61 != other.Unknown61) return false;
      if (Unknown62 != other.Unknown62) return false;
      if (Unknown63 != other.Unknown63) return false;
      if (Unknown64 != other.Unknown64) return false;
      if (Unknown65 != other.Unknown65) return false;
      if (Unknown66 != other.Unknown66) return false;
      if (Unknown67 != other.Unknown67) return false;
      if (Unknown68 != other.Unknown68) return false;
      if (Unknown69 != other.Unknown69) return false;
      if (Unknown70 != other.Unknown70) return false;
      if (Unknown71 != other.Unknown71) return false;
      if (Unknown72 != other.Unknown72) return false;
      if (Unknown73 != other.Unknown73) return false;
      if (Unknown74 != other.Unknown74) return false;
      if (Unknown75 != other.Unknown75) return false;
      if (Unknown76 != other.Unknown76) return false;
      if (Unknown77 != other.Unknown77) return false;
      if (Unknown78 != other.Unknown78) return false;
      if (Unknown79 != other.Unknown79) return false;
      if (Unknown80 != other.Unknown80) return false;
      if (Unknown81 != other.Unknown81) return false;
      if (Unknown82 != other.Unknown82) return false;
      if (Unknown83 != other.Unknown83) return false;
      if (Unknown84 != other.Unknown84) return false;
      if (Unknown85 != other.Unknown85) return false;
      if (Unknown86 != other.Unknown86) return false;
      if (Unknown87 != other.Unknown87) return false;
      if (Unknown88 != other.Unknown88) return false;
      if (Unknown89 != other.Unknown89) return false;
      if (Unknown90 != other.Unknown90) return false;
      if (Unknown91 != other.Unknown91) return false;
      if (Unknown92 != other.Unknown92) return false;
      if (Unknown93 != other.Unknown93) return false;
      if (Unknown94 != other.Unknown94) return false;
      if (Unknown95 != other.Unknown95) return false;
      if (Unknown96 != other.Unknown96) return false;
      if (Unknown97 != other.Unknown97) return false;
      if (Unknown98 != other.Unknown98) return false;
      if (Unknown99 != other.Unknown99) return false;
      if (Unknown100 != other.Unknown100) return false;
      if (Unknown101 != other.Unknown101) return false;
      if (Unknown102 != other.Unknown102) return false;
      if (Unknown103 != other.Unknown103) return false;
      if (Unknown104 != other.Unknown104) return false;
      if (Unknown105 != other.Unknown105) return false;
      if (Unknown106 != other.Unknown106) return false;
      if (Unknown107 != other.Unknown107) return false;
      if (Unknown108 != other.Unknown108) return false;
      if (Unknown109 != other.Unknown109) return false;
      if (Unknown110 != other.Unknown110) return false;
      if (Unknown111 != other.Unknown111) return false;
      if (Unknown112 != other.Unknown112) return false;
      if (Unknown113 != other.Unknown113) return false;
      if (Unknown114 != other.Unknown114) return false;
      if (Unknown115 != other.Unknown115) return false;
      if (Unknown116 != other.Unknown116) return false;
      if (Unknown117 != other.Unknown117) return false;
      if (Unknown118 != other.Unknown118) return false;
      if (Unknown119 != other.Unknown119) return false;
      if (Unknown120 != other.Unknown120) return false;
      if (Unknown121 != other.Unknown121) return false;
      if (Unknown122 != other.Unknown122) return false;
      if (Unknown123 != other.Unknown123) return false;
      if (Unknown124 != other.Unknown124) return false;
      if (Unknown125 != other.Unknown125) return false;
      if (Unknown126 != other.Unknown126) return false;
      if (Unknown127 != other.Unknown127) return false;
      if (Unknown128 != other.Unknown128) return false;
      if (Unknown129 != other.Unknown129) return false;
      if (Unknown130 != other.Unknown130) return false;
      if (Unknown131 != other.Unknown131) return false;
      if (Unknown132 != other.Unknown132) return false;
      if (Unknown133 != other.Unknown133) return false;
      if (Unknown134 != other.Unknown134) return false;
      if (Unknown135 != other.Unknown135) return false;
      if (Unknown136 != other.Unknown136) return false;
      if (Unknown137 != other.Unknown137) return false;
      if (Unknown138 != other.Unknown138) return false;
      if (Unknown139 != other.Unknown139) return false;
      if (Unknown140 != other.Unknown140) return false;
      if (Unknown141 != other.Unknown141) return false;
      if (Unknown142 != other.Unknown142) return false;
      if (Unknown143 != other.Unknown143) return false;
      if (Unknown144 != other.Unknown144) return false;
      if (Unknown145 != other.Unknown145) return false;
      if (Unknown146 != other.Unknown146) return false;
      if (Unknown147 != other.Unknown147) return false;
      if (Unknown148 != other.Unknown148) return false;
      if (Unknown149 != other.Unknown149) return false;
      if (Unknown150 != other.Unknown150) return false;
      if (Unknown151 != other.Unknown151) return false;
      if (Unknown152 != other.Unknown152) return false;
      if (Unknown153 != other.Unknown153) return false;
      if (Unknown154 != other.Unknown154) return false;
      if (Unknown155 != other.Unknown155) return false;
      if (Unknown156 != other.Unknown156) return false;
      if (Unknown157 != other.Unknown157) return false;
      if (Unknown158 != other.Unknown158) return false;
      if (Unknown159 != other.Unknown159) return false;
      if (Unknown160 != other.Unknown160) return false;
      if (Unknown161 != other.Unknown161) return false;
      if (Unknown162 != other.Unknown162) return false;
      if (Unknown163 != other.Unknown163) return false;
      if (Unknown164 != other.Unknown164) return false;
      if (Unknown165 != other.Unknown165) return false;
      if (Unknown166 != other.Unknown166) return false;
      if (Unknown167 != other.Unknown167) return false;
      if (Unknown168 != other.Unknown168) return false;
      if (Unknown169 != other.Unknown169) return false;
      if (Unknown170 != other.Unknown170) return false;
      if (Unknown171 != other.Unknown171) return false;
      if (Unknown172 != other.Unknown172) return false;
      if (Unknown173 != other.Unknown173) return false;
      if (Unknown174 != other.Unknown174) return false;
      if (Unknown175 != other.Unknown175) return false;
      if (Unknown176 != other.Unknown176) return false;
      if (Unknown177 != other.Unknown177) return false;
      if (Unknown178 != other.Unknown178) return false;
      if (Unknown179 != other.Unknown179) return false;
      if (Unknown180 != other.Unknown180) return false;
      if (Unknown181 != other.Unknown181) return false;
      if (Unknown182 != other.Unknown182) return false;
      if (Unknown183 != other.Unknown183) return false;
      if (Unknown184 != other.Unknown184) return false;
      if (Unknown185 != other.Unknown185) return false;
      if (Unknown186 != other.Unknown186) return false;
      if (Unknown187 != other.Unknown187) return false;
      if (Unknown188 != other.Unknown188) return false;
      if (Unknown189 != other.Unknown189) return false;
      if (Unknown190 != other.Unknown190) return false;
      if (Unknown191 != other.Unknown191) return false;
      if (Unknown192 != other.Unknown192) return false;
      if (Unknown193 != other.Unknown193) return false;
      if (Unknown194 != other.Unknown194) return false;
      if (Unknown195 != other.Unknown195) return false;
      if (Unknown196 != other.Unknown196) return false;
      if (Unknown197 != other.Unknown197) return false;
      if (Unknown198 != other.Unknown198) return false;
      if (Unknown199 != other.Unknown199) return false;
      if (Unknown200 != other.Unknown200) return false;
      if (Unknown201 != other.Unknown201) return false;
      if (Unknown202 != other.Unknown202) return false;
      if (Unknown203 != other.Unknown203) return false;
      if (Unknown204 != other.Unknown204) return false;
      if (Unknown205 != other.Unknown205) return false;
      if (Unknown206 != other.Unknown206) return false;
      if (Unknown207 != other.Unknown207) return false;
      if (Unknown208 != other.Unknown208) return false;
      if (Unknown209 != other.Unknown209) return false;
      if (Unknown210 != other.Unknown210) return false;
      if (Unknown211 != other.Unknown211) return false;
      if (Unknown212 != other.Unknown212) return false;
      if (Unknown213 != other.Unknown213) return false;
      if (Unknown214 != other.Unknown214) return false;
      if (Unknown215 != other.Unknown215) return false;
      if (Unknown216 != other.Unknown216) return false;
      if (Unknown217 != other.Unknown217) return false;
      if (Unknown218 != other.Unknown218) return false;
      if (Unknown219 != other.Unknown219) return false;
      if (Unknown220 != other.Unknown220) return false;
      if (Unknown221 != other.Unknown221) return false;
      if (Unknown222 != other.Unknown222) return false;
      if (Unknown223 != other.Unknown223) return false;
      if (Unknown224 != other.Unknown224) return false;
      if (Unknown225 != other.Unknown225) return false;
      if (Unknown226 != other.Unknown226) return false;
      if (Unknown227 != other.Unknown227) return false;
      if (Unknown228 != other.Unknown228) return false;
      if (Unknown229 != other.Unknown229) return false;
      if (Unknown230 != other.Unknown230) return false;
      if (Unknown231 != other.Unknown231) return false;
      if (Unknown232 != other.Unknown232) return false;
      if (Unknown233 != other.Unknown233) return false;
      if (Unknown234 != other.Unknown234) return false;
      if (Unknown235 != other.Unknown235) return false;
      if (Unknown236 != other.Unknown236) return false;
      if (Unknown237 != other.Unknown237) return false;
      if (Unknown238 != other.Unknown238) return false;
      if (Unknown239 != other.Unknown239) return false;
      if (Unknown240 != other.Unknown240) return false;
      if (Unknown241 != other.Unknown241) return false;
      if (Unknown242 != other.Unknown242) return false;
      if (Unknown243 != other.Unknown243) return false;
      if (Unknown244 != other.Unknown244) return false;
      if (Unknown245 != other.Unknown245) return false;
      if (Unknown246 != other.Unknown246) return false;
      if (Unknown247 != other.Unknown247) return false;
      if (Unknown248 != other.Unknown248) return false;
      if (Unknown249 != other.Unknown249) return false;
      if (Unknown250 != other.Unknown250) return false;
      if (Unknown251 != other.Unknown251) return false;
      if (Unknown252 != other.Unknown252) return false;
      if (Unknown253 != other.Unknown253) return false;
      if (Unknown254 != other.Unknown254) return false;
      if (Unknown255 != other.Unknown255) return false;
      if (Unknown256 != other.Unknown256) return false;
      if (Unknown257 != other.Unknown257) return false;
      if (Unknown258 != other.Unknown258) return false;
      if (Unknown259 != other.Unknown259) return false;
      if (Unknown260 != other.Unknown260) return false;
      if (Unknown261 != other.Unknown261) return false;
      if (Unknown262 != other.Unknown262) return false;
      if (Unknown263 != other.Unknown263) return false;
      if (Unknown264 != other.Unknown264) return false;
      if (AtkDarkCorrection != other.AtkDarkCorrection) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (Hit0Radius != 0F) hash ^= Hit0Radius.GetHashCode();
      if (Hit1Radius != 0F) hash ^= Hit1Radius.GetHashCode();
      if (Hit2Radius != 0F) hash ^= Hit2Radius.GetHashCode();
      if (Hit3Radius != 0F) hash ^= Hit3Radius.GetHashCode();
      if (KnockbackDist != 0F) hash ^= KnockbackDist.GetHashCode();
      if (HitStopTime != 0F) hash ^= HitStopTime.GetHashCode();
      if (SpEffectId0 != 0) hash ^= SpEffectId0.GetHashCode();
      if (SpEffectId1 != 0) hash ^= SpEffectId1.GetHashCode();
      if (SpEffectId2 != 0) hash ^= SpEffectId2.GetHashCode();
      if (SpEffectId3 != 0) hash ^= SpEffectId3.GetHashCode();
      if (SpEffectId4 != 0) hash ^= SpEffectId4.GetHashCode();
      if (Hit0DmyPoly1 != 0) hash ^= Hit0DmyPoly1.GetHashCode();
      if (Hit1DmyPoly1 != 0) hash ^= Hit1DmyPoly1.GetHashCode();
      if (Hit2DmyPoly1 != 0) hash ^= Hit2DmyPoly1.GetHashCode();
      if (Hit3DmyPoly1 != 0) hash ^= Hit3DmyPoly1.GetHashCode();
      if (Hit0DmyPoly2 != 0) hash ^= Hit0DmyPoly2.GetHashCode();
      if (Hit1DmyPoly2 != 0) hash ^= Hit1DmyPoly2.GetHashCode();
      if (Hit2DmyPoly2 != 0) hash ^= Hit2DmyPoly2.GetHashCode();
      if (Hit3DmyPoly2 != 0) hash ^= Hit3DmyPoly2.GetHashCode();
      if (BlowingCorrection != 0) hash ^= BlowingCorrection.GetHashCode();
      if (AtkPhysCorrection != 0) hash ^= AtkPhysCorrection.GetHashCode();
      if (AtkMagCorrection != 0) hash ^= AtkMagCorrection.GetHashCode();
      if (AtkFireCorrection != 0) hash ^= AtkFireCorrection.GetHashCode();
      if (AtkThunCorrection != 0) hash ^= AtkThunCorrection.GetHashCode();
      if (AtkStamCorrection != 0) hash ^= AtkStamCorrection.GetHashCode();
      if (GuardAtkRateCorrection != 0) hash ^= GuardAtkRateCorrection.GetHashCode();
      if (GuardBreakCorrection != 0) hash ^= GuardBreakCorrection.GetHashCode();
      if (AtkThrowEscapeCorrection != 0) hash ^= AtkThrowEscapeCorrection.GetHashCode();
      if (AtkPhys != 0) hash ^= AtkPhys.GetHashCode();
      if (AtkMag != 0) hash ^= AtkMag.GetHashCode();
      if (AtkFire != 0) hash ^= AtkFire.GetHashCode();
      if (AtkThun != 0) hash ^= AtkThun.GetHashCode();
      if (AtkStam != 0) hash ^= AtkStam.GetHashCode();
      if (GuardAtkRate != 0) hash ^= GuardAtkRate.GetHashCode();
      if (GuardBreakRate != 0) hash ^= GuardBreakRate.GetHashCode();
      if (AtkSuperArmor != 0) hash ^= AtkSuperArmor.GetHashCode();
      if (AtkThrowEscape != 0) hash ^= AtkThrowEscape.GetHashCode();
      if (AtkObj != 0) hash ^= AtkObj.GetHashCode();
      if (GuardStaminaCutRate != 0) hash ^= GuardStaminaCutRate.GetHashCode();
      if (GuardRate != 0) hash ^= GuardRate.GetHashCode();
      if (ThrowTypeId != 0) hash ^= ThrowTypeId.GetHashCode();
      if (Hit0HitType != 0) hash ^= Hit0HitType.GetHashCode();
      if (Hit1HitType != 0) hash ^= Hit1HitType.GetHashCode();
      if (Hit2HitType != 0) hash ^= Hit2HitType.GetHashCode();
      if (Hit3HitType != 0) hash ^= Hit3HitType.GetHashCode();
      if (Hit0Priority != 0) hash ^= Hit0Priority.GetHashCode();
      if (Hit1Priority != 0) hash ^= Hit1Priority.GetHashCode();
      if (Hit2Priority != 0) hash ^= Hit2Priority.GetHashCode();
      if (Hit3Priority != 0) hash ^= Hit3Priority.GetHashCode();
      if (DamageLevel != 0) hash ^= DamageLevel.GetHashCode();
      if (MapHitType != 0) hash ^= MapHitType.GetHashCode();
      if (GuardCutCancelRate != 0) hash ^= GuardCutCancelRate.GetHashCode();
      if (AtkAttribute != 0) hash ^= AtkAttribute.GetHashCode();
      if (SpecialAttributes != 0) hash ^= SpecialAttributes.GetHashCode();
      if (AttackType != 0) hash ^= AttackType.GetHashCode();
      if (AtkMaterial != 0) hash ^= AtkMaterial.GetHashCode();
      if (AtkSize != 0) hash ^= AtkSize.GetHashCode();
      if (DefMaterial != 0) hash ^= DefMaterial.GetHashCode();
      if (DefSfxMaterial != 0) hash ^= DefSfxMaterial.GetHashCode();
      if (HitSourceType != 0) hash ^= HitSourceType.GetHashCode();
      if (ThrowFlag != 0) hash ^= ThrowFlag.GetHashCode();
      if (BitField != 0) hash ^= BitField.GetHashCode();
      if (Unknown0 != 0) hash ^= Unknown0.GetHashCode();
      if (Unknown1 != 0) hash ^= Unknown1.GetHashCode();
      if (Unknown2 != 0) hash ^= Unknown2.GetHashCode();
      if (Unknown3 != 0) hash ^= Unknown3.GetHashCode();
      if (Unknown4 != 0) hash ^= Unknown4.GetHashCode();
      if (Unknown5 != 0) hash ^= Unknown5.GetHashCode();
      if (Unknown6 != 0) hash ^= Unknown6.GetHashCode();
      if (Unknown7 != 0) hash ^= Unknown7.GetHashCode();
      if (Unknown8 != 0) hash ^= Unknown8.GetHashCode();
      if (Unknown9 != 0) hash ^= Unknown9.GetHashCode();
      if (Unknown10 != 0) hash ^= Unknown10.GetHashCode();
      if (Unknown11 != 0) hash ^= Unknown11.GetHashCode();
      if (Unknown12 != 0) hash ^= Unknown12.GetHashCode();
      if (Unknown13 != 0) hash ^= Unknown13.GetHashCode();
      if (Unknown14 != 0) hash ^= Unknown14.GetHashCode();
      if (Unknown15 != 0) hash ^= Unknown15.GetHashCode();
      if (Unknown16 != 0) hash ^= Unknown16.GetHashCode();
      if (Unknown17 != 0) hash ^= Unknown17.GetHashCode();
      if (Unknown18 != 0) hash ^= Unknown18.GetHashCode();
      if (Unknown19 != 0) hash ^= Unknown19.GetHashCode();
      if (Unknown20 != 0) hash ^= Unknown20.GetHashCode();
      if (Unknown21 != 0) hash ^= Unknown21.GetHashCode();
      if (Unknown22 != 0) hash ^= Unknown22.GetHashCode();
      if (Unknown23 != 0) hash ^= Unknown23.GetHashCode();
      if (Unknown24 != 0) hash ^= Unknown24.GetHashCode();
      if (Unknown25 != 0) hash ^= Unknown25.GetHashCode();
      if (Unknown26 != 0) hash ^= Unknown26.GetHashCode();
      if (Unknown27 != 0) hash ^= Unknown27.GetHashCode();
      if (Unknown28 != 0) hash ^= Unknown28.GetHashCode();
      if (Unknown29 != 0) hash ^= Unknown29.GetHashCode();
      if (Unknown30 != 0) hash ^= Unknown30.GetHashCode();
      if (Unknown31 != 0) hash ^= Unknown31.GetHashCode();
      if (Unknown32 != 0) hash ^= Unknown32.GetHashCode();
      if (Unknown33 != 0) hash ^= Unknown33.GetHashCode();
      if (Unknown34 != 0) hash ^= Unknown34.GetHashCode();
      if (Unknown35 != 0) hash ^= Unknown35.GetHashCode();
      if (Unknown36 != 0) hash ^= Unknown36.GetHashCode();
      if (Unknown37 != 0) hash ^= Unknown37.GetHashCode();
      if (Unknown38 != 0) hash ^= Unknown38.GetHashCode();
      if (Unknown39 != 0) hash ^= Unknown39.GetHashCode();
      if (Unknown40 != 0) hash ^= Unknown40.GetHashCode();
      if (Unknown41 != 0) hash ^= Unknown41.GetHashCode();
      if (Unknown42 != 0) hash ^= Unknown42.GetHashCode();
      if (Unknown43 != 0) hash ^= Unknown43.GetHashCode();
      if (Unknown44 != 0) hash ^= Unknown44.GetHashCode();
      if (Unknown45 != 0) hash ^= Unknown45.GetHashCode();
      if (Unknown46 != 0) hash ^= Unknown46.GetHashCode();
      if (Unknown47 != 0) hash ^= Unknown47.GetHashCode();
      if (Unknown48 != 0) hash ^= Unknown48.GetHashCode();
      if (Unknown49 != 0) hash ^= Unknown49.GetHashCode();
      if (Unknown50 != 0) hash ^= Unknown50.GetHashCode();
      if (Unknown51 != 0) hash ^= Unknown51.GetHashCode();
      if (Unknown52 != 0) hash ^= Unknown52.GetHashCode();
      if (Unknown53 != 0) hash ^= Unknown53.GetHashCode();
      if (Unknown54 != 0) hash ^= Unknown54.GetHashCode();
      if (Unknown55 != 0) hash ^= Unknown55.GetHashCode();
      if (Unknown56 != 0) hash ^= Unknown56.GetHashCode();
      if (Unknown57 != 0) hash ^= Unknown57.GetHashCode();
      if (Unknown58 != 0) hash ^= Unknown58.GetHashCode();
      if (Unknown59 != 0) hash ^= Unknown59.GetHashCode();
      if (Unknown60 != 0) hash ^= Unknown60.GetHashCode();
      if (Unknown61 != 0) hash ^= Unknown61.GetHashCode();
      if (Unknown62 != 0) hash ^= Unknown62.GetHashCode();
      if (Unknown63 != 0) hash ^= Unknown63.GetHashCode();
      if (Unknown64 != 0) hash ^= Unknown64.GetHashCode();
      if (Unknown65 != 0) hash ^= Unknown65.GetHashCode();
      if (Unknown66 != 0) hash ^= Unknown66.GetHashCode();
      if (Unknown67 != 0) hash ^= Unknown67.GetHashCode();
      if (Unknown68 != 0) hash ^= Unknown68.GetHashCode();
      if (Unknown69 != 0) hash ^= Unknown69.GetHashCode();
      if (Unknown70 != 0) hash ^= Unknown70.GetHashCode();
      if (Unknown71 != 0) hash ^= Unknown71.GetHashCode();
      if (Unknown72 != 0) hash ^= Unknown72.GetHashCode();
      if (Unknown73 != 0) hash ^= Unknown73.GetHashCode();
      if (Unknown74 != 0) hash ^= Unknown74.GetHashCode();
      if (Unknown75 != 0) hash ^= Unknown75.GetHashCode();
      if (Unknown76 != 0) hash ^= Unknown76.GetHashCode();
      if (Unknown77 != 0) hash ^= Unknown77.GetHashCode();
      if (Unknown78 != 0) hash ^= Unknown78.GetHashCode();
      if (Unknown79 != 0) hash ^= Unknown79.GetHashCode();
      if (Unknown80 != 0) hash ^= Unknown80.GetHashCode();
      if (Unknown81 != 0) hash ^= Unknown81.GetHashCode();
      if (Unknown82 != 0) hash ^= Unknown82.GetHashCode();
      if (Unknown83 != 0) hash ^= Unknown83.GetHashCode();
      if (Unknown84 != 0) hash ^= Unknown84.GetHashCode();
      if (Unknown85 != 0) hash ^= Unknown85.GetHashCode();
      if (Unknown86 != 0) hash ^= Unknown86.GetHashCode();
      if (Unknown87 != 0) hash ^= Unknown87.GetHashCode();
      if (Unknown88 != 0) hash ^= Unknown88.GetHashCode();
      if (Unknown89 != 0) hash ^= Unknown89.GetHashCode();
      if (Unknown90 != 0) hash ^= Unknown90.GetHashCode();
      if (Unknown91 != 0) hash ^= Unknown91.GetHashCode();
      if (Unknown92 != 0) hash ^= Unknown92.GetHashCode();
      if (Unknown93 != 0) hash ^= Unknown93.GetHashCode();
      if (Unknown94 != 0) hash ^= Unknown94.GetHashCode();
      if (Unknown95 != 0) hash ^= Unknown95.GetHashCode();
      if (Unknown96 != 0) hash ^= Unknown96.GetHashCode();
      if (Unknown97 != 0) hash ^= Unknown97.GetHashCode();
      if (Unknown98 != 0) hash ^= Unknown98.GetHashCode();
      if (Unknown99 != 0) hash ^= Unknown99.GetHashCode();
      if (Unknown100 != 0) hash ^= Unknown100.GetHashCode();
      if (Unknown101 != 0) hash ^= Unknown101.GetHashCode();
      if (Unknown102 != 0) hash ^= Unknown102.GetHashCode();
      if (Unknown103 != 0) hash ^= Unknown103.GetHashCode();
      if (Unknown104 != 0) hash ^= Unknown104.GetHashCode();
      if (Unknown105 != 0) hash ^= Unknown105.GetHashCode();
      if (Unknown106 != 0) hash ^= Unknown106.GetHashCode();
      if (Unknown107 != 0) hash ^= Unknown107.GetHashCode();
      if (Unknown108 != 0) hash ^= Unknown108.GetHashCode();
      if (Unknown109 != 0) hash ^= Unknown109.GetHashCode();
      if (Unknown110 != 0) hash ^= Unknown110.GetHashCode();
      if (Unknown111 != 0) hash ^= Unknown111.GetHashCode();
      if (Unknown112 != 0) hash ^= Unknown112.GetHashCode();
      if (Unknown113 != 0) hash ^= Unknown113.GetHashCode();
      if (Unknown114 != 0) hash ^= Unknown114.GetHashCode();
      if (Unknown115 != 0) hash ^= Unknown115.GetHashCode();
      if (Unknown116 != 0) hash ^= Unknown116.GetHashCode();
      if (Unknown117 != 0) hash ^= Unknown117.GetHashCode();
      if (Unknown118 != 0) hash ^= Unknown118.GetHashCode();
      if (Unknown119 != 0) hash ^= Unknown119.GetHashCode();
      if (Unknown120 != 0) hash ^= Unknown120.GetHashCode();
      if (Unknown121 != 0) hash ^= Unknown121.GetHashCode();
      if (Unknown122 != 0) hash ^= Unknown122.GetHashCode();
      if (Unknown123 != 0) hash ^= Unknown123.GetHashCode();
      if (Unknown124 != 0) hash ^= Unknown124.GetHashCode();
      if (Unknown125 != 0) hash ^= Unknown125.GetHashCode();
      if (Unknown126 != 0) hash ^= Unknown126.GetHashCode();
      if (Unknown127 != 0) hash ^= Unknown127.GetHashCode();
      if (Unknown128 != 0) hash ^= Unknown128.GetHashCode();
      if (Unknown129 != 0) hash ^= Unknown129.GetHashCode();
      if (Unknown130 != 0) hash ^= Unknown130.GetHashCode();
      if (Unknown131 != 0) hash ^= Unknown131.GetHashCode();
      if (Unknown132 != 0) hash ^= Unknown132.GetHashCode();
      if (Unknown133 != 0) hash ^= Unknown133.GetHashCode();
      if (Unknown134 != 0) hash ^= Unknown134.GetHashCode();
      if (Unknown135 != 0) hash ^= Unknown135.GetHashCode();
      if (Unknown136 != 0) hash ^= Unknown136.GetHashCode();
      if (Unknown137 != 0) hash ^= Unknown137.GetHashCode();
      if (Unknown138 != 0) hash ^= Unknown138.GetHashCode();
      if (Unknown139 != 0) hash ^= Unknown139.GetHashCode();
      if (Unknown140 != 0) hash ^= Unknown140.GetHashCode();
      if (Unknown141 != 0) hash ^= Unknown141.GetHashCode();
      if (Unknown142 != 0) hash ^= Unknown142.GetHashCode();
      if (Unknown143 != 0) hash ^= Unknown143.GetHashCode();
      if (Unknown144 != 0) hash ^= Unknown144.GetHashCode();
      if (Unknown145 != 0) hash ^= Unknown145.GetHashCode();
      if (Unknown146 != 0) hash ^= Unknown146.GetHashCode();
      if (Unknown147 != 0) hash ^= Unknown147.GetHashCode();
      if (Unknown148 != 0) hash ^= Unknown148.GetHashCode();
      if (Unknown149 != 0) hash ^= Unknown149.GetHashCode();
      if (Unknown150 != 0) hash ^= Unknown150.GetHashCode();
      if (Unknown151 != 0) hash ^= Unknown151.GetHashCode();
      if (Unknown152 != 0) hash ^= Unknown152.GetHashCode();
      if (Unknown153 != 0) hash ^= Unknown153.GetHashCode();
      if (Unknown154 != 0) hash ^= Unknown154.GetHashCode();
      if (Unknown155 != 0) hash ^= Unknown155.GetHashCode();
      if (Unknown156 != 0) hash ^= Unknown156.GetHashCode();
      if (Unknown157 != 0) hash ^= Unknown157.GetHashCode();
      if (Unknown158 != 0) hash ^= Unknown158.GetHashCode();
      if (Unknown159 != 0) hash ^= Unknown159.GetHashCode();
      if (Unknown160 != 0) hash ^= Unknown160.GetHashCode();
      if (Unknown161 != 0) hash ^= Unknown161.GetHashCode();
      if (Unknown162 != 0) hash ^= Unknown162.GetHashCode();
      if (Unknown163 != 0) hash ^= Unknown163.GetHashCode();
      if (Unknown164 != 0) hash ^= Unknown164.GetHashCode();
      if (Unknown165 != 0) hash ^= Unknown165.GetHashCode();
      if (Unknown166 != 0) hash ^= Unknown166.GetHashCode();
      if (Unknown167 != 0) hash ^= Unknown167.GetHashCode();
      if (Unknown168 != 0) hash ^= Unknown168.GetHashCode();
      if (Unknown169 != 0) hash ^= Unknown169.GetHashCode();
      if (Unknown170 != 0) hash ^= Unknown170.GetHashCode();
      if (Unknown171 != 0) hash ^= Unknown171.GetHashCode();
      if (Unknown172 != 0) hash ^= Unknown172.GetHashCode();
      if (Unknown173 != 0) hash ^= Unknown173.GetHashCode();
      if (Unknown174 != 0) hash ^= Unknown174.GetHashCode();
      if (Unknown175 != 0) hash ^= Unknown175.GetHashCode();
      if (Unknown176 != 0) hash ^= Unknown176.GetHashCode();
      if (Unknown177 != 0) hash ^= Unknown177.GetHashCode();
      if (Unknown178 != 0) hash ^= Unknown178.GetHashCode();
      if (Unknown179 != 0) hash ^= Unknown179.GetHashCode();
      if (Unknown180 != 0) hash ^= Unknown180.GetHashCode();
      if (Unknown181 != 0) hash ^= Unknown181.GetHashCode();
      if (Unknown182 != 0) hash ^= Unknown182.GetHashCode();
      if (Unknown183 != 0) hash ^= Unknown183.GetHashCode();
      if (Unknown184 != 0) hash ^= Unknown184.GetHashCode();
      if (Unknown185 != 0) hash ^= Unknown185.GetHashCode();
      if (Unknown186 != 0) hash ^= Unknown186.GetHashCode();
      if (Unknown187 != 0) hash ^= Unknown187.GetHashCode();
      if (Unknown188 != 0) hash ^= Unknown188.GetHashCode();
      if (Unknown189 != 0) hash ^= Unknown189.GetHashCode();
      if (Unknown190 != 0) hash ^= Unknown190.GetHashCode();
      if (Unknown191 != 0) hash ^= Unknown191.GetHashCode();
      if (Unknown192 != 0) hash ^= Unknown192.GetHashCode();
      if (Unknown193 != 0) hash ^= Unknown193.GetHashCode();
      if (Unknown194 != 0) hash ^= Unknown194.GetHashCode();
      if (Unknown195 != 0) hash ^= Unknown195.GetHashCode();
      if (Unknown196 != 0) hash ^= Unknown196.GetHashCode();
      if (Unknown197 != 0) hash ^= Unknown197.GetHashCode();
      if (Unknown198 != 0) hash ^= Unknown198.GetHashCode();
      if (Unknown199 != 0) hash ^= Unknown199.GetHashCode();
      if (Unknown200 != 0) hash ^= Unknown200.GetHashCode();
      if (Unknown201 != 0) hash ^= Unknown201.GetHashCode();
      if (Unknown202 != 0) hash ^= Unknown202.GetHashCode();
      if (Unknown203 != 0) hash ^= Unknown203.GetHashCode();
      if (Unknown204 != 0) hash ^= Unknown204.GetHashCode();
      if (Unknown205 != 0) hash ^= Unknown205.GetHashCode();
      if (Unknown206 != 0) hash ^= Unknown206.GetHashCode();
      if (Unknown207 != 0) hash ^= Unknown207.GetHashCode();
      if (Unknown208 != 0) hash ^= Unknown208.GetHashCode();
      if (Unknown209 != 0) hash ^= Unknown209.GetHashCode();
      if (Unknown210 != 0) hash ^= Unknown210.GetHashCode();
      if (Unknown211 != 0) hash ^= Unknown211.GetHashCode();
      if (Unknown212 != 0) hash ^= Unknown212.GetHashCode();
      if (Unknown213 != 0) hash ^= Unknown213.GetHashCode();
      if (Unknown214 != 0) hash ^= Unknown214.GetHashCode();
      if (Unknown215 != 0) hash ^= Unknown215.GetHashCode();
      if (Unknown216 != 0) hash ^= Unknown216.GetHashCode();
      if (Unknown217 != 0) hash ^= Unknown217.GetHashCode();
      if (Unknown218 != 0) hash ^= Unknown218.GetHashCode();
      if (Unknown219 != 0) hash ^= Unknown219.GetHashCode();
      if (Unknown220 != 0) hash ^= Unknown220.GetHashCode();
      if (Unknown221 != 0) hash ^= Unknown221.GetHashCode();
      if (Unknown222 != 0) hash ^= Unknown222.GetHashCode();
      if (Unknown223 != 0) hash ^= Unknown223.GetHashCode();
      if (Unknown224 != 0) hash ^= Unknown224.GetHashCode();
      if (Unknown225 != 0) hash ^= Unknown225.GetHashCode();
      if (Unknown226 != 0) hash ^= Unknown226.GetHashCode();
      if (Unknown227 != 0) hash ^= Unknown227.GetHashCode();
      if (Unknown228 != 0) hash ^= Unknown228.GetHashCode();
      if (Unknown229 != 0) hash ^= Unknown229.GetHashCode();
      if (Unknown230 != 0) hash ^= Unknown230.GetHashCode();
      if (Unknown231 != 0) hash ^= Unknown231.GetHashCode();
      if (Unknown232 != 0) hash ^= Unknown232.GetHashCode();
      if (Unknown233 != 0) hash ^= Unknown233.GetHashCode();
      if (Unknown234 != 0) hash ^= Unknown234.GetHashCode();
      if (Unknown235 != 0) hash ^= Unknown235.GetHashCode();
      if (Unknown236 != 0) hash ^= Unknown236.GetHashCode();
      if (Unknown237 != 0) hash ^= Unknown237.GetHashCode();
      if (Unknown238 != 0) hash ^= Unknown238.GetHashCode();
      if (Unknown239 != 0) hash ^= Unknown239.GetHashCode();
      if (Unknown240 != 0) hash ^= Unknown240.GetHashCode();
      if (Unknown241 != 0) hash ^= Unknown241.GetHashCode();
      if (Unknown242 != 0) hash ^= Unknown242.GetHashCode();
      if (Unknown243 != 0) hash ^= Unknown243.GetHashCode();
      if (Unknown244 != 0) hash ^= Unknown244.GetHashCode();
      if (Unknown245 != 0) hash ^= Unknown245.GetHashCode();
      if (Unknown246 != 0) hash ^= Unknown246.GetHashCode();
      if (Unknown247 != 0) hash ^= Unknown247.GetHashCode();
      if (Unknown248 != 0) hash ^= Unknown248.GetHashCode();
      if (Unknown249 != 0) hash ^= Unknown249.GetHashCode();
      if (Unknown250 != 0) hash ^= Unknown250.GetHashCode();
      if (Unknown251 != 0) hash ^= Unknown251.GetHashCode();
      if (Unknown252 != 0) hash ^= Unknown252.GetHashCode();
      if (Unknown253 != 0) hash ^= Unknown253.GetHashCode();
      if (Unknown254 != 0) hash ^= Unknown254.GetHashCode();
      if (Unknown255 != 0) hash ^= Unknown255.GetHashCode();
      if (Unknown256 != 0) hash ^= Unknown256.GetHashCode();
      if (Unknown257 != 0) hash ^= Unknown257.GetHashCode();
      if (Unknown258 != 0) hash ^= Unknown258.GetHashCode();
      if (Unknown259 != 0) hash ^= Unknown259.GetHashCode();
      if (Unknown260 != 0) hash ^= Unknown260.GetHashCode();
      if (Unknown261 != 0) hash ^= Unknown261.GetHashCode();
      if (Unknown262 != 0) hash ^= Unknown262.GetHashCode();
      if (Unknown263 != 0) hash ^= Unknown263.GetHashCode();
      if (Unknown264 != 0) hash ^= Unknown264.GetHashCode();
      if (AtkDarkCorrection != 0) hash ^= AtkDarkCorrection.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Index);
      }
      if (Offset != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Offset);
      }
      if (Hit0Radius != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Hit0Radius);
      }
      if (Hit1Radius != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Hit1Radius);
      }
      if (Hit2Radius != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Hit2Radius);
      }
      if (Hit3Radius != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Hit3Radius);
      }
      if (KnockbackDist != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(KnockbackDist);
      }
      if (HitStopTime != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(HitStopTime);
      }
      if (SpEffectId0 != 0) {
        output.WriteRawTag(88);
        output.WriteSInt32(SpEffectId0);
      }
      if (SpEffectId1 != 0) {
        output.WriteRawTag(96);
        output.WriteSInt32(SpEffectId1);
      }
      if (SpEffectId2 != 0) {
        output.WriteRawTag(104);
        output.WriteSInt32(SpEffectId2);
      }
      if (SpEffectId3 != 0) {
        output.WriteRawTag(112);
        output.WriteSInt32(SpEffectId3);
      }
      if (SpEffectId4 != 0) {
        output.WriteRawTag(120);
        output.WriteSInt32(SpEffectId4);
      }
      if (Hit0DmyPoly1 != 0) {
        output.WriteRawTag(128, 1);
        output.WriteSInt32(Hit0DmyPoly1);
      }
      if (Hit1DmyPoly1 != 0) {
        output.WriteRawTag(136, 1);
        output.WriteSInt32(Hit1DmyPoly1);
      }
      if (Hit2DmyPoly1 != 0) {
        output.WriteRawTag(144, 1);
        output.WriteSInt32(Hit2DmyPoly1);
      }
      if (Hit3DmyPoly1 != 0) {
        output.WriteRawTag(152, 1);
        output.WriteSInt32(Hit3DmyPoly1);
      }
      if (Hit0DmyPoly2 != 0) {
        output.WriteRawTag(160, 1);
        output.WriteSInt32(Hit0DmyPoly2);
      }
      if (Hit1DmyPoly2 != 0) {
        output.WriteRawTag(168, 1);
        output.WriteSInt32(Hit1DmyPoly2);
      }
      if (Hit2DmyPoly2 != 0) {
        output.WriteRawTag(176, 1);
        output.WriteSInt32(Hit2DmyPoly2);
      }
      if (Hit3DmyPoly2 != 0) {
        output.WriteRawTag(184, 1);
        output.WriteSInt32(Hit3DmyPoly2);
      }
      if (BlowingCorrection != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(BlowingCorrection);
      }
      if (AtkPhysCorrection != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(AtkPhysCorrection);
      }
      if (AtkMagCorrection != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(AtkMagCorrection);
      }
      if (AtkFireCorrection != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(AtkFireCorrection);
      }
      if (AtkThunCorrection != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(AtkThunCorrection);
      }
      if (AtkStamCorrection != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(AtkStamCorrection);
      }
      if (GuardAtkRateCorrection != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(GuardAtkRateCorrection);
      }
      if (GuardBreakCorrection != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(GuardBreakCorrection);
      }
      if (AtkThrowEscapeCorrection != 0) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(AtkThrowEscapeCorrection);
      }
      if (AtkPhys != 0) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(AtkPhys);
      }
      if (AtkMag != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(AtkMag);
      }
      if (AtkFire != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(AtkFire);
      }
      if (AtkThun != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(AtkThun);
      }
      if (AtkStam != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(AtkStam);
      }
      if (GuardAtkRate != 0) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(GuardAtkRate);
      }
      if (GuardBreakRate != 0) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(GuardBreakRate);
      }
      if (AtkSuperArmor != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(AtkSuperArmor);
      }
      if (AtkThrowEscape != 0) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(AtkThrowEscape);
      }
      if (AtkObj != 0) {
        output.WriteRawTag(208, 2);
        output.WriteUInt32(AtkObj);
      }
      if (GuardStaminaCutRate != 0) {
        output.WriteRawTag(216, 2);
        output.WriteSInt32(GuardStaminaCutRate);
      }
      if (GuardRate != 0) {
        output.WriteRawTag(224, 2);
        output.WriteSInt32(GuardRate);
      }
      if (ThrowTypeId != 0) {
        output.WriteRawTag(232, 2);
        output.WriteSInt32(ThrowTypeId);
      }
      if (Hit0HitType != 0) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(Hit0HitType);
      }
      if (Hit1HitType != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(Hit1HitType);
      }
      if (Hit2HitType != 0) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(Hit2HitType);
      }
      if (Hit3HitType != 0) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(Hit3HitType);
      }
      if (Hit0Priority != 0) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(Hit0Priority);
      }
      if (Hit1Priority != 0) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(Hit1Priority);
      }
      if (Hit2Priority != 0) {
        output.WriteRawTag(160, 3);
        output.WriteUInt32(Hit2Priority);
      }
      if (Hit3Priority != 0) {
        output.WriteRawTag(168, 3);
        output.WriteUInt32(Hit3Priority);
      }
      if (DamageLevel != 0) {
        output.WriteRawTag(176, 3);
        output.WriteUInt32(DamageLevel);
      }
      if (MapHitType != 0) {
        output.WriteRawTag(184, 3);
        output.WriteUInt32(MapHitType);
      }
      if (GuardCutCancelRate != 0) {
        output.WriteRawTag(192, 3);
        output.WriteSInt32(GuardCutCancelRate);
      }
      if (AtkAttribute != 0) {
        output.WriteRawTag(200, 3);
        output.WriteUInt32(AtkAttribute);
      }
      if (SpecialAttributes != 0) {
        output.WriteRawTag(208, 3);
        output.WriteUInt32(SpecialAttributes);
      }
      if (AttackType != 0) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(AttackType);
      }
      if (AtkMaterial != 0) {
        output.WriteRawTag(224, 3);
        output.WriteUInt32(AtkMaterial);
      }
      if (AtkSize != 0) {
        output.WriteRawTag(232, 3);
        output.WriteUInt32(AtkSize);
      }
      if (DefMaterial != 0) {
        output.WriteRawTag(240, 3);
        output.WriteUInt32(DefMaterial);
      }
      if (DefSfxMaterial != 0) {
        output.WriteRawTag(248, 3);
        output.WriteUInt32(DefSfxMaterial);
      }
      if (HitSourceType != 0) {
        output.WriteRawTag(128, 4);
        output.WriteUInt32(HitSourceType);
      }
      if (ThrowFlag != 0) {
        output.WriteRawTag(136, 4);
        output.WriteUInt32(ThrowFlag);
      }
      if (BitField != 0) {
        output.WriteRawTag(144, 4);
        output.WriteUInt32(BitField);
      }
      if (Unknown0 != 0) {
        output.WriteRawTag(152, 4);
        output.WriteUInt32(Unknown0);
      }
      if (Unknown1 != 0) {
        output.WriteRawTag(160, 4);
        output.WriteUInt32(Unknown1);
      }
      if (Unknown2 != 0) {
        output.WriteRawTag(168, 4);
        output.WriteUInt32(Unknown2);
      }
      if (Unknown3 != 0) {
        output.WriteRawTag(176, 4);
        output.WriteUInt32(Unknown3);
      }
      if (Unknown4 != 0) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(Unknown4);
      }
      if (Unknown5 != 0) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(Unknown5);
      }
      if (Unknown6 != 0) {
        output.WriteRawTag(200, 4);
        output.WriteUInt32(Unknown6);
      }
      if (Unknown7 != 0) {
        output.WriteRawTag(208, 4);
        output.WriteUInt32(Unknown7);
      }
      if (Unknown8 != 0) {
        output.WriteRawTag(216, 4);
        output.WriteUInt32(Unknown8);
      }
      if (Unknown9 != 0) {
        output.WriteRawTag(224, 4);
        output.WriteUInt32(Unknown9);
      }
      if (Unknown10 != 0) {
        output.WriteRawTag(232, 4);
        output.WriteUInt32(Unknown10);
      }
      if (Unknown11 != 0) {
        output.WriteRawTag(240, 4);
        output.WriteUInt32(Unknown11);
      }
      if (Unknown12 != 0) {
        output.WriteRawTag(248, 4);
        output.WriteUInt32(Unknown12);
      }
      if (Unknown13 != 0) {
        output.WriteRawTag(128, 5);
        output.WriteUInt32(Unknown13);
      }
      if (Unknown14 != 0) {
        output.WriteRawTag(136, 5);
        output.WriteUInt32(Unknown14);
      }
      if (Unknown15 != 0) {
        output.WriteRawTag(144, 5);
        output.WriteUInt32(Unknown15);
      }
      if (Unknown16 != 0) {
        output.WriteRawTag(152, 5);
        output.WriteUInt32(Unknown16);
      }
      if (Unknown17 != 0) {
        output.WriteRawTag(160, 5);
        output.WriteUInt32(Unknown17);
      }
      if (Unknown18 != 0) {
        output.WriteRawTag(168, 5);
        output.WriteUInt32(Unknown18);
      }
      if (Unknown19 != 0) {
        output.WriteRawTag(176, 5);
        output.WriteUInt32(Unknown19);
      }
      if (Unknown20 != 0) {
        output.WriteRawTag(184, 5);
        output.WriteUInt32(Unknown20);
      }
      if (Unknown21 != 0) {
        output.WriteRawTag(192, 5);
        output.WriteUInt32(Unknown21);
      }
      if (Unknown22 != 0) {
        output.WriteRawTag(200, 5);
        output.WriteUInt32(Unknown22);
      }
      if (Unknown23 != 0) {
        output.WriteRawTag(208, 5);
        output.WriteUInt32(Unknown23);
      }
      if (Unknown24 != 0) {
        output.WriteRawTag(216, 5);
        output.WriteUInt32(Unknown24);
      }
      if (Unknown25 != 0) {
        output.WriteRawTag(224, 5);
        output.WriteUInt32(Unknown25);
      }
      if (Unknown26 != 0) {
        output.WriteRawTag(232, 5);
        output.WriteUInt32(Unknown26);
      }
      if (Unknown27 != 0) {
        output.WriteRawTag(240, 5);
        output.WriteUInt32(Unknown27);
      }
      if (Unknown28 != 0) {
        output.WriteRawTag(248, 5);
        output.WriteUInt32(Unknown28);
      }
      if (Unknown29 != 0) {
        output.WriteRawTag(128, 6);
        output.WriteUInt32(Unknown29);
      }
      if (Unknown30 != 0) {
        output.WriteRawTag(136, 6);
        output.WriteUInt32(Unknown30);
      }
      if (Unknown31 != 0) {
        output.WriteRawTag(144, 6);
        output.WriteUInt32(Unknown31);
      }
      if (Unknown32 != 0) {
        output.WriteRawTag(152, 6);
        output.WriteUInt32(Unknown32);
      }
      if (Unknown33 != 0) {
        output.WriteRawTag(160, 6);
        output.WriteUInt32(Unknown33);
      }
      if (Unknown34 != 0) {
        output.WriteRawTag(168, 6);
        output.WriteUInt32(Unknown34);
      }
      if (Unknown35 != 0) {
        output.WriteRawTag(176, 6);
        output.WriteUInt32(Unknown35);
      }
      if (Unknown36 != 0) {
        output.WriteRawTag(184, 6);
        output.WriteUInt32(Unknown36);
      }
      if (Unknown37 != 0) {
        output.WriteRawTag(192, 6);
        output.WriteUInt32(Unknown37);
      }
      if (Unknown38 != 0) {
        output.WriteRawTag(200, 6);
        output.WriteUInt32(Unknown38);
      }
      if (Unknown39 != 0) {
        output.WriteRawTag(208, 6);
        output.WriteUInt32(Unknown39);
      }
      if (Unknown40 != 0) {
        output.WriteRawTag(216, 6);
        output.WriteUInt32(Unknown40);
      }
      if (Unknown41 != 0) {
        output.WriteRawTag(224, 6);
        output.WriteUInt32(Unknown41);
      }
      if (Unknown42 != 0) {
        output.WriteRawTag(232, 6);
        output.WriteUInt32(Unknown42);
      }
      if (Unknown43 != 0) {
        output.WriteRawTag(240, 6);
        output.WriteUInt32(Unknown43);
      }
      if (Unknown44 != 0) {
        output.WriteRawTag(248, 6);
        output.WriteUInt32(Unknown44);
      }
      if (Unknown45 != 0) {
        output.WriteRawTag(128, 7);
        output.WriteUInt32(Unknown45);
      }
      if (Unknown46 != 0) {
        output.WriteRawTag(136, 7);
        output.WriteUInt32(Unknown46);
      }
      if (Unknown47 != 0) {
        output.WriteRawTag(144, 7);
        output.WriteUInt32(Unknown47);
      }
      if (Unknown48 != 0) {
        output.WriteRawTag(152, 7);
        output.WriteUInt32(Unknown48);
      }
      if (Unknown49 != 0) {
        output.WriteRawTag(160, 7);
        output.WriteUInt32(Unknown49);
      }
      if (Unknown50 != 0) {
        output.WriteRawTag(168, 7);
        output.WriteUInt32(Unknown50);
      }
      if (Unknown51 != 0) {
        output.WriteRawTag(176, 7);
        output.WriteUInt32(Unknown51);
      }
      if (Unknown52 != 0) {
        output.WriteRawTag(184, 7);
        output.WriteUInt32(Unknown52);
      }
      if (Unknown53 != 0) {
        output.WriteRawTag(192, 7);
        output.WriteUInt32(Unknown53);
      }
      if (Unknown54 != 0) {
        output.WriteRawTag(200, 7);
        output.WriteUInt32(Unknown54);
      }
      if (Unknown55 != 0) {
        output.WriteRawTag(208, 7);
        output.WriteUInt32(Unknown55);
      }
      if (Unknown56 != 0) {
        output.WriteRawTag(216, 7);
        output.WriteUInt32(Unknown56);
      }
      if (Unknown57 != 0) {
        output.WriteRawTag(224, 7);
        output.WriteUInt32(Unknown57);
      }
      if (Unknown58 != 0) {
        output.WriteRawTag(232, 7);
        output.WriteUInt32(Unknown58);
      }
      if (Unknown59 != 0) {
        output.WriteRawTag(240, 7);
        output.WriteUInt32(Unknown59);
      }
      if (Unknown60 != 0) {
        output.WriteRawTag(248, 7);
        output.WriteUInt32(Unknown60);
      }
      if (Unknown61 != 0) {
        output.WriteRawTag(128, 8);
        output.WriteUInt32(Unknown61);
      }
      if (Unknown62 != 0) {
        output.WriteRawTag(136, 8);
        output.WriteUInt32(Unknown62);
      }
      if (Unknown63 != 0) {
        output.WriteRawTag(144, 8);
        output.WriteUInt32(Unknown63);
      }
      if (Unknown64 != 0) {
        output.WriteRawTag(152, 8);
        output.WriteUInt32(Unknown64);
      }
      if (Unknown65 != 0) {
        output.WriteRawTag(160, 8);
        output.WriteUInt32(Unknown65);
      }
      if (Unknown66 != 0) {
        output.WriteRawTag(168, 8);
        output.WriteUInt32(Unknown66);
      }
      if (Unknown67 != 0) {
        output.WriteRawTag(176, 8);
        output.WriteUInt32(Unknown67);
      }
      if (Unknown68 != 0) {
        output.WriteRawTag(184, 8);
        output.WriteUInt32(Unknown68);
      }
      if (Unknown69 != 0) {
        output.WriteRawTag(192, 8);
        output.WriteUInt32(Unknown69);
      }
      if (Unknown70 != 0) {
        output.WriteRawTag(200, 8);
        output.WriteUInt32(Unknown70);
      }
      if (Unknown71 != 0) {
        output.WriteRawTag(208, 8);
        output.WriteUInt32(Unknown71);
      }
      if (Unknown72 != 0) {
        output.WriteRawTag(216, 8);
        output.WriteUInt32(Unknown72);
      }
      if (Unknown73 != 0) {
        output.WriteRawTag(224, 8);
        output.WriteUInt32(Unknown73);
      }
      if (Unknown74 != 0) {
        output.WriteRawTag(232, 8);
        output.WriteUInt32(Unknown74);
      }
      if (Unknown75 != 0) {
        output.WriteRawTag(240, 8);
        output.WriteUInt32(Unknown75);
      }
      if (Unknown76 != 0) {
        output.WriteRawTag(248, 8);
        output.WriteUInt32(Unknown76);
      }
      if (Unknown77 != 0) {
        output.WriteRawTag(128, 9);
        output.WriteUInt32(Unknown77);
      }
      if (Unknown78 != 0) {
        output.WriteRawTag(136, 9);
        output.WriteUInt32(Unknown78);
      }
      if (Unknown79 != 0) {
        output.WriteRawTag(144, 9);
        output.WriteUInt32(Unknown79);
      }
      if (Unknown80 != 0) {
        output.WriteRawTag(152, 9);
        output.WriteUInt32(Unknown80);
      }
      if (Unknown81 != 0) {
        output.WriteRawTag(160, 9);
        output.WriteUInt32(Unknown81);
      }
      if (Unknown82 != 0) {
        output.WriteRawTag(168, 9);
        output.WriteUInt32(Unknown82);
      }
      if (Unknown83 != 0) {
        output.WriteRawTag(176, 9);
        output.WriteUInt32(Unknown83);
      }
      if (Unknown84 != 0) {
        output.WriteRawTag(184, 9);
        output.WriteUInt32(Unknown84);
      }
      if (Unknown85 != 0) {
        output.WriteRawTag(192, 9);
        output.WriteUInt32(Unknown85);
      }
      if (Unknown86 != 0) {
        output.WriteRawTag(200, 9);
        output.WriteUInt32(Unknown86);
      }
      if (Unknown87 != 0) {
        output.WriteRawTag(208, 9);
        output.WriteUInt32(Unknown87);
      }
      if (Unknown88 != 0) {
        output.WriteRawTag(216, 9);
        output.WriteUInt32(Unknown88);
      }
      if (Unknown89 != 0) {
        output.WriteRawTag(224, 9);
        output.WriteUInt32(Unknown89);
      }
      if (Unknown90 != 0) {
        output.WriteRawTag(232, 9);
        output.WriteUInt32(Unknown90);
      }
      if (Unknown91 != 0) {
        output.WriteRawTag(240, 9);
        output.WriteUInt32(Unknown91);
      }
      if (Unknown92 != 0) {
        output.WriteRawTag(248, 9);
        output.WriteUInt32(Unknown92);
      }
      if (Unknown93 != 0) {
        output.WriteRawTag(128, 10);
        output.WriteUInt32(Unknown93);
      }
      if (Unknown94 != 0) {
        output.WriteRawTag(136, 10);
        output.WriteUInt32(Unknown94);
      }
      if (Unknown95 != 0) {
        output.WriteRawTag(144, 10);
        output.WriteUInt32(Unknown95);
      }
      if (Unknown96 != 0) {
        output.WriteRawTag(152, 10);
        output.WriteUInt32(Unknown96);
      }
      if (Unknown97 != 0) {
        output.WriteRawTag(160, 10);
        output.WriteUInt32(Unknown97);
      }
      if (Unknown98 != 0) {
        output.WriteRawTag(168, 10);
        output.WriteUInt32(Unknown98);
      }
      if (Unknown99 != 0) {
        output.WriteRawTag(176, 10);
        output.WriteUInt32(Unknown99);
      }
      if (Unknown100 != 0) {
        output.WriteRawTag(184, 10);
        output.WriteUInt32(Unknown100);
      }
      if (Unknown101 != 0) {
        output.WriteRawTag(192, 10);
        output.WriteUInt32(Unknown101);
      }
      if (Unknown102 != 0) {
        output.WriteRawTag(200, 10);
        output.WriteUInt32(Unknown102);
      }
      if (Unknown103 != 0) {
        output.WriteRawTag(208, 10);
        output.WriteUInt32(Unknown103);
      }
      if (Unknown104 != 0) {
        output.WriteRawTag(216, 10);
        output.WriteUInt32(Unknown104);
      }
      if (Unknown105 != 0) {
        output.WriteRawTag(224, 10);
        output.WriteUInt32(Unknown105);
      }
      if (Unknown106 != 0) {
        output.WriteRawTag(232, 10);
        output.WriteUInt32(Unknown106);
      }
      if (Unknown107 != 0) {
        output.WriteRawTag(240, 10);
        output.WriteUInt32(Unknown107);
      }
      if (Unknown108 != 0) {
        output.WriteRawTag(248, 10);
        output.WriteUInt32(Unknown108);
      }
      if (Unknown109 != 0) {
        output.WriteRawTag(128, 11);
        output.WriteUInt32(Unknown109);
      }
      if (Unknown110 != 0) {
        output.WriteRawTag(136, 11);
        output.WriteUInt32(Unknown110);
      }
      if (Unknown111 != 0) {
        output.WriteRawTag(144, 11);
        output.WriteUInt32(Unknown111);
      }
      if (Unknown112 != 0) {
        output.WriteRawTag(152, 11);
        output.WriteUInt32(Unknown112);
      }
      if (Unknown113 != 0) {
        output.WriteRawTag(160, 11);
        output.WriteUInt32(Unknown113);
      }
      if (Unknown114 != 0) {
        output.WriteRawTag(168, 11);
        output.WriteUInt32(Unknown114);
      }
      if (Unknown115 != 0) {
        output.WriteRawTag(176, 11);
        output.WriteUInt32(Unknown115);
      }
      if (Unknown116 != 0) {
        output.WriteRawTag(184, 11);
        output.WriteUInt32(Unknown116);
      }
      if (Unknown117 != 0) {
        output.WriteRawTag(192, 11);
        output.WriteUInt32(Unknown117);
      }
      if (Unknown118 != 0) {
        output.WriteRawTag(200, 11);
        output.WriteUInt32(Unknown118);
      }
      if (Unknown119 != 0) {
        output.WriteRawTag(208, 11);
        output.WriteUInt32(Unknown119);
      }
      if (Unknown120 != 0) {
        output.WriteRawTag(216, 11);
        output.WriteUInt32(Unknown120);
      }
      if (Unknown121 != 0) {
        output.WriteRawTag(224, 11);
        output.WriteUInt32(Unknown121);
      }
      if (Unknown122 != 0) {
        output.WriteRawTag(232, 11);
        output.WriteUInt32(Unknown122);
      }
      if (Unknown123 != 0) {
        output.WriteRawTag(240, 11);
        output.WriteUInt32(Unknown123);
      }
      if (Unknown124 != 0) {
        output.WriteRawTag(248, 11);
        output.WriteUInt32(Unknown124);
      }
      if (Unknown125 != 0) {
        output.WriteRawTag(128, 12);
        output.WriteUInt32(Unknown125);
      }
      if (Unknown126 != 0) {
        output.WriteRawTag(136, 12);
        output.WriteUInt32(Unknown126);
      }
      if (Unknown127 != 0) {
        output.WriteRawTag(144, 12);
        output.WriteUInt32(Unknown127);
      }
      if (Unknown128 != 0) {
        output.WriteRawTag(152, 12);
        output.WriteUInt32(Unknown128);
      }
      if (Unknown129 != 0) {
        output.WriteRawTag(160, 12);
        output.WriteUInt32(Unknown129);
      }
      if (Unknown130 != 0) {
        output.WriteRawTag(168, 12);
        output.WriteUInt32(Unknown130);
      }
      if (Unknown131 != 0) {
        output.WriteRawTag(176, 12);
        output.WriteUInt32(Unknown131);
      }
      if (Unknown132 != 0) {
        output.WriteRawTag(184, 12);
        output.WriteUInt32(Unknown132);
      }
      if (Unknown133 != 0) {
        output.WriteRawTag(192, 12);
        output.WriteUInt32(Unknown133);
      }
      if (Unknown134 != 0) {
        output.WriteRawTag(200, 12);
        output.WriteUInt32(Unknown134);
      }
      if (Unknown135 != 0) {
        output.WriteRawTag(208, 12);
        output.WriteUInt32(Unknown135);
      }
      if (Unknown136 != 0) {
        output.WriteRawTag(216, 12);
        output.WriteUInt32(Unknown136);
      }
      if (Unknown137 != 0) {
        output.WriteRawTag(224, 12);
        output.WriteUInt32(Unknown137);
      }
      if (Unknown138 != 0) {
        output.WriteRawTag(232, 12);
        output.WriteUInt32(Unknown138);
      }
      if (Unknown139 != 0) {
        output.WriteRawTag(240, 12);
        output.WriteUInt32(Unknown139);
      }
      if (Unknown140 != 0) {
        output.WriteRawTag(248, 12);
        output.WriteUInt32(Unknown140);
      }
      if (Unknown141 != 0) {
        output.WriteRawTag(128, 13);
        output.WriteUInt32(Unknown141);
      }
      if (Unknown142 != 0) {
        output.WriteRawTag(136, 13);
        output.WriteUInt32(Unknown142);
      }
      if (Unknown143 != 0) {
        output.WriteRawTag(144, 13);
        output.WriteUInt32(Unknown143);
      }
      if (Unknown144 != 0) {
        output.WriteRawTag(152, 13);
        output.WriteUInt32(Unknown144);
      }
      if (Unknown145 != 0) {
        output.WriteRawTag(160, 13);
        output.WriteUInt32(Unknown145);
      }
      if (Unknown146 != 0) {
        output.WriteRawTag(168, 13);
        output.WriteUInt32(Unknown146);
      }
      if (Unknown147 != 0) {
        output.WriteRawTag(176, 13);
        output.WriteUInt32(Unknown147);
      }
      if (Unknown148 != 0) {
        output.WriteRawTag(184, 13);
        output.WriteUInt32(Unknown148);
      }
      if (Unknown149 != 0) {
        output.WriteRawTag(192, 13);
        output.WriteUInt32(Unknown149);
      }
      if (Unknown150 != 0) {
        output.WriteRawTag(200, 13);
        output.WriteUInt32(Unknown150);
      }
      if (Unknown151 != 0) {
        output.WriteRawTag(208, 13);
        output.WriteUInt32(Unknown151);
      }
      if (Unknown152 != 0) {
        output.WriteRawTag(216, 13);
        output.WriteUInt32(Unknown152);
      }
      if (Unknown153 != 0) {
        output.WriteRawTag(224, 13);
        output.WriteUInt32(Unknown153);
      }
      if (Unknown154 != 0) {
        output.WriteRawTag(232, 13);
        output.WriteUInt32(Unknown154);
      }
      if (Unknown155 != 0) {
        output.WriteRawTag(240, 13);
        output.WriteUInt32(Unknown155);
      }
      if (Unknown156 != 0) {
        output.WriteRawTag(248, 13);
        output.WriteUInt32(Unknown156);
      }
      if (Unknown157 != 0) {
        output.WriteRawTag(128, 14);
        output.WriteUInt32(Unknown157);
      }
      if (Unknown158 != 0) {
        output.WriteRawTag(136, 14);
        output.WriteUInt32(Unknown158);
      }
      if (Unknown159 != 0) {
        output.WriteRawTag(144, 14);
        output.WriteUInt32(Unknown159);
      }
      if (Unknown160 != 0) {
        output.WriteRawTag(152, 14);
        output.WriteUInt32(Unknown160);
      }
      if (Unknown161 != 0) {
        output.WriteRawTag(160, 14);
        output.WriteUInt32(Unknown161);
      }
      if (Unknown162 != 0) {
        output.WriteRawTag(168, 14);
        output.WriteUInt32(Unknown162);
      }
      if (Unknown163 != 0) {
        output.WriteRawTag(176, 14);
        output.WriteUInt32(Unknown163);
      }
      if (Unknown164 != 0) {
        output.WriteRawTag(184, 14);
        output.WriteUInt32(Unknown164);
      }
      if (Unknown165 != 0) {
        output.WriteRawTag(192, 14);
        output.WriteUInt32(Unknown165);
      }
      if (Unknown166 != 0) {
        output.WriteRawTag(200, 14);
        output.WriteUInt32(Unknown166);
      }
      if (Unknown167 != 0) {
        output.WriteRawTag(208, 14);
        output.WriteUInt32(Unknown167);
      }
      if (Unknown168 != 0) {
        output.WriteRawTag(216, 14);
        output.WriteUInt32(Unknown168);
      }
      if (Unknown169 != 0) {
        output.WriteRawTag(224, 14);
        output.WriteUInt32(Unknown169);
      }
      if (Unknown170 != 0) {
        output.WriteRawTag(232, 14);
        output.WriteUInt32(Unknown170);
      }
      if (Unknown171 != 0) {
        output.WriteRawTag(240, 14);
        output.WriteUInt32(Unknown171);
      }
      if (Unknown172 != 0) {
        output.WriteRawTag(248, 14);
        output.WriteUInt32(Unknown172);
      }
      if (Unknown173 != 0) {
        output.WriteRawTag(128, 15);
        output.WriteUInt32(Unknown173);
      }
      if (Unknown174 != 0) {
        output.WriteRawTag(136, 15);
        output.WriteUInt32(Unknown174);
      }
      if (Unknown175 != 0) {
        output.WriteRawTag(144, 15);
        output.WriteUInt32(Unknown175);
      }
      if (Unknown176 != 0) {
        output.WriteRawTag(152, 15);
        output.WriteUInt32(Unknown176);
      }
      if (Unknown177 != 0) {
        output.WriteRawTag(160, 15);
        output.WriteUInt32(Unknown177);
      }
      if (Unknown178 != 0) {
        output.WriteRawTag(168, 15);
        output.WriteUInt32(Unknown178);
      }
      if (Unknown179 != 0) {
        output.WriteRawTag(176, 15);
        output.WriteUInt32(Unknown179);
      }
      if (Unknown180 != 0) {
        output.WriteRawTag(184, 15);
        output.WriteUInt32(Unknown180);
      }
      if (Unknown181 != 0) {
        output.WriteRawTag(192, 15);
        output.WriteUInt32(Unknown181);
      }
      if (Unknown182 != 0) {
        output.WriteRawTag(200, 15);
        output.WriteUInt32(Unknown182);
      }
      if (Unknown183 != 0) {
        output.WriteRawTag(208, 15);
        output.WriteUInt32(Unknown183);
      }
      if (Unknown184 != 0) {
        output.WriteRawTag(216, 15);
        output.WriteUInt32(Unknown184);
      }
      if (Unknown185 != 0) {
        output.WriteRawTag(224, 15);
        output.WriteUInt32(Unknown185);
      }
      if (Unknown186 != 0) {
        output.WriteRawTag(232, 15);
        output.WriteUInt32(Unknown186);
      }
      if (Unknown187 != 0) {
        output.WriteRawTag(240, 15);
        output.WriteUInt32(Unknown187);
      }
      if (Unknown188 != 0) {
        output.WriteRawTag(248, 15);
        output.WriteUInt32(Unknown188);
      }
      if (Unknown189 != 0) {
        output.WriteRawTag(128, 16);
        output.WriteUInt32(Unknown189);
      }
      if (Unknown190 != 0) {
        output.WriteRawTag(136, 16);
        output.WriteUInt32(Unknown190);
      }
      if (Unknown191 != 0) {
        output.WriteRawTag(144, 16);
        output.WriteUInt32(Unknown191);
      }
      if (Unknown192 != 0) {
        output.WriteRawTag(152, 16);
        output.WriteUInt32(Unknown192);
      }
      if (Unknown193 != 0) {
        output.WriteRawTag(160, 16);
        output.WriteUInt32(Unknown193);
      }
      if (Unknown194 != 0) {
        output.WriteRawTag(168, 16);
        output.WriteUInt32(Unknown194);
      }
      if (Unknown195 != 0) {
        output.WriteRawTag(176, 16);
        output.WriteUInt32(Unknown195);
      }
      if (Unknown196 != 0) {
        output.WriteRawTag(184, 16);
        output.WriteUInt32(Unknown196);
      }
      if (Unknown197 != 0) {
        output.WriteRawTag(192, 16);
        output.WriteUInt32(Unknown197);
      }
      if (Unknown198 != 0) {
        output.WriteRawTag(200, 16);
        output.WriteUInt32(Unknown198);
      }
      if (Unknown199 != 0) {
        output.WriteRawTag(208, 16);
        output.WriteUInt32(Unknown199);
      }
      if (Unknown200 != 0) {
        output.WriteRawTag(216, 16);
        output.WriteUInt32(Unknown200);
      }
      if (Unknown201 != 0) {
        output.WriteRawTag(224, 16);
        output.WriteUInt32(Unknown201);
      }
      if (Unknown202 != 0) {
        output.WriteRawTag(232, 16);
        output.WriteUInt32(Unknown202);
      }
      if (Unknown203 != 0) {
        output.WriteRawTag(240, 16);
        output.WriteUInt32(Unknown203);
      }
      if (Unknown204 != 0) {
        output.WriteRawTag(248, 16);
        output.WriteUInt32(Unknown204);
      }
      if (Unknown205 != 0) {
        output.WriteRawTag(128, 17);
        output.WriteUInt32(Unknown205);
      }
      if (Unknown206 != 0) {
        output.WriteRawTag(136, 17);
        output.WriteUInt32(Unknown206);
      }
      if (Unknown207 != 0) {
        output.WriteRawTag(144, 17);
        output.WriteUInt32(Unknown207);
      }
      if (Unknown208 != 0) {
        output.WriteRawTag(152, 17);
        output.WriteUInt32(Unknown208);
      }
      if (Unknown209 != 0) {
        output.WriteRawTag(160, 17);
        output.WriteUInt32(Unknown209);
      }
      if (Unknown210 != 0) {
        output.WriteRawTag(168, 17);
        output.WriteUInt32(Unknown210);
      }
      if (Unknown211 != 0) {
        output.WriteRawTag(176, 17);
        output.WriteUInt32(Unknown211);
      }
      if (Unknown212 != 0) {
        output.WriteRawTag(184, 17);
        output.WriteUInt32(Unknown212);
      }
      if (Unknown213 != 0) {
        output.WriteRawTag(192, 17);
        output.WriteUInt32(Unknown213);
      }
      if (Unknown214 != 0) {
        output.WriteRawTag(200, 17);
        output.WriteUInt32(Unknown214);
      }
      if (Unknown215 != 0) {
        output.WriteRawTag(208, 17);
        output.WriteUInt32(Unknown215);
      }
      if (Unknown216 != 0) {
        output.WriteRawTag(216, 17);
        output.WriteUInt32(Unknown216);
      }
      if (Unknown217 != 0) {
        output.WriteRawTag(224, 17);
        output.WriteUInt32(Unknown217);
      }
      if (Unknown218 != 0) {
        output.WriteRawTag(232, 17);
        output.WriteUInt32(Unknown218);
      }
      if (Unknown219 != 0) {
        output.WriteRawTag(240, 17);
        output.WriteUInt32(Unknown219);
      }
      if (Unknown220 != 0) {
        output.WriteRawTag(248, 17);
        output.WriteUInt32(Unknown220);
      }
      if (Unknown221 != 0) {
        output.WriteRawTag(128, 18);
        output.WriteUInt32(Unknown221);
      }
      if (Unknown222 != 0) {
        output.WriteRawTag(136, 18);
        output.WriteUInt32(Unknown222);
      }
      if (Unknown223 != 0) {
        output.WriteRawTag(144, 18);
        output.WriteUInt32(Unknown223);
      }
      if (Unknown224 != 0) {
        output.WriteRawTag(152, 18);
        output.WriteUInt32(Unknown224);
      }
      if (Unknown225 != 0) {
        output.WriteRawTag(160, 18);
        output.WriteUInt32(Unknown225);
      }
      if (Unknown226 != 0) {
        output.WriteRawTag(168, 18);
        output.WriteUInt32(Unknown226);
      }
      if (Unknown227 != 0) {
        output.WriteRawTag(176, 18);
        output.WriteUInt32(Unknown227);
      }
      if (Unknown228 != 0) {
        output.WriteRawTag(184, 18);
        output.WriteUInt32(Unknown228);
      }
      if (Unknown229 != 0) {
        output.WriteRawTag(192, 18);
        output.WriteUInt32(Unknown229);
      }
      if (Unknown230 != 0) {
        output.WriteRawTag(200, 18);
        output.WriteUInt32(Unknown230);
      }
      if (Unknown231 != 0) {
        output.WriteRawTag(208, 18);
        output.WriteUInt32(Unknown231);
      }
      if (Unknown232 != 0) {
        output.WriteRawTag(216, 18);
        output.WriteUInt32(Unknown232);
      }
      if (Unknown233 != 0) {
        output.WriteRawTag(224, 18);
        output.WriteUInt32(Unknown233);
      }
      if (Unknown234 != 0) {
        output.WriteRawTag(232, 18);
        output.WriteUInt32(Unknown234);
      }
      if (Unknown235 != 0) {
        output.WriteRawTag(240, 18);
        output.WriteUInt32(Unknown235);
      }
      if (Unknown236 != 0) {
        output.WriteRawTag(248, 18);
        output.WriteUInt32(Unknown236);
      }
      if (Unknown237 != 0) {
        output.WriteRawTag(128, 19);
        output.WriteUInt32(Unknown237);
      }
      if (Unknown238 != 0) {
        output.WriteRawTag(136, 19);
        output.WriteUInt32(Unknown238);
      }
      if (Unknown239 != 0) {
        output.WriteRawTag(144, 19);
        output.WriteUInt32(Unknown239);
      }
      if (Unknown240 != 0) {
        output.WriteRawTag(152, 19);
        output.WriteUInt32(Unknown240);
      }
      if (Unknown241 != 0) {
        output.WriteRawTag(160, 19);
        output.WriteUInt32(Unknown241);
      }
      if (Unknown242 != 0) {
        output.WriteRawTag(168, 19);
        output.WriteUInt32(Unknown242);
      }
      if (Unknown243 != 0) {
        output.WriteRawTag(176, 19);
        output.WriteUInt32(Unknown243);
      }
      if (Unknown244 != 0) {
        output.WriteRawTag(184, 19);
        output.WriteUInt32(Unknown244);
      }
      if (Unknown245 != 0) {
        output.WriteRawTag(192, 19);
        output.WriteUInt32(Unknown245);
      }
      if (Unknown246 != 0) {
        output.WriteRawTag(200, 19);
        output.WriteUInt32(Unknown246);
      }
      if (Unknown247 != 0) {
        output.WriteRawTag(208, 19);
        output.WriteUInt32(Unknown247);
      }
      if (Unknown248 != 0) {
        output.WriteRawTag(216, 19);
        output.WriteUInt32(Unknown248);
      }
      if (Unknown249 != 0) {
        output.WriteRawTag(224, 19);
        output.WriteUInt32(Unknown249);
      }
      if (Unknown250 != 0) {
        output.WriteRawTag(232, 19);
        output.WriteUInt32(Unknown250);
      }
      if (Unknown251 != 0) {
        output.WriteRawTag(240, 19);
        output.WriteUInt32(Unknown251);
      }
      if (Unknown252 != 0) {
        output.WriteRawTag(248, 19);
        output.WriteUInt32(Unknown252);
      }
      if (Unknown253 != 0) {
        output.WriteRawTag(128, 20);
        output.WriteUInt32(Unknown253);
      }
      if (Unknown254 != 0) {
        output.WriteRawTag(136, 20);
        output.WriteUInt32(Unknown254);
      }
      if (Unknown255 != 0) {
        output.WriteRawTag(144, 20);
        output.WriteUInt32(Unknown255);
      }
      if (Unknown256 != 0) {
        output.WriteRawTag(152, 20);
        output.WriteUInt32(Unknown256);
      }
      if (Unknown257 != 0) {
        output.WriteRawTag(160, 20);
        output.WriteUInt32(Unknown257);
      }
      if (Unknown258 != 0) {
        output.WriteRawTag(168, 20);
        output.WriteUInt32(Unknown258);
      }
      if (Unknown259 != 0) {
        output.WriteRawTag(176, 20);
        output.WriteUInt32(Unknown259);
      }
      if (Unknown260 != 0) {
        output.WriteRawTag(184, 20);
        output.WriteUInt32(Unknown260);
      }
      if (Unknown261 != 0) {
        output.WriteRawTag(192, 20);
        output.WriteUInt32(Unknown261);
      }
      if (Unknown262 != 0) {
        output.WriteRawTag(200, 20);
        output.WriteUInt32(Unknown262);
      }
      if (Unknown263 != 0) {
        output.WriteRawTag(208, 20);
        output.WriteUInt32(Unknown263);
      }
      if (Unknown264 != 0) {
        output.WriteRawTag(216, 20);
        output.WriteUInt32(Unknown264);
      }
      if (AtkDarkCorrection != 0) {
        output.WriteRawTag(224, 20);
        output.WriteUInt32(AtkDarkCorrection);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Index);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Offset);
      }
      if (Hit0Radius != 0F) {
        size += 1 + 4;
      }
      if (Hit1Radius != 0F) {
        size += 1 + 4;
      }
      if (Hit2Radius != 0F) {
        size += 1 + 4;
      }
      if (Hit3Radius != 0F) {
        size += 1 + 4;
      }
      if (KnockbackDist != 0F) {
        size += 1 + 4;
      }
      if (HitStopTime != 0F) {
        size += 1 + 4;
      }
      if (SpEffectId0 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SpEffectId0);
      }
      if (SpEffectId1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SpEffectId1);
      }
      if (SpEffectId2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SpEffectId2);
      }
      if (SpEffectId3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SpEffectId3);
      }
      if (SpEffectId4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SpEffectId4);
      }
      if (Hit0DmyPoly1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Hit0DmyPoly1);
      }
      if (Hit1DmyPoly1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Hit1DmyPoly1);
      }
      if (Hit2DmyPoly1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Hit2DmyPoly1);
      }
      if (Hit3DmyPoly1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Hit3DmyPoly1);
      }
      if (Hit0DmyPoly2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Hit0DmyPoly2);
      }
      if (Hit1DmyPoly2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Hit1DmyPoly2);
      }
      if (Hit2DmyPoly2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Hit2DmyPoly2);
      }
      if (Hit3DmyPoly2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(Hit3DmyPoly2);
      }
      if (BlowingCorrection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BlowingCorrection);
      }
      if (AtkPhysCorrection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtkPhysCorrection);
      }
      if (AtkMagCorrection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtkMagCorrection);
      }
      if (AtkFireCorrection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtkFireCorrection);
      }
      if (AtkThunCorrection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtkThunCorrection);
      }
      if (AtkStamCorrection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtkStamCorrection);
      }
      if (GuardAtkRateCorrection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GuardAtkRateCorrection);
      }
      if (GuardBreakCorrection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GuardBreakCorrection);
      }
      if (AtkThrowEscapeCorrection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtkThrowEscapeCorrection);
      }
      if (AtkPhys != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtkPhys);
      }
      if (AtkMag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtkMag);
      }
      if (AtkFire != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtkFire);
      }
      if (AtkThun != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtkThun);
      }
      if (AtkStam != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtkStam);
      }
      if (GuardAtkRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GuardAtkRate);
      }
      if (GuardBreakRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GuardBreakRate);
      }
      if (AtkSuperArmor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtkSuperArmor);
      }
      if (AtkThrowEscape != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtkThrowEscape);
      }
      if (AtkObj != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtkObj);
      }
      if (GuardStaminaCutRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(GuardStaminaCutRate);
      }
      if (GuardRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(GuardRate);
      }
      if (ThrowTypeId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ThrowTypeId);
      }
      if (Hit0HitType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Hit0HitType);
      }
      if (Hit1HitType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Hit1HitType);
      }
      if (Hit2HitType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Hit2HitType);
      }
      if (Hit3HitType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Hit3HitType);
      }
      if (Hit0Priority != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Hit0Priority);
      }
      if (Hit1Priority != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Hit1Priority);
      }
      if (Hit2Priority != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Hit2Priority);
      }
      if (Hit3Priority != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Hit3Priority);
      }
      if (DamageLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DamageLevel);
      }
      if (MapHitType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MapHitType);
      }
      if (GuardCutCancelRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(GuardCutCancelRate);
      }
      if (AtkAttribute != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtkAttribute);
      }
      if (SpecialAttributes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpecialAttributes);
      }
      if (AttackType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackType);
      }
      if (AtkMaterial != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtkMaterial);
      }
      if (AtkSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtkSize);
      }
      if (DefMaterial != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DefMaterial);
      }
      if (DefSfxMaterial != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DefSfxMaterial);
      }
      if (HitSourceType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HitSourceType);
      }
      if (ThrowFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ThrowFlag);
      }
      if (BitField != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BitField);
      }
      if (Unknown0 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown0);
      }
      if (Unknown1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown1);
      }
      if (Unknown2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown2);
      }
      if (Unknown3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown3);
      }
      if (Unknown4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown4);
      }
      if (Unknown5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown5);
      }
      if (Unknown6 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown6);
      }
      if (Unknown7 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown7);
      }
      if (Unknown8 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown8);
      }
      if (Unknown9 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown9);
      }
      if (Unknown10 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown10);
      }
      if (Unknown11 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown11);
      }
      if (Unknown12 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown12);
      }
      if (Unknown13 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown13);
      }
      if (Unknown14 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown14);
      }
      if (Unknown15 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown15);
      }
      if (Unknown16 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown16);
      }
      if (Unknown17 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown17);
      }
      if (Unknown18 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown18);
      }
      if (Unknown19 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown19);
      }
      if (Unknown20 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown20);
      }
      if (Unknown21 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown21);
      }
      if (Unknown22 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown22);
      }
      if (Unknown23 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown23);
      }
      if (Unknown24 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown24);
      }
      if (Unknown25 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown25);
      }
      if (Unknown26 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown26);
      }
      if (Unknown27 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown27);
      }
      if (Unknown28 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown28);
      }
      if (Unknown29 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown29);
      }
      if (Unknown30 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown30);
      }
      if (Unknown31 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown31);
      }
      if (Unknown32 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown32);
      }
      if (Unknown33 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown33);
      }
      if (Unknown34 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown34);
      }
      if (Unknown35 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown35);
      }
      if (Unknown36 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown36);
      }
      if (Unknown37 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown37);
      }
      if (Unknown38 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown38);
      }
      if (Unknown39 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown39);
      }
      if (Unknown40 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown40);
      }
      if (Unknown41 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown41);
      }
      if (Unknown42 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown42);
      }
      if (Unknown43 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown43);
      }
      if (Unknown44 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown44);
      }
      if (Unknown45 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown45);
      }
      if (Unknown46 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown46);
      }
      if (Unknown47 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown47);
      }
      if (Unknown48 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown48);
      }
      if (Unknown49 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown49);
      }
      if (Unknown50 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown50);
      }
      if (Unknown51 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown51);
      }
      if (Unknown52 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown52);
      }
      if (Unknown53 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown53);
      }
      if (Unknown54 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown54);
      }
      if (Unknown55 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown55);
      }
      if (Unknown56 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown56);
      }
      if (Unknown57 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown57);
      }
      if (Unknown58 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown58);
      }
      if (Unknown59 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown59);
      }
      if (Unknown60 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown60);
      }
      if (Unknown61 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown61);
      }
      if (Unknown62 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown62);
      }
      if (Unknown63 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown63);
      }
      if (Unknown64 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown64);
      }
      if (Unknown65 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown65);
      }
      if (Unknown66 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown66);
      }
      if (Unknown67 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown67);
      }
      if (Unknown68 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown68);
      }
      if (Unknown69 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown69);
      }
      if (Unknown70 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown70);
      }
      if (Unknown71 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown71);
      }
      if (Unknown72 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown72);
      }
      if (Unknown73 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown73);
      }
      if (Unknown74 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown74);
      }
      if (Unknown75 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown75);
      }
      if (Unknown76 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown76);
      }
      if (Unknown77 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown77);
      }
      if (Unknown78 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown78);
      }
      if (Unknown79 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown79);
      }
      if (Unknown80 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown80);
      }
      if (Unknown81 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown81);
      }
      if (Unknown82 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown82);
      }
      if (Unknown83 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown83);
      }
      if (Unknown84 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown84);
      }
      if (Unknown85 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown85);
      }
      if (Unknown86 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown86);
      }
      if (Unknown87 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown87);
      }
      if (Unknown88 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown88);
      }
      if (Unknown89 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown89);
      }
      if (Unknown90 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown90);
      }
      if (Unknown91 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown91);
      }
      if (Unknown92 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown92);
      }
      if (Unknown93 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown93);
      }
      if (Unknown94 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown94);
      }
      if (Unknown95 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown95);
      }
      if (Unknown96 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown96);
      }
      if (Unknown97 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown97);
      }
      if (Unknown98 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown98);
      }
      if (Unknown99 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown99);
      }
      if (Unknown100 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown100);
      }
      if (Unknown101 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown101);
      }
      if (Unknown102 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown102);
      }
      if (Unknown103 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown103);
      }
      if (Unknown104 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown104);
      }
      if (Unknown105 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown105);
      }
      if (Unknown106 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown106);
      }
      if (Unknown107 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown107);
      }
      if (Unknown108 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown108);
      }
      if (Unknown109 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown109);
      }
      if (Unknown110 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown110);
      }
      if (Unknown111 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown111);
      }
      if (Unknown112 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown112);
      }
      if (Unknown113 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown113);
      }
      if (Unknown114 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown114);
      }
      if (Unknown115 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown115);
      }
      if (Unknown116 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown116);
      }
      if (Unknown117 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown117);
      }
      if (Unknown118 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown118);
      }
      if (Unknown119 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown119);
      }
      if (Unknown120 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown120);
      }
      if (Unknown121 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown121);
      }
      if (Unknown122 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown122);
      }
      if (Unknown123 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown123);
      }
      if (Unknown124 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown124);
      }
      if (Unknown125 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown125);
      }
      if (Unknown126 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown126);
      }
      if (Unknown127 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown127);
      }
      if (Unknown128 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown128);
      }
      if (Unknown129 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown129);
      }
      if (Unknown130 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown130);
      }
      if (Unknown131 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown131);
      }
      if (Unknown132 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown132);
      }
      if (Unknown133 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown133);
      }
      if (Unknown134 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown134);
      }
      if (Unknown135 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown135);
      }
      if (Unknown136 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown136);
      }
      if (Unknown137 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown137);
      }
      if (Unknown138 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown138);
      }
      if (Unknown139 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown139);
      }
      if (Unknown140 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown140);
      }
      if (Unknown141 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown141);
      }
      if (Unknown142 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown142);
      }
      if (Unknown143 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown143);
      }
      if (Unknown144 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown144);
      }
      if (Unknown145 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown145);
      }
      if (Unknown146 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown146);
      }
      if (Unknown147 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown147);
      }
      if (Unknown148 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown148);
      }
      if (Unknown149 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown149);
      }
      if (Unknown150 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown150);
      }
      if (Unknown151 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown151);
      }
      if (Unknown152 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown152);
      }
      if (Unknown153 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown153);
      }
      if (Unknown154 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown154);
      }
      if (Unknown155 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown155);
      }
      if (Unknown156 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown156);
      }
      if (Unknown157 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown157);
      }
      if (Unknown158 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown158);
      }
      if (Unknown159 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown159);
      }
      if (Unknown160 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown160);
      }
      if (Unknown161 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown161);
      }
      if (Unknown162 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown162);
      }
      if (Unknown163 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown163);
      }
      if (Unknown164 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown164);
      }
      if (Unknown165 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown165);
      }
      if (Unknown166 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown166);
      }
      if (Unknown167 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown167);
      }
      if (Unknown168 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown168);
      }
      if (Unknown169 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown169);
      }
      if (Unknown170 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown170);
      }
      if (Unknown171 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown171);
      }
      if (Unknown172 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown172);
      }
      if (Unknown173 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown173);
      }
      if (Unknown174 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown174);
      }
      if (Unknown175 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown175);
      }
      if (Unknown176 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown176);
      }
      if (Unknown177 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown177);
      }
      if (Unknown178 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown178);
      }
      if (Unknown179 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown179);
      }
      if (Unknown180 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown180);
      }
      if (Unknown181 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown181);
      }
      if (Unknown182 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown182);
      }
      if (Unknown183 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown183);
      }
      if (Unknown184 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown184);
      }
      if (Unknown185 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown185);
      }
      if (Unknown186 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown186);
      }
      if (Unknown187 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown187);
      }
      if (Unknown188 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown188);
      }
      if (Unknown189 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown189);
      }
      if (Unknown190 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown190);
      }
      if (Unknown191 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown191);
      }
      if (Unknown192 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown192);
      }
      if (Unknown193 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown193);
      }
      if (Unknown194 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown194);
      }
      if (Unknown195 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown195);
      }
      if (Unknown196 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown196);
      }
      if (Unknown197 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown197);
      }
      if (Unknown198 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown198);
      }
      if (Unknown199 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown199);
      }
      if (Unknown200 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown200);
      }
      if (Unknown201 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown201);
      }
      if (Unknown202 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown202);
      }
      if (Unknown203 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown203);
      }
      if (Unknown204 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown204);
      }
      if (Unknown205 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown205);
      }
      if (Unknown206 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown206);
      }
      if (Unknown207 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown207);
      }
      if (Unknown208 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown208);
      }
      if (Unknown209 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown209);
      }
      if (Unknown210 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown210);
      }
      if (Unknown211 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown211);
      }
      if (Unknown212 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown212);
      }
      if (Unknown213 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown213);
      }
      if (Unknown214 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown214);
      }
      if (Unknown215 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown215);
      }
      if (Unknown216 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown216);
      }
      if (Unknown217 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown217);
      }
      if (Unknown218 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown218);
      }
      if (Unknown219 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown219);
      }
      if (Unknown220 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown220);
      }
      if (Unknown221 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown221);
      }
      if (Unknown222 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown222);
      }
      if (Unknown223 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown223);
      }
      if (Unknown224 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown224);
      }
      if (Unknown225 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown225);
      }
      if (Unknown226 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown226);
      }
      if (Unknown227 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown227);
      }
      if (Unknown228 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown228);
      }
      if (Unknown229 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown229);
      }
      if (Unknown230 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown230);
      }
      if (Unknown231 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown231);
      }
      if (Unknown232 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown232);
      }
      if (Unknown233 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown233);
      }
      if (Unknown234 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown234);
      }
      if (Unknown235 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown235);
      }
      if (Unknown236 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown236);
      }
      if (Unknown237 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown237);
      }
      if (Unknown238 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown238);
      }
      if (Unknown239 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown239);
      }
      if (Unknown240 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown240);
      }
      if (Unknown241 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown241);
      }
      if (Unknown242 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown242);
      }
      if (Unknown243 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown243);
      }
      if (Unknown244 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown244);
      }
      if (Unknown245 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown245);
      }
      if (Unknown246 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown246);
      }
      if (Unknown247 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown247);
      }
      if (Unknown248 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown248);
      }
      if (Unknown249 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown249);
      }
      if (Unknown250 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown250);
      }
      if (Unknown251 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown251);
      }
      if (Unknown252 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown252);
      }
      if (Unknown253 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown253);
      }
      if (Unknown254 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown254);
      }
      if (Unknown255 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown255);
      }
      if (Unknown256 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown256);
      }
      if (Unknown257 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown257);
      }
      if (Unknown258 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown258);
      }
      if (Unknown259 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown259);
      }
      if (Unknown260 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown260);
      }
      if (Unknown261 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown261);
      }
      if (Unknown262 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown262);
      }
      if (Unknown263 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown263);
      }
      if (Unknown264 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unknown264);
      }
      if (AtkDarkCorrection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtkDarkCorrection);
      }
      return size;
    }

    public void MergeFrom(AtkParam other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.Hit0Radius != 0F) {
        Hit0Radius = other.Hit0Radius;
      }
      if (other.Hit1Radius != 0F) {
        Hit1Radius = other.Hit1Radius;
      }
      if (other.Hit2Radius != 0F) {
        Hit2Radius = other.Hit2Radius;
      }
      if (other.Hit3Radius != 0F) {
        Hit3Radius = other.Hit3Radius;
      }
      if (other.KnockbackDist != 0F) {
        KnockbackDist = other.KnockbackDist;
      }
      if (other.HitStopTime != 0F) {
        HitStopTime = other.HitStopTime;
      }
      if (other.SpEffectId0 != 0) {
        SpEffectId0 = other.SpEffectId0;
      }
      if (other.SpEffectId1 != 0) {
        SpEffectId1 = other.SpEffectId1;
      }
      if (other.SpEffectId2 != 0) {
        SpEffectId2 = other.SpEffectId2;
      }
      if (other.SpEffectId3 != 0) {
        SpEffectId3 = other.SpEffectId3;
      }
      if (other.SpEffectId4 != 0) {
        SpEffectId4 = other.SpEffectId4;
      }
      if (other.Hit0DmyPoly1 != 0) {
        Hit0DmyPoly1 = other.Hit0DmyPoly1;
      }
      if (other.Hit1DmyPoly1 != 0) {
        Hit1DmyPoly1 = other.Hit1DmyPoly1;
      }
      if (other.Hit2DmyPoly1 != 0) {
        Hit2DmyPoly1 = other.Hit2DmyPoly1;
      }
      if (other.Hit3DmyPoly1 != 0) {
        Hit3DmyPoly1 = other.Hit3DmyPoly1;
      }
      if (other.Hit0DmyPoly2 != 0) {
        Hit0DmyPoly2 = other.Hit0DmyPoly2;
      }
      if (other.Hit1DmyPoly2 != 0) {
        Hit1DmyPoly2 = other.Hit1DmyPoly2;
      }
      if (other.Hit2DmyPoly2 != 0) {
        Hit2DmyPoly2 = other.Hit2DmyPoly2;
      }
      if (other.Hit3DmyPoly2 != 0) {
        Hit3DmyPoly2 = other.Hit3DmyPoly2;
      }
      if (other.BlowingCorrection != 0) {
        BlowingCorrection = other.BlowingCorrection;
      }
      if (other.AtkPhysCorrection != 0) {
        AtkPhysCorrection = other.AtkPhysCorrection;
      }
      if (other.AtkMagCorrection != 0) {
        AtkMagCorrection = other.AtkMagCorrection;
      }
      if (other.AtkFireCorrection != 0) {
        AtkFireCorrection = other.AtkFireCorrection;
      }
      if (other.AtkThunCorrection != 0) {
        AtkThunCorrection = other.AtkThunCorrection;
      }
      if (other.AtkStamCorrection != 0) {
        AtkStamCorrection = other.AtkStamCorrection;
      }
      if (other.GuardAtkRateCorrection != 0) {
        GuardAtkRateCorrection = other.GuardAtkRateCorrection;
      }
      if (other.GuardBreakCorrection != 0) {
        GuardBreakCorrection = other.GuardBreakCorrection;
      }
      if (other.AtkThrowEscapeCorrection != 0) {
        AtkThrowEscapeCorrection = other.AtkThrowEscapeCorrection;
      }
      if (other.AtkPhys != 0) {
        AtkPhys = other.AtkPhys;
      }
      if (other.AtkMag != 0) {
        AtkMag = other.AtkMag;
      }
      if (other.AtkFire != 0) {
        AtkFire = other.AtkFire;
      }
      if (other.AtkThun != 0) {
        AtkThun = other.AtkThun;
      }
      if (other.AtkStam != 0) {
        AtkStam = other.AtkStam;
      }
      if (other.GuardAtkRate != 0) {
        GuardAtkRate = other.GuardAtkRate;
      }
      if (other.GuardBreakRate != 0) {
        GuardBreakRate = other.GuardBreakRate;
      }
      if (other.AtkSuperArmor != 0) {
        AtkSuperArmor = other.AtkSuperArmor;
      }
      if (other.AtkThrowEscape != 0) {
        AtkThrowEscape = other.AtkThrowEscape;
      }
      if (other.AtkObj != 0) {
        AtkObj = other.AtkObj;
      }
      if (other.GuardStaminaCutRate != 0) {
        GuardStaminaCutRate = other.GuardStaminaCutRate;
      }
      if (other.GuardRate != 0) {
        GuardRate = other.GuardRate;
      }
      if (other.ThrowTypeId != 0) {
        ThrowTypeId = other.ThrowTypeId;
      }
      if (other.Hit0HitType != 0) {
        Hit0HitType = other.Hit0HitType;
      }
      if (other.Hit1HitType != 0) {
        Hit1HitType = other.Hit1HitType;
      }
      if (other.Hit2HitType != 0) {
        Hit2HitType = other.Hit2HitType;
      }
      if (other.Hit3HitType != 0) {
        Hit3HitType = other.Hit3HitType;
      }
      if (other.Hit0Priority != 0) {
        Hit0Priority = other.Hit0Priority;
      }
      if (other.Hit1Priority != 0) {
        Hit1Priority = other.Hit1Priority;
      }
      if (other.Hit2Priority != 0) {
        Hit2Priority = other.Hit2Priority;
      }
      if (other.Hit3Priority != 0) {
        Hit3Priority = other.Hit3Priority;
      }
      if (other.DamageLevel != 0) {
        DamageLevel = other.DamageLevel;
      }
      if (other.MapHitType != 0) {
        MapHitType = other.MapHitType;
      }
      if (other.GuardCutCancelRate != 0) {
        GuardCutCancelRate = other.GuardCutCancelRate;
      }
      if (other.AtkAttribute != 0) {
        AtkAttribute = other.AtkAttribute;
      }
      if (other.SpecialAttributes != 0) {
        SpecialAttributes = other.SpecialAttributes;
      }
      if (other.AttackType != 0) {
        AttackType = other.AttackType;
      }
      if (other.AtkMaterial != 0) {
        AtkMaterial = other.AtkMaterial;
      }
      if (other.AtkSize != 0) {
        AtkSize = other.AtkSize;
      }
      if (other.DefMaterial != 0) {
        DefMaterial = other.DefMaterial;
      }
      if (other.DefSfxMaterial != 0) {
        DefSfxMaterial = other.DefSfxMaterial;
      }
      if (other.HitSourceType != 0) {
        HitSourceType = other.HitSourceType;
      }
      if (other.ThrowFlag != 0) {
        ThrowFlag = other.ThrowFlag;
      }
      if (other.BitField != 0) {
        BitField = other.BitField;
      }
      if (other.Unknown0 != 0) {
        Unknown0 = other.Unknown0;
      }
      if (other.Unknown1 != 0) {
        Unknown1 = other.Unknown1;
      }
      if (other.Unknown2 != 0) {
        Unknown2 = other.Unknown2;
      }
      if (other.Unknown3 != 0) {
        Unknown3 = other.Unknown3;
      }
      if (other.Unknown4 != 0) {
        Unknown4 = other.Unknown4;
      }
      if (other.Unknown5 != 0) {
        Unknown5 = other.Unknown5;
      }
      if (other.Unknown6 != 0) {
        Unknown6 = other.Unknown6;
      }
      if (other.Unknown7 != 0) {
        Unknown7 = other.Unknown7;
      }
      if (other.Unknown8 != 0) {
        Unknown8 = other.Unknown8;
      }
      if (other.Unknown9 != 0) {
        Unknown9 = other.Unknown9;
      }
      if (other.Unknown10 != 0) {
        Unknown10 = other.Unknown10;
      }
      if (other.Unknown11 != 0) {
        Unknown11 = other.Unknown11;
      }
      if (other.Unknown12 != 0) {
        Unknown12 = other.Unknown12;
      }
      if (other.Unknown13 != 0) {
        Unknown13 = other.Unknown13;
      }
      if (other.Unknown14 != 0) {
        Unknown14 = other.Unknown14;
      }
      if (other.Unknown15 != 0) {
        Unknown15 = other.Unknown15;
      }
      if (other.Unknown16 != 0) {
        Unknown16 = other.Unknown16;
      }
      if (other.Unknown17 != 0) {
        Unknown17 = other.Unknown17;
      }
      if (other.Unknown18 != 0) {
        Unknown18 = other.Unknown18;
      }
      if (other.Unknown19 != 0) {
        Unknown19 = other.Unknown19;
      }
      if (other.Unknown20 != 0) {
        Unknown20 = other.Unknown20;
      }
      if (other.Unknown21 != 0) {
        Unknown21 = other.Unknown21;
      }
      if (other.Unknown22 != 0) {
        Unknown22 = other.Unknown22;
      }
      if (other.Unknown23 != 0) {
        Unknown23 = other.Unknown23;
      }
      if (other.Unknown24 != 0) {
        Unknown24 = other.Unknown24;
      }
      if (other.Unknown25 != 0) {
        Unknown25 = other.Unknown25;
      }
      if (other.Unknown26 != 0) {
        Unknown26 = other.Unknown26;
      }
      if (other.Unknown27 != 0) {
        Unknown27 = other.Unknown27;
      }
      if (other.Unknown28 != 0) {
        Unknown28 = other.Unknown28;
      }
      if (other.Unknown29 != 0) {
        Unknown29 = other.Unknown29;
      }
      if (other.Unknown30 != 0) {
        Unknown30 = other.Unknown30;
      }
      if (other.Unknown31 != 0) {
        Unknown31 = other.Unknown31;
      }
      if (other.Unknown32 != 0) {
        Unknown32 = other.Unknown32;
      }
      if (other.Unknown33 != 0) {
        Unknown33 = other.Unknown33;
      }
      if (other.Unknown34 != 0) {
        Unknown34 = other.Unknown34;
      }
      if (other.Unknown35 != 0) {
        Unknown35 = other.Unknown35;
      }
      if (other.Unknown36 != 0) {
        Unknown36 = other.Unknown36;
      }
      if (other.Unknown37 != 0) {
        Unknown37 = other.Unknown37;
      }
      if (other.Unknown38 != 0) {
        Unknown38 = other.Unknown38;
      }
      if (other.Unknown39 != 0) {
        Unknown39 = other.Unknown39;
      }
      if (other.Unknown40 != 0) {
        Unknown40 = other.Unknown40;
      }
      if (other.Unknown41 != 0) {
        Unknown41 = other.Unknown41;
      }
      if (other.Unknown42 != 0) {
        Unknown42 = other.Unknown42;
      }
      if (other.Unknown43 != 0) {
        Unknown43 = other.Unknown43;
      }
      if (other.Unknown44 != 0) {
        Unknown44 = other.Unknown44;
      }
      if (other.Unknown45 != 0) {
        Unknown45 = other.Unknown45;
      }
      if (other.Unknown46 != 0) {
        Unknown46 = other.Unknown46;
      }
      if (other.Unknown47 != 0) {
        Unknown47 = other.Unknown47;
      }
      if (other.Unknown48 != 0) {
        Unknown48 = other.Unknown48;
      }
      if (other.Unknown49 != 0) {
        Unknown49 = other.Unknown49;
      }
      if (other.Unknown50 != 0) {
        Unknown50 = other.Unknown50;
      }
      if (other.Unknown51 != 0) {
        Unknown51 = other.Unknown51;
      }
      if (other.Unknown52 != 0) {
        Unknown52 = other.Unknown52;
      }
      if (other.Unknown53 != 0) {
        Unknown53 = other.Unknown53;
      }
      if (other.Unknown54 != 0) {
        Unknown54 = other.Unknown54;
      }
      if (other.Unknown55 != 0) {
        Unknown55 = other.Unknown55;
      }
      if (other.Unknown56 != 0) {
        Unknown56 = other.Unknown56;
      }
      if (other.Unknown57 != 0) {
        Unknown57 = other.Unknown57;
      }
      if (other.Unknown58 != 0) {
        Unknown58 = other.Unknown58;
      }
      if (other.Unknown59 != 0) {
        Unknown59 = other.Unknown59;
      }
      if (other.Unknown60 != 0) {
        Unknown60 = other.Unknown60;
      }
      if (other.Unknown61 != 0) {
        Unknown61 = other.Unknown61;
      }
      if (other.Unknown62 != 0) {
        Unknown62 = other.Unknown62;
      }
      if (other.Unknown63 != 0) {
        Unknown63 = other.Unknown63;
      }
      if (other.Unknown64 != 0) {
        Unknown64 = other.Unknown64;
      }
      if (other.Unknown65 != 0) {
        Unknown65 = other.Unknown65;
      }
      if (other.Unknown66 != 0) {
        Unknown66 = other.Unknown66;
      }
      if (other.Unknown67 != 0) {
        Unknown67 = other.Unknown67;
      }
      if (other.Unknown68 != 0) {
        Unknown68 = other.Unknown68;
      }
      if (other.Unknown69 != 0) {
        Unknown69 = other.Unknown69;
      }
      if (other.Unknown70 != 0) {
        Unknown70 = other.Unknown70;
      }
      if (other.Unknown71 != 0) {
        Unknown71 = other.Unknown71;
      }
      if (other.Unknown72 != 0) {
        Unknown72 = other.Unknown72;
      }
      if (other.Unknown73 != 0) {
        Unknown73 = other.Unknown73;
      }
      if (other.Unknown74 != 0) {
        Unknown74 = other.Unknown74;
      }
      if (other.Unknown75 != 0) {
        Unknown75 = other.Unknown75;
      }
      if (other.Unknown76 != 0) {
        Unknown76 = other.Unknown76;
      }
      if (other.Unknown77 != 0) {
        Unknown77 = other.Unknown77;
      }
      if (other.Unknown78 != 0) {
        Unknown78 = other.Unknown78;
      }
      if (other.Unknown79 != 0) {
        Unknown79 = other.Unknown79;
      }
      if (other.Unknown80 != 0) {
        Unknown80 = other.Unknown80;
      }
      if (other.Unknown81 != 0) {
        Unknown81 = other.Unknown81;
      }
      if (other.Unknown82 != 0) {
        Unknown82 = other.Unknown82;
      }
      if (other.Unknown83 != 0) {
        Unknown83 = other.Unknown83;
      }
      if (other.Unknown84 != 0) {
        Unknown84 = other.Unknown84;
      }
      if (other.Unknown85 != 0) {
        Unknown85 = other.Unknown85;
      }
      if (other.Unknown86 != 0) {
        Unknown86 = other.Unknown86;
      }
      if (other.Unknown87 != 0) {
        Unknown87 = other.Unknown87;
      }
      if (other.Unknown88 != 0) {
        Unknown88 = other.Unknown88;
      }
      if (other.Unknown89 != 0) {
        Unknown89 = other.Unknown89;
      }
      if (other.Unknown90 != 0) {
        Unknown90 = other.Unknown90;
      }
      if (other.Unknown91 != 0) {
        Unknown91 = other.Unknown91;
      }
      if (other.Unknown92 != 0) {
        Unknown92 = other.Unknown92;
      }
      if (other.Unknown93 != 0) {
        Unknown93 = other.Unknown93;
      }
      if (other.Unknown94 != 0) {
        Unknown94 = other.Unknown94;
      }
      if (other.Unknown95 != 0) {
        Unknown95 = other.Unknown95;
      }
      if (other.Unknown96 != 0) {
        Unknown96 = other.Unknown96;
      }
      if (other.Unknown97 != 0) {
        Unknown97 = other.Unknown97;
      }
      if (other.Unknown98 != 0) {
        Unknown98 = other.Unknown98;
      }
      if (other.Unknown99 != 0) {
        Unknown99 = other.Unknown99;
      }
      if (other.Unknown100 != 0) {
        Unknown100 = other.Unknown100;
      }
      if (other.Unknown101 != 0) {
        Unknown101 = other.Unknown101;
      }
      if (other.Unknown102 != 0) {
        Unknown102 = other.Unknown102;
      }
      if (other.Unknown103 != 0) {
        Unknown103 = other.Unknown103;
      }
      if (other.Unknown104 != 0) {
        Unknown104 = other.Unknown104;
      }
      if (other.Unknown105 != 0) {
        Unknown105 = other.Unknown105;
      }
      if (other.Unknown106 != 0) {
        Unknown106 = other.Unknown106;
      }
      if (other.Unknown107 != 0) {
        Unknown107 = other.Unknown107;
      }
      if (other.Unknown108 != 0) {
        Unknown108 = other.Unknown108;
      }
      if (other.Unknown109 != 0) {
        Unknown109 = other.Unknown109;
      }
      if (other.Unknown110 != 0) {
        Unknown110 = other.Unknown110;
      }
      if (other.Unknown111 != 0) {
        Unknown111 = other.Unknown111;
      }
      if (other.Unknown112 != 0) {
        Unknown112 = other.Unknown112;
      }
      if (other.Unknown113 != 0) {
        Unknown113 = other.Unknown113;
      }
      if (other.Unknown114 != 0) {
        Unknown114 = other.Unknown114;
      }
      if (other.Unknown115 != 0) {
        Unknown115 = other.Unknown115;
      }
      if (other.Unknown116 != 0) {
        Unknown116 = other.Unknown116;
      }
      if (other.Unknown117 != 0) {
        Unknown117 = other.Unknown117;
      }
      if (other.Unknown118 != 0) {
        Unknown118 = other.Unknown118;
      }
      if (other.Unknown119 != 0) {
        Unknown119 = other.Unknown119;
      }
      if (other.Unknown120 != 0) {
        Unknown120 = other.Unknown120;
      }
      if (other.Unknown121 != 0) {
        Unknown121 = other.Unknown121;
      }
      if (other.Unknown122 != 0) {
        Unknown122 = other.Unknown122;
      }
      if (other.Unknown123 != 0) {
        Unknown123 = other.Unknown123;
      }
      if (other.Unknown124 != 0) {
        Unknown124 = other.Unknown124;
      }
      if (other.Unknown125 != 0) {
        Unknown125 = other.Unknown125;
      }
      if (other.Unknown126 != 0) {
        Unknown126 = other.Unknown126;
      }
      if (other.Unknown127 != 0) {
        Unknown127 = other.Unknown127;
      }
      if (other.Unknown128 != 0) {
        Unknown128 = other.Unknown128;
      }
      if (other.Unknown129 != 0) {
        Unknown129 = other.Unknown129;
      }
      if (other.Unknown130 != 0) {
        Unknown130 = other.Unknown130;
      }
      if (other.Unknown131 != 0) {
        Unknown131 = other.Unknown131;
      }
      if (other.Unknown132 != 0) {
        Unknown132 = other.Unknown132;
      }
      if (other.Unknown133 != 0) {
        Unknown133 = other.Unknown133;
      }
      if (other.Unknown134 != 0) {
        Unknown134 = other.Unknown134;
      }
      if (other.Unknown135 != 0) {
        Unknown135 = other.Unknown135;
      }
      if (other.Unknown136 != 0) {
        Unknown136 = other.Unknown136;
      }
      if (other.Unknown137 != 0) {
        Unknown137 = other.Unknown137;
      }
      if (other.Unknown138 != 0) {
        Unknown138 = other.Unknown138;
      }
      if (other.Unknown139 != 0) {
        Unknown139 = other.Unknown139;
      }
      if (other.Unknown140 != 0) {
        Unknown140 = other.Unknown140;
      }
      if (other.Unknown141 != 0) {
        Unknown141 = other.Unknown141;
      }
      if (other.Unknown142 != 0) {
        Unknown142 = other.Unknown142;
      }
      if (other.Unknown143 != 0) {
        Unknown143 = other.Unknown143;
      }
      if (other.Unknown144 != 0) {
        Unknown144 = other.Unknown144;
      }
      if (other.Unknown145 != 0) {
        Unknown145 = other.Unknown145;
      }
      if (other.Unknown146 != 0) {
        Unknown146 = other.Unknown146;
      }
      if (other.Unknown147 != 0) {
        Unknown147 = other.Unknown147;
      }
      if (other.Unknown148 != 0) {
        Unknown148 = other.Unknown148;
      }
      if (other.Unknown149 != 0) {
        Unknown149 = other.Unknown149;
      }
      if (other.Unknown150 != 0) {
        Unknown150 = other.Unknown150;
      }
      if (other.Unknown151 != 0) {
        Unknown151 = other.Unknown151;
      }
      if (other.Unknown152 != 0) {
        Unknown152 = other.Unknown152;
      }
      if (other.Unknown153 != 0) {
        Unknown153 = other.Unknown153;
      }
      if (other.Unknown154 != 0) {
        Unknown154 = other.Unknown154;
      }
      if (other.Unknown155 != 0) {
        Unknown155 = other.Unknown155;
      }
      if (other.Unknown156 != 0) {
        Unknown156 = other.Unknown156;
      }
      if (other.Unknown157 != 0) {
        Unknown157 = other.Unknown157;
      }
      if (other.Unknown158 != 0) {
        Unknown158 = other.Unknown158;
      }
      if (other.Unknown159 != 0) {
        Unknown159 = other.Unknown159;
      }
      if (other.Unknown160 != 0) {
        Unknown160 = other.Unknown160;
      }
      if (other.Unknown161 != 0) {
        Unknown161 = other.Unknown161;
      }
      if (other.Unknown162 != 0) {
        Unknown162 = other.Unknown162;
      }
      if (other.Unknown163 != 0) {
        Unknown163 = other.Unknown163;
      }
      if (other.Unknown164 != 0) {
        Unknown164 = other.Unknown164;
      }
      if (other.Unknown165 != 0) {
        Unknown165 = other.Unknown165;
      }
      if (other.Unknown166 != 0) {
        Unknown166 = other.Unknown166;
      }
      if (other.Unknown167 != 0) {
        Unknown167 = other.Unknown167;
      }
      if (other.Unknown168 != 0) {
        Unknown168 = other.Unknown168;
      }
      if (other.Unknown169 != 0) {
        Unknown169 = other.Unknown169;
      }
      if (other.Unknown170 != 0) {
        Unknown170 = other.Unknown170;
      }
      if (other.Unknown171 != 0) {
        Unknown171 = other.Unknown171;
      }
      if (other.Unknown172 != 0) {
        Unknown172 = other.Unknown172;
      }
      if (other.Unknown173 != 0) {
        Unknown173 = other.Unknown173;
      }
      if (other.Unknown174 != 0) {
        Unknown174 = other.Unknown174;
      }
      if (other.Unknown175 != 0) {
        Unknown175 = other.Unknown175;
      }
      if (other.Unknown176 != 0) {
        Unknown176 = other.Unknown176;
      }
      if (other.Unknown177 != 0) {
        Unknown177 = other.Unknown177;
      }
      if (other.Unknown178 != 0) {
        Unknown178 = other.Unknown178;
      }
      if (other.Unknown179 != 0) {
        Unknown179 = other.Unknown179;
      }
      if (other.Unknown180 != 0) {
        Unknown180 = other.Unknown180;
      }
      if (other.Unknown181 != 0) {
        Unknown181 = other.Unknown181;
      }
      if (other.Unknown182 != 0) {
        Unknown182 = other.Unknown182;
      }
      if (other.Unknown183 != 0) {
        Unknown183 = other.Unknown183;
      }
      if (other.Unknown184 != 0) {
        Unknown184 = other.Unknown184;
      }
      if (other.Unknown185 != 0) {
        Unknown185 = other.Unknown185;
      }
      if (other.Unknown186 != 0) {
        Unknown186 = other.Unknown186;
      }
      if (other.Unknown187 != 0) {
        Unknown187 = other.Unknown187;
      }
      if (other.Unknown188 != 0) {
        Unknown188 = other.Unknown188;
      }
      if (other.Unknown189 != 0) {
        Unknown189 = other.Unknown189;
      }
      if (other.Unknown190 != 0) {
        Unknown190 = other.Unknown190;
      }
      if (other.Unknown191 != 0) {
        Unknown191 = other.Unknown191;
      }
      if (other.Unknown192 != 0) {
        Unknown192 = other.Unknown192;
      }
      if (other.Unknown193 != 0) {
        Unknown193 = other.Unknown193;
      }
      if (other.Unknown194 != 0) {
        Unknown194 = other.Unknown194;
      }
      if (other.Unknown195 != 0) {
        Unknown195 = other.Unknown195;
      }
      if (other.Unknown196 != 0) {
        Unknown196 = other.Unknown196;
      }
      if (other.Unknown197 != 0) {
        Unknown197 = other.Unknown197;
      }
      if (other.Unknown198 != 0) {
        Unknown198 = other.Unknown198;
      }
      if (other.Unknown199 != 0) {
        Unknown199 = other.Unknown199;
      }
      if (other.Unknown200 != 0) {
        Unknown200 = other.Unknown200;
      }
      if (other.Unknown201 != 0) {
        Unknown201 = other.Unknown201;
      }
      if (other.Unknown202 != 0) {
        Unknown202 = other.Unknown202;
      }
      if (other.Unknown203 != 0) {
        Unknown203 = other.Unknown203;
      }
      if (other.Unknown204 != 0) {
        Unknown204 = other.Unknown204;
      }
      if (other.Unknown205 != 0) {
        Unknown205 = other.Unknown205;
      }
      if (other.Unknown206 != 0) {
        Unknown206 = other.Unknown206;
      }
      if (other.Unknown207 != 0) {
        Unknown207 = other.Unknown207;
      }
      if (other.Unknown208 != 0) {
        Unknown208 = other.Unknown208;
      }
      if (other.Unknown209 != 0) {
        Unknown209 = other.Unknown209;
      }
      if (other.Unknown210 != 0) {
        Unknown210 = other.Unknown210;
      }
      if (other.Unknown211 != 0) {
        Unknown211 = other.Unknown211;
      }
      if (other.Unknown212 != 0) {
        Unknown212 = other.Unknown212;
      }
      if (other.Unknown213 != 0) {
        Unknown213 = other.Unknown213;
      }
      if (other.Unknown214 != 0) {
        Unknown214 = other.Unknown214;
      }
      if (other.Unknown215 != 0) {
        Unknown215 = other.Unknown215;
      }
      if (other.Unknown216 != 0) {
        Unknown216 = other.Unknown216;
      }
      if (other.Unknown217 != 0) {
        Unknown217 = other.Unknown217;
      }
      if (other.Unknown218 != 0) {
        Unknown218 = other.Unknown218;
      }
      if (other.Unknown219 != 0) {
        Unknown219 = other.Unknown219;
      }
      if (other.Unknown220 != 0) {
        Unknown220 = other.Unknown220;
      }
      if (other.Unknown221 != 0) {
        Unknown221 = other.Unknown221;
      }
      if (other.Unknown222 != 0) {
        Unknown222 = other.Unknown222;
      }
      if (other.Unknown223 != 0) {
        Unknown223 = other.Unknown223;
      }
      if (other.Unknown224 != 0) {
        Unknown224 = other.Unknown224;
      }
      if (other.Unknown225 != 0) {
        Unknown225 = other.Unknown225;
      }
      if (other.Unknown226 != 0) {
        Unknown226 = other.Unknown226;
      }
      if (other.Unknown227 != 0) {
        Unknown227 = other.Unknown227;
      }
      if (other.Unknown228 != 0) {
        Unknown228 = other.Unknown228;
      }
      if (other.Unknown229 != 0) {
        Unknown229 = other.Unknown229;
      }
      if (other.Unknown230 != 0) {
        Unknown230 = other.Unknown230;
      }
      if (other.Unknown231 != 0) {
        Unknown231 = other.Unknown231;
      }
      if (other.Unknown232 != 0) {
        Unknown232 = other.Unknown232;
      }
      if (other.Unknown233 != 0) {
        Unknown233 = other.Unknown233;
      }
      if (other.Unknown234 != 0) {
        Unknown234 = other.Unknown234;
      }
      if (other.Unknown235 != 0) {
        Unknown235 = other.Unknown235;
      }
      if (other.Unknown236 != 0) {
        Unknown236 = other.Unknown236;
      }
      if (other.Unknown237 != 0) {
        Unknown237 = other.Unknown237;
      }
      if (other.Unknown238 != 0) {
        Unknown238 = other.Unknown238;
      }
      if (other.Unknown239 != 0) {
        Unknown239 = other.Unknown239;
      }
      if (other.Unknown240 != 0) {
        Unknown240 = other.Unknown240;
      }
      if (other.Unknown241 != 0) {
        Unknown241 = other.Unknown241;
      }
      if (other.Unknown242 != 0) {
        Unknown242 = other.Unknown242;
      }
      if (other.Unknown243 != 0) {
        Unknown243 = other.Unknown243;
      }
      if (other.Unknown244 != 0) {
        Unknown244 = other.Unknown244;
      }
      if (other.Unknown245 != 0) {
        Unknown245 = other.Unknown245;
      }
      if (other.Unknown246 != 0) {
        Unknown246 = other.Unknown246;
      }
      if (other.Unknown247 != 0) {
        Unknown247 = other.Unknown247;
      }
      if (other.Unknown248 != 0) {
        Unknown248 = other.Unknown248;
      }
      if (other.Unknown249 != 0) {
        Unknown249 = other.Unknown249;
      }
      if (other.Unknown250 != 0) {
        Unknown250 = other.Unknown250;
      }
      if (other.Unknown251 != 0) {
        Unknown251 = other.Unknown251;
      }
      if (other.Unknown252 != 0) {
        Unknown252 = other.Unknown252;
      }
      if (other.Unknown253 != 0) {
        Unknown253 = other.Unknown253;
      }
      if (other.Unknown254 != 0) {
        Unknown254 = other.Unknown254;
      }
      if (other.Unknown255 != 0) {
        Unknown255 = other.Unknown255;
      }
      if (other.Unknown256 != 0) {
        Unknown256 = other.Unknown256;
      }
      if (other.Unknown257 != 0) {
        Unknown257 = other.Unknown257;
      }
      if (other.Unknown258 != 0) {
        Unknown258 = other.Unknown258;
      }
      if (other.Unknown259 != 0) {
        Unknown259 = other.Unknown259;
      }
      if (other.Unknown260 != 0) {
        Unknown260 = other.Unknown260;
      }
      if (other.Unknown261 != 0) {
        Unknown261 = other.Unknown261;
      }
      if (other.Unknown262 != 0) {
        Unknown262 = other.Unknown262;
      }
      if (other.Unknown263 != 0) {
        Unknown263 = other.Unknown263;
      }
      if (other.Unknown264 != 0) {
        Unknown264 = other.Unknown264;
      }
      if (other.AtkDarkCorrection != 0) {
        AtkDarkCorrection = other.AtkDarkCorrection;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadSInt32();
            break;
          }
          case 32: {
            Offset = input.ReadSInt32();
            break;
          }
          case 45: {
            Hit0Radius = input.ReadFloat();
            break;
          }
          case 53: {
            Hit1Radius = input.ReadFloat();
            break;
          }
          case 61: {
            Hit2Radius = input.ReadFloat();
            break;
          }
          case 69: {
            Hit3Radius = input.ReadFloat();
            break;
          }
          case 77: {
            KnockbackDist = input.ReadFloat();
            break;
          }
          case 85: {
            HitStopTime = input.ReadFloat();
            break;
          }
          case 88: {
            SpEffectId0 = input.ReadSInt32();
            break;
          }
          case 96: {
            SpEffectId1 = input.ReadSInt32();
            break;
          }
          case 104: {
            SpEffectId2 = input.ReadSInt32();
            break;
          }
          case 112: {
            SpEffectId3 = input.ReadSInt32();
            break;
          }
          case 120: {
            SpEffectId4 = input.ReadSInt32();
            break;
          }
          case 128: {
            Hit0DmyPoly1 = input.ReadSInt32();
            break;
          }
          case 136: {
            Hit1DmyPoly1 = input.ReadSInt32();
            break;
          }
          case 144: {
            Hit2DmyPoly1 = input.ReadSInt32();
            break;
          }
          case 152: {
            Hit3DmyPoly1 = input.ReadSInt32();
            break;
          }
          case 160: {
            Hit0DmyPoly2 = input.ReadSInt32();
            break;
          }
          case 168: {
            Hit1DmyPoly2 = input.ReadSInt32();
            break;
          }
          case 176: {
            Hit2DmyPoly2 = input.ReadSInt32();
            break;
          }
          case 184: {
            Hit3DmyPoly2 = input.ReadSInt32();
            break;
          }
          case 192: {
            BlowingCorrection = input.ReadUInt32();
            break;
          }
          case 200: {
            AtkPhysCorrection = input.ReadUInt32();
            break;
          }
          case 208: {
            AtkMagCorrection = input.ReadUInt32();
            break;
          }
          case 216: {
            AtkFireCorrection = input.ReadUInt32();
            break;
          }
          case 224: {
            AtkThunCorrection = input.ReadUInt32();
            break;
          }
          case 232: {
            AtkStamCorrection = input.ReadUInt32();
            break;
          }
          case 240: {
            GuardAtkRateCorrection = input.ReadUInt32();
            break;
          }
          case 248: {
            GuardBreakCorrection = input.ReadUInt32();
            break;
          }
          case 256: {
            AtkThrowEscapeCorrection = input.ReadUInt32();
            break;
          }
          case 264: {
            AtkPhys = input.ReadUInt32();
            break;
          }
          case 272: {
            AtkMag = input.ReadUInt32();
            break;
          }
          case 280: {
            AtkFire = input.ReadUInt32();
            break;
          }
          case 288: {
            AtkThun = input.ReadUInt32();
            break;
          }
          case 296: {
            AtkStam = input.ReadUInt32();
            break;
          }
          case 304: {
            GuardAtkRate = input.ReadUInt32();
            break;
          }
          case 312: {
            GuardBreakRate = input.ReadUInt32();
            break;
          }
          case 320: {
            AtkSuperArmor = input.ReadUInt32();
            break;
          }
          case 328: {
            AtkThrowEscape = input.ReadUInt32();
            break;
          }
          case 336: {
            AtkObj = input.ReadUInt32();
            break;
          }
          case 344: {
            GuardStaminaCutRate = input.ReadSInt32();
            break;
          }
          case 352: {
            GuardRate = input.ReadSInt32();
            break;
          }
          case 360: {
            ThrowTypeId = input.ReadSInt32();
            break;
          }
          case 368: {
            Hit0HitType = input.ReadUInt32();
            break;
          }
          case 376: {
            Hit1HitType = input.ReadUInt32();
            break;
          }
          case 384: {
            Hit2HitType = input.ReadUInt32();
            break;
          }
          case 392: {
            Hit3HitType = input.ReadUInt32();
            break;
          }
          case 400: {
            Hit0Priority = input.ReadUInt32();
            break;
          }
          case 408: {
            Hit1Priority = input.ReadUInt32();
            break;
          }
          case 416: {
            Hit2Priority = input.ReadUInt32();
            break;
          }
          case 424: {
            Hit3Priority = input.ReadUInt32();
            break;
          }
          case 432: {
            DamageLevel = input.ReadUInt32();
            break;
          }
          case 440: {
            MapHitType = input.ReadUInt32();
            break;
          }
          case 448: {
            GuardCutCancelRate = input.ReadSInt32();
            break;
          }
          case 456: {
            AtkAttribute = input.ReadUInt32();
            break;
          }
          case 464: {
            SpecialAttributes = input.ReadUInt32();
            break;
          }
          case 472: {
            AttackType = input.ReadUInt32();
            break;
          }
          case 480: {
            AtkMaterial = input.ReadUInt32();
            break;
          }
          case 488: {
            AtkSize = input.ReadUInt32();
            break;
          }
          case 496: {
            DefMaterial = input.ReadUInt32();
            break;
          }
          case 504: {
            DefSfxMaterial = input.ReadUInt32();
            break;
          }
          case 512: {
            HitSourceType = input.ReadUInt32();
            break;
          }
          case 520: {
            ThrowFlag = input.ReadUInt32();
            break;
          }
          case 528: {
            BitField = input.ReadUInt32();
            break;
          }
          case 536: {
            Unknown0 = input.ReadUInt32();
            break;
          }
          case 544: {
            Unknown1 = input.ReadUInt32();
            break;
          }
          case 552: {
            Unknown2 = input.ReadUInt32();
            break;
          }
          case 560: {
            Unknown3 = input.ReadUInt32();
            break;
          }
          case 568: {
            Unknown4 = input.ReadUInt32();
            break;
          }
          case 576: {
            Unknown5 = input.ReadUInt32();
            break;
          }
          case 584: {
            Unknown6 = input.ReadUInt32();
            break;
          }
          case 592: {
            Unknown7 = input.ReadUInt32();
            break;
          }
          case 600: {
            Unknown8 = input.ReadUInt32();
            break;
          }
          case 608: {
            Unknown9 = input.ReadUInt32();
            break;
          }
          case 616: {
            Unknown10 = input.ReadUInt32();
            break;
          }
          case 624: {
            Unknown11 = input.ReadUInt32();
            break;
          }
          case 632: {
            Unknown12 = input.ReadUInt32();
            break;
          }
          case 640: {
            Unknown13 = input.ReadUInt32();
            break;
          }
          case 648: {
            Unknown14 = input.ReadUInt32();
            break;
          }
          case 656: {
            Unknown15 = input.ReadUInt32();
            break;
          }
          case 664: {
            Unknown16 = input.ReadUInt32();
            break;
          }
          case 672: {
            Unknown17 = input.ReadUInt32();
            break;
          }
          case 680: {
            Unknown18 = input.ReadUInt32();
            break;
          }
          case 688: {
            Unknown19 = input.ReadUInt32();
            break;
          }
          case 696: {
            Unknown20 = input.ReadUInt32();
            break;
          }
          case 704: {
            Unknown21 = input.ReadUInt32();
            break;
          }
          case 712: {
            Unknown22 = input.ReadUInt32();
            break;
          }
          case 720: {
            Unknown23 = input.ReadUInt32();
            break;
          }
          case 728: {
            Unknown24 = input.ReadUInt32();
            break;
          }
          case 736: {
            Unknown25 = input.ReadUInt32();
            break;
          }
          case 744: {
            Unknown26 = input.ReadUInt32();
            break;
          }
          case 752: {
            Unknown27 = input.ReadUInt32();
            break;
          }
          case 760: {
            Unknown28 = input.ReadUInt32();
            break;
          }
          case 768: {
            Unknown29 = input.ReadUInt32();
            break;
          }
          case 776: {
            Unknown30 = input.ReadUInt32();
            break;
          }
          case 784: {
            Unknown31 = input.ReadUInt32();
            break;
          }
          case 792: {
            Unknown32 = input.ReadUInt32();
            break;
          }
          case 800: {
            Unknown33 = input.ReadUInt32();
            break;
          }
          case 808: {
            Unknown34 = input.ReadUInt32();
            break;
          }
          case 816: {
            Unknown35 = input.ReadUInt32();
            break;
          }
          case 824: {
            Unknown36 = input.ReadUInt32();
            break;
          }
          case 832: {
            Unknown37 = input.ReadUInt32();
            break;
          }
          case 840: {
            Unknown38 = input.ReadUInt32();
            break;
          }
          case 848: {
            Unknown39 = input.ReadUInt32();
            break;
          }
          case 856: {
            Unknown40 = input.ReadUInt32();
            break;
          }
          case 864: {
            Unknown41 = input.ReadUInt32();
            break;
          }
          case 872: {
            Unknown42 = input.ReadUInt32();
            break;
          }
          case 880: {
            Unknown43 = input.ReadUInt32();
            break;
          }
          case 888: {
            Unknown44 = input.ReadUInt32();
            break;
          }
          case 896: {
            Unknown45 = input.ReadUInt32();
            break;
          }
          case 904: {
            Unknown46 = input.ReadUInt32();
            break;
          }
          case 912: {
            Unknown47 = input.ReadUInt32();
            break;
          }
          case 920: {
            Unknown48 = input.ReadUInt32();
            break;
          }
          case 928: {
            Unknown49 = input.ReadUInt32();
            break;
          }
          case 936: {
            Unknown50 = input.ReadUInt32();
            break;
          }
          case 944: {
            Unknown51 = input.ReadUInt32();
            break;
          }
          case 952: {
            Unknown52 = input.ReadUInt32();
            break;
          }
          case 960: {
            Unknown53 = input.ReadUInt32();
            break;
          }
          case 968: {
            Unknown54 = input.ReadUInt32();
            break;
          }
          case 976: {
            Unknown55 = input.ReadUInt32();
            break;
          }
          case 984: {
            Unknown56 = input.ReadUInt32();
            break;
          }
          case 992: {
            Unknown57 = input.ReadUInt32();
            break;
          }
          case 1000: {
            Unknown58 = input.ReadUInt32();
            break;
          }
          case 1008: {
            Unknown59 = input.ReadUInt32();
            break;
          }
          case 1016: {
            Unknown60 = input.ReadUInt32();
            break;
          }
          case 1024: {
            Unknown61 = input.ReadUInt32();
            break;
          }
          case 1032: {
            Unknown62 = input.ReadUInt32();
            break;
          }
          case 1040: {
            Unknown63 = input.ReadUInt32();
            break;
          }
          case 1048: {
            Unknown64 = input.ReadUInt32();
            break;
          }
          case 1056: {
            Unknown65 = input.ReadUInt32();
            break;
          }
          case 1064: {
            Unknown66 = input.ReadUInt32();
            break;
          }
          case 1072: {
            Unknown67 = input.ReadUInt32();
            break;
          }
          case 1080: {
            Unknown68 = input.ReadUInt32();
            break;
          }
          case 1088: {
            Unknown69 = input.ReadUInt32();
            break;
          }
          case 1096: {
            Unknown70 = input.ReadUInt32();
            break;
          }
          case 1104: {
            Unknown71 = input.ReadUInt32();
            break;
          }
          case 1112: {
            Unknown72 = input.ReadUInt32();
            break;
          }
          case 1120: {
            Unknown73 = input.ReadUInt32();
            break;
          }
          case 1128: {
            Unknown74 = input.ReadUInt32();
            break;
          }
          case 1136: {
            Unknown75 = input.ReadUInt32();
            break;
          }
          case 1144: {
            Unknown76 = input.ReadUInt32();
            break;
          }
          case 1152: {
            Unknown77 = input.ReadUInt32();
            break;
          }
          case 1160: {
            Unknown78 = input.ReadUInt32();
            break;
          }
          case 1168: {
            Unknown79 = input.ReadUInt32();
            break;
          }
          case 1176: {
            Unknown80 = input.ReadUInt32();
            break;
          }
          case 1184: {
            Unknown81 = input.ReadUInt32();
            break;
          }
          case 1192: {
            Unknown82 = input.ReadUInt32();
            break;
          }
          case 1200: {
            Unknown83 = input.ReadUInt32();
            break;
          }
          case 1208: {
            Unknown84 = input.ReadUInt32();
            break;
          }
          case 1216: {
            Unknown85 = input.ReadUInt32();
            break;
          }
          case 1224: {
            Unknown86 = input.ReadUInt32();
            break;
          }
          case 1232: {
            Unknown87 = input.ReadUInt32();
            break;
          }
          case 1240: {
            Unknown88 = input.ReadUInt32();
            break;
          }
          case 1248: {
            Unknown89 = input.ReadUInt32();
            break;
          }
          case 1256: {
            Unknown90 = input.ReadUInt32();
            break;
          }
          case 1264: {
            Unknown91 = input.ReadUInt32();
            break;
          }
          case 1272: {
            Unknown92 = input.ReadUInt32();
            break;
          }
          case 1280: {
            Unknown93 = input.ReadUInt32();
            break;
          }
          case 1288: {
            Unknown94 = input.ReadUInt32();
            break;
          }
          case 1296: {
            Unknown95 = input.ReadUInt32();
            break;
          }
          case 1304: {
            Unknown96 = input.ReadUInt32();
            break;
          }
          case 1312: {
            Unknown97 = input.ReadUInt32();
            break;
          }
          case 1320: {
            Unknown98 = input.ReadUInt32();
            break;
          }
          case 1328: {
            Unknown99 = input.ReadUInt32();
            break;
          }
          case 1336: {
            Unknown100 = input.ReadUInt32();
            break;
          }
          case 1344: {
            Unknown101 = input.ReadUInt32();
            break;
          }
          case 1352: {
            Unknown102 = input.ReadUInt32();
            break;
          }
          case 1360: {
            Unknown103 = input.ReadUInt32();
            break;
          }
          case 1368: {
            Unknown104 = input.ReadUInt32();
            break;
          }
          case 1376: {
            Unknown105 = input.ReadUInt32();
            break;
          }
          case 1384: {
            Unknown106 = input.ReadUInt32();
            break;
          }
          case 1392: {
            Unknown107 = input.ReadUInt32();
            break;
          }
          case 1400: {
            Unknown108 = input.ReadUInt32();
            break;
          }
          case 1408: {
            Unknown109 = input.ReadUInt32();
            break;
          }
          case 1416: {
            Unknown110 = input.ReadUInt32();
            break;
          }
          case 1424: {
            Unknown111 = input.ReadUInt32();
            break;
          }
          case 1432: {
            Unknown112 = input.ReadUInt32();
            break;
          }
          case 1440: {
            Unknown113 = input.ReadUInt32();
            break;
          }
          case 1448: {
            Unknown114 = input.ReadUInt32();
            break;
          }
          case 1456: {
            Unknown115 = input.ReadUInt32();
            break;
          }
          case 1464: {
            Unknown116 = input.ReadUInt32();
            break;
          }
          case 1472: {
            Unknown117 = input.ReadUInt32();
            break;
          }
          case 1480: {
            Unknown118 = input.ReadUInt32();
            break;
          }
          case 1488: {
            Unknown119 = input.ReadUInt32();
            break;
          }
          case 1496: {
            Unknown120 = input.ReadUInt32();
            break;
          }
          case 1504: {
            Unknown121 = input.ReadUInt32();
            break;
          }
          case 1512: {
            Unknown122 = input.ReadUInt32();
            break;
          }
          case 1520: {
            Unknown123 = input.ReadUInt32();
            break;
          }
          case 1528: {
            Unknown124 = input.ReadUInt32();
            break;
          }
          case 1536: {
            Unknown125 = input.ReadUInt32();
            break;
          }
          case 1544: {
            Unknown126 = input.ReadUInt32();
            break;
          }
          case 1552: {
            Unknown127 = input.ReadUInt32();
            break;
          }
          case 1560: {
            Unknown128 = input.ReadUInt32();
            break;
          }
          case 1568: {
            Unknown129 = input.ReadUInt32();
            break;
          }
          case 1576: {
            Unknown130 = input.ReadUInt32();
            break;
          }
          case 1584: {
            Unknown131 = input.ReadUInt32();
            break;
          }
          case 1592: {
            Unknown132 = input.ReadUInt32();
            break;
          }
          case 1600: {
            Unknown133 = input.ReadUInt32();
            break;
          }
          case 1608: {
            Unknown134 = input.ReadUInt32();
            break;
          }
          case 1616: {
            Unknown135 = input.ReadUInt32();
            break;
          }
          case 1624: {
            Unknown136 = input.ReadUInt32();
            break;
          }
          case 1632: {
            Unknown137 = input.ReadUInt32();
            break;
          }
          case 1640: {
            Unknown138 = input.ReadUInt32();
            break;
          }
          case 1648: {
            Unknown139 = input.ReadUInt32();
            break;
          }
          case 1656: {
            Unknown140 = input.ReadUInt32();
            break;
          }
          case 1664: {
            Unknown141 = input.ReadUInt32();
            break;
          }
          case 1672: {
            Unknown142 = input.ReadUInt32();
            break;
          }
          case 1680: {
            Unknown143 = input.ReadUInt32();
            break;
          }
          case 1688: {
            Unknown144 = input.ReadUInt32();
            break;
          }
          case 1696: {
            Unknown145 = input.ReadUInt32();
            break;
          }
          case 1704: {
            Unknown146 = input.ReadUInt32();
            break;
          }
          case 1712: {
            Unknown147 = input.ReadUInt32();
            break;
          }
          case 1720: {
            Unknown148 = input.ReadUInt32();
            break;
          }
          case 1728: {
            Unknown149 = input.ReadUInt32();
            break;
          }
          case 1736: {
            Unknown150 = input.ReadUInt32();
            break;
          }
          case 1744: {
            Unknown151 = input.ReadUInt32();
            break;
          }
          case 1752: {
            Unknown152 = input.ReadUInt32();
            break;
          }
          case 1760: {
            Unknown153 = input.ReadUInt32();
            break;
          }
          case 1768: {
            Unknown154 = input.ReadUInt32();
            break;
          }
          case 1776: {
            Unknown155 = input.ReadUInt32();
            break;
          }
          case 1784: {
            Unknown156 = input.ReadUInt32();
            break;
          }
          case 1792: {
            Unknown157 = input.ReadUInt32();
            break;
          }
          case 1800: {
            Unknown158 = input.ReadUInt32();
            break;
          }
          case 1808: {
            Unknown159 = input.ReadUInt32();
            break;
          }
          case 1816: {
            Unknown160 = input.ReadUInt32();
            break;
          }
          case 1824: {
            Unknown161 = input.ReadUInt32();
            break;
          }
          case 1832: {
            Unknown162 = input.ReadUInt32();
            break;
          }
          case 1840: {
            Unknown163 = input.ReadUInt32();
            break;
          }
          case 1848: {
            Unknown164 = input.ReadUInt32();
            break;
          }
          case 1856: {
            Unknown165 = input.ReadUInt32();
            break;
          }
          case 1864: {
            Unknown166 = input.ReadUInt32();
            break;
          }
          case 1872: {
            Unknown167 = input.ReadUInt32();
            break;
          }
          case 1880: {
            Unknown168 = input.ReadUInt32();
            break;
          }
          case 1888: {
            Unknown169 = input.ReadUInt32();
            break;
          }
          case 1896: {
            Unknown170 = input.ReadUInt32();
            break;
          }
          case 1904: {
            Unknown171 = input.ReadUInt32();
            break;
          }
          case 1912: {
            Unknown172 = input.ReadUInt32();
            break;
          }
          case 1920: {
            Unknown173 = input.ReadUInt32();
            break;
          }
          case 1928: {
            Unknown174 = input.ReadUInt32();
            break;
          }
          case 1936: {
            Unknown175 = input.ReadUInt32();
            break;
          }
          case 1944: {
            Unknown176 = input.ReadUInt32();
            break;
          }
          case 1952: {
            Unknown177 = input.ReadUInt32();
            break;
          }
          case 1960: {
            Unknown178 = input.ReadUInt32();
            break;
          }
          case 1968: {
            Unknown179 = input.ReadUInt32();
            break;
          }
          case 1976: {
            Unknown180 = input.ReadUInt32();
            break;
          }
          case 1984: {
            Unknown181 = input.ReadUInt32();
            break;
          }
          case 1992: {
            Unknown182 = input.ReadUInt32();
            break;
          }
          case 2000: {
            Unknown183 = input.ReadUInt32();
            break;
          }
          case 2008: {
            Unknown184 = input.ReadUInt32();
            break;
          }
          case 2016: {
            Unknown185 = input.ReadUInt32();
            break;
          }
          case 2024: {
            Unknown186 = input.ReadUInt32();
            break;
          }
          case 2032: {
            Unknown187 = input.ReadUInt32();
            break;
          }
          case 2040: {
            Unknown188 = input.ReadUInt32();
            break;
          }
          case 2048: {
            Unknown189 = input.ReadUInt32();
            break;
          }
          case 2056: {
            Unknown190 = input.ReadUInt32();
            break;
          }
          case 2064: {
            Unknown191 = input.ReadUInt32();
            break;
          }
          case 2072: {
            Unknown192 = input.ReadUInt32();
            break;
          }
          case 2080: {
            Unknown193 = input.ReadUInt32();
            break;
          }
          case 2088: {
            Unknown194 = input.ReadUInt32();
            break;
          }
          case 2096: {
            Unknown195 = input.ReadUInt32();
            break;
          }
          case 2104: {
            Unknown196 = input.ReadUInt32();
            break;
          }
          case 2112: {
            Unknown197 = input.ReadUInt32();
            break;
          }
          case 2120: {
            Unknown198 = input.ReadUInt32();
            break;
          }
          case 2128: {
            Unknown199 = input.ReadUInt32();
            break;
          }
          case 2136: {
            Unknown200 = input.ReadUInt32();
            break;
          }
          case 2144: {
            Unknown201 = input.ReadUInt32();
            break;
          }
          case 2152: {
            Unknown202 = input.ReadUInt32();
            break;
          }
          case 2160: {
            Unknown203 = input.ReadUInt32();
            break;
          }
          case 2168: {
            Unknown204 = input.ReadUInt32();
            break;
          }
          case 2176: {
            Unknown205 = input.ReadUInt32();
            break;
          }
          case 2184: {
            Unknown206 = input.ReadUInt32();
            break;
          }
          case 2192: {
            Unknown207 = input.ReadUInt32();
            break;
          }
          case 2200: {
            Unknown208 = input.ReadUInt32();
            break;
          }
          case 2208: {
            Unknown209 = input.ReadUInt32();
            break;
          }
          case 2216: {
            Unknown210 = input.ReadUInt32();
            break;
          }
          case 2224: {
            Unknown211 = input.ReadUInt32();
            break;
          }
          case 2232: {
            Unknown212 = input.ReadUInt32();
            break;
          }
          case 2240: {
            Unknown213 = input.ReadUInt32();
            break;
          }
          case 2248: {
            Unknown214 = input.ReadUInt32();
            break;
          }
          case 2256: {
            Unknown215 = input.ReadUInt32();
            break;
          }
          case 2264: {
            Unknown216 = input.ReadUInt32();
            break;
          }
          case 2272: {
            Unknown217 = input.ReadUInt32();
            break;
          }
          case 2280: {
            Unknown218 = input.ReadUInt32();
            break;
          }
          case 2288: {
            Unknown219 = input.ReadUInt32();
            break;
          }
          case 2296: {
            Unknown220 = input.ReadUInt32();
            break;
          }
          case 2304: {
            Unknown221 = input.ReadUInt32();
            break;
          }
          case 2312: {
            Unknown222 = input.ReadUInt32();
            break;
          }
          case 2320: {
            Unknown223 = input.ReadUInt32();
            break;
          }
          case 2328: {
            Unknown224 = input.ReadUInt32();
            break;
          }
          case 2336: {
            Unknown225 = input.ReadUInt32();
            break;
          }
          case 2344: {
            Unknown226 = input.ReadUInt32();
            break;
          }
          case 2352: {
            Unknown227 = input.ReadUInt32();
            break;
          }
          case 2360: {
            Unknown228 = input.ReadUInt32();
            break;
          }
          case 2368: {
            Unknown229 = input.ReadUInt32();
            break;
          }
          case 2376: {
            Unknown230 = input.ReadUInt32();
            break;
          }
          case 2384: {
            Unknown231 = input.ReadUInt32();
            break;
          }
          case 2392: {
            Unknown232 = input.ReadUInt32();
            break;
          }
          case 2400: {
            Unknown233 = input.ReadUInt32();
            break;
          }
          case 2408: {
            Unknown234 = input.ReadUInt32();
            break;
          }
          case 2416: {
            Unknown235 = input.ReadUInt32();
            break;
          }
          case 2424: {
            Unknown236 = input.ReadUInt32();
            break;
          }
          case 2432: {
            Unknown237 = input.ReadUInt32();
            break;
          }
          case 2440: {
            Unknown238 = input.ReadUInt32();
            break;
          }
          case 2448: {
            Unknown239 = input.ReadUInt32();
            break;
          }
          case 2456: {
            Unknown240 = input.ReadUInt32();
            break;
          }
          case 2464: {
            Unknown241 = input.ReadUInt32();
            break;
          }
          case 2472: {
            Unknown242 = input.ReadUInt32();
            break;
          }
          case 2480: {
            Unknown243 = input.ReadUInt32();
            break;
          }
          case 2488: {
            Unknown244 = input.ReadUInt32();
            break;
          }
          case 2496: {
            Unknown245 = input.ReadUInt32();
            break;
          }
          case 2504: {
            Unknown246 = input.ReadUInt32();
            break;
          }
          case 2512: {
            Unknown247 = input.ReadUInt32();
            break;
          }
          case 2520: {
            Unknown248 = input.ReadUInt32();
            break;
          }
          case 2528: {
            Unknown249 = input.ReadUInt32();
            break;
          }
          case 2536: {
            Unknown250 = input.ReadUInt32();
            break;
          }
          case 2544: {
            Unknown251 = input.ReadUInt32();
            break;
          }
          case 2552: {
            Unknown252 = input.ReadUInt32();
            break;
          }
          case 2560: {
            Unknown253 = input.ReadUInt32();
            break;
          }
          case 2568: {
            Unknown254 = input.ReadUInt32();
            break;
          }
          case 2576: {
            Unknown255 = input.ReadUInt32();
            break;
          }
          case 2584: {
            Unknown256 = input.ReadUInt32();
            break;
          }
          case 2592: {
            Unknown257 = input.ReadUInt32();
            break;
          }
          case 2600: {
            Unknown258 = input.ReadUInt32();
            break;
          }
          case 2608: {
            Unknown259 = input.ReadUInt32();
            break;
          }
          case 2616: {
            Unknown260 = input.ReadUInt32();
            break;
          }
          case 2624: {
            Unknown261 = input.ReadUInt32();
            break;
          }
          case 2632: {
            Unknown262 = input.ReadUInt32();
            break;
          }
          case 2640: {
            Unknown263 = input.ReadUInt32();
            break;
          }
          case 2648: {
            Unknown264 = input.ReadUInt32();
            break;
          }
          case 2656: {
            AtkDarkCorrection = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FmgEntry : pb::IMessage<FmgEntry> {
    private static readonly pb::MessageParser<FmgEntry> _parser = new pb::MessageParser<FmgEntry>(() => new FmgEntry());
    public static pb::MessageParser<FmgEntry> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ds3Ext.Ds3ExtReflection.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FmgEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FmgEntry(FmgEntry other) : this() {
      id_ = other.id_;
      idMax_ = other.idMax_;
      idMin_ = other.idMin_;
      text_ = other.text_;
    }

    public FmgEntry Clone() {
      return new FmgEntry(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "IdMax" field.</summary>
    public const int IdMaxFieldNumber = 3;
    private int idMax_;
    public int IdMax {
      get { return idMax_; }
      set {
        idMax_ = value;
      }
    }

    /// <summary>Field number for the "IdMin" field.</summary>
    public const int IdMinFieldNumber = 4;
    private int idMin_;
    public int IdMin {
      get { return idMin_; }
      set {
        idMin_ = value;
      }
    }

    /// <summary>Field number for the "Text" field.</summary>
    public const int TextFieldNumber = 5;
    private string text_ = "";
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FmgEntry);
    }

    public bool Equals(FmgEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (IdMax != other.IdMax) return false;
      if (IdMin != other.IdMin) return false;
      if (Text != other.Text) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (IdMax != 0) hash ^= IdMax.GetHashCode();
      if (IdMin != 0) hash ^= IdMin.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Id);
      }
      if (IdMax != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(IdMax);
      }
      if (IdMin != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(IdMin);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Text);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Id);
      }
      if (IdMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IdMax);
      }
      if (IdMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IdMin);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    public void MergeFrom(FmgEntry other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.IdMax != 0) {
        IdMax = other.IdMax;
      }
      if (other.IdMin != 0) {
        IdMin = other.IdMin;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Id = input.ReadSInt32();
            break;
          }
          case 24: {
            IdMax = input.ReadSInt32();
            break;
          }
          case 32: {
            IdMin = input.ReadSInt32();
            break;
          }
          case 42: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
